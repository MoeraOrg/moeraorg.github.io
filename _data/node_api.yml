objects:
  - name: Asyncronous operations object
    description: Asyncronous operations pending or just finished on the node.
    requests:
      - url: /async-operations/remote-posting-verification/{id}
        type: GET
        params:
          - type: String
            name: id
            description: asynchronous operation ID
        out:
          struct: RemotePostingVerificationInfo
        auth: admin
        description: Get status of the asyncronous operation that performs verification of a remote posting signature.
  - name: Credentials object
    description: Credentials used to authenticate the administrator of the node.
    requests:
      - url: /credentials
        type: GET
        out:
          struct: CredentialsCreated
        description: Check whether the credentials are initialized already.
      - url: /credentials
        type: POST
        in:
          struct: Credentials
        out:
          struct: Result
        description: >
          Initialize credentials, if they are not set yet. Note that this operation can be executed without
          authentication, so this should be done as soon as possible after the node installation. Sign in is not allowed
          until the credentials are set.
        errors:
          - code: credentials.already-created
            description: credentials are already created
      - url: /credentials
        type: PUT
        in:
          struct: Credentials
        out:
          struct: Result
        auth: admin
        description: Update credentials.
  - name: Deleted Postings object
    description: >
      All deleted postings, that are not purged from the database yet.
    requests:
      - url: /deleted-postings
        type: GET
        params:
          - type: int
            name: page
            description: page number, 0 by default
          - type: int
            name: limit
            description: page size (maximum number of postings returned), the default is defined by the node
        out:
          struct: PostingInfo
          array: true
        auth: admin
        description: >
          Get the list of deleted postings, page by page. The node may decide to use smaller page size than the given
          <code>limit</code>. The postings are always sorted by the deletion timestamp, descending.
        errors:
          - code: page.invalid
            description: <code>page</code> parameter has an invalid value
          - code: limit.invalid
            description: <code>limit</code> parameter has an invalid value
      - url: /deleted-postings/{id}
        type: GET
        params:
          - type: String
            name: id
            description: ID of the posting
        out:
          struct: PostingInfo
        description: Get an individual deleted posting.
        errors:
          - code: posting.not-found
            description: there is no deleted posting with the given ID
      - url: /deleted-postings/{id}/restore
        type: POST
        params:
          - type: String
            name: id
            description: ID of the posting
        out:
          struct: PostingInfo
        auth: admin
        description: >
          Restore a posting. A new revision is created with the same content as in the latest revision.
        errors:
          - code: posting.not-found
            description: there is no posting with the given ID
  - name: Deleted Posting Revisions object
    description: >
      All revisions of the deleted posting. This object supports the same requests as
      <a href="#Posting%20Revisions%20object">Posting Revisions object</a>, but uses <code>/deleted-postings</code>
      prefix instead of <code>/postings</code>.
  - name: Domains object
    description: >
      One instance of Moera node software can serve several virtual nodes. These virtual nodes are called <i>domains</i>
      and distinguished by the hostname passed in the HTTP request. Each virtual node has <i>node ID</i>, it is used in
      the database to designate the data that belongs to a particular node. The hostname is mapped to the node ID when
      the request is processed, using the list of registered domains. If there is no domain with such a name, the
      special <code>_default_</code> domain is used.
    requests:
      - url: /domains
        type: GET
        out:
          struct: DomainInfo
          array: true
        auth: root secret
        description: Get the list of registered domains.
      - url: /domains/{name}
        type: GET
        params:
          - type: String
            name: name
            description: domain name
        out:
          struct: DomainInfo
        auth: root secret
        description: Get information about the domain with the given hostname.
        errors:
          - code: domain.not-found
            description: there is no domain with the given hostname
      - url: /domains
        type: POST
        in:
          struct: DomainInfo
        out:
          struct: DomainInfo
        auth: root secret
        description: >
          Create a new domain with the given hostname. If <code>nodeId</code> is not passed, it is generated
          automatically.
        errors:
          - code: domainInfo.name.blank
            description: the hostname is empty
          - code: domain.already-exists
            description: the domain with the given hostname already exists
      - url: /domains/{name}
        type: PUT
        params:
          - type: String
            name: name
            description: domain hostname
        in:
          struct: DomainInfo
        out:
          struct: DomainInfo
        auth: root secret
        description: >
          Update the domain with the given hostname. If the new hostname is not passed, the old hostname is preserved.
          (Note that you cannot pass a new name for the default hostname, because it cannot be renamed and
          <code>_default_</code> is not a valid hostname. Skip this field if you want to update the default hostname.)
          If <code>nodeId</code> is not passed, it is generated automatically.
        errors:
          - code: domain.not-found
            description: there is no domain with the given hostname
          - code: domain.cannot-rename-default
            description: cannot change the name of the default domain
      - url: /domains/{name}
        type: DELETE
        params:
          - type: String
            name: name
            description: domain name
        out:
          struct: Result
        auth: root secret
        description: >
          Delete the domain with the given hostname. This operation deletes the domain record only, the user's data
          related to the domain is preserved.
        errors:
          - code: domain.not-found
            description: there is no domain with the given hostname
          - code: domain.cannot-delete-default
            description: cannot delete the default domain
  - name: Node Name object
    description: >
      The name of the node. <a href="/overview/naming.html">Read more</a> about it in the Overview section.
      Operations with the node name are performed asynchronously - need to poll the node periodically to get
      the current status of the operation. Only one operation with the node name may be performed by the node at
      any moment.
    requests:
      - url: /node-name
        type: GET
        out:
          struct: NodeNameInfo
        auth: none or admin
        description: >
          Get the name of the node. Admin user receives also the current status of the latest operation with
          the node name.
      - url: /node-name
        type: POST
        in:
          struct: NameToRegister
        out:
          struct: RegisteredNameSecret
        auth: admin
        description: >
          Register a new name for the node. The corresponding signing key is generated automatically and stored at
          the node. The updating key is generated and returned in the encoded form and in the form of mnemonic
          (a sequence of English words) that need to be written down and stored securely to be able to perform further
          operations with the name.
        errors:
          - code: naming.operation-pending
            description: another operation with the node name is pending currently
      - url: /node-name
        type: PUT
        in:
          struct: RegisteredNameSecret
        out:
          struct: Result
        auth: admin
        description: >
          Update the name of the node. May be used to assign an already-registered name to the node (the corresponding
          signing key is generated automatically and stored at the node), or to prolong the name. The secret or
          mnemonic of the updating key must be provided for this operation.
        errors:
          - code: naming.operation-pending
            description: another operation with the node name is pending currently
          - code: registeredNameSecret.empty
            description: the registered name secret or mnemonic are not provided
          - code: node-name.name-absent
            description: the node name is not provided and not known by the node
          - code: node-name.<naming server error>
            description: >
              various errors returned by naming server
              (<a href="/development/protocols/naming-api.html#error-codes">see the list</a>)
      - url: /node-name
        type: DELETE
        out:
          struct: Result
        auth: admin
        description: >
          Delete all the information related to the node name (including the signing key) from the node. The name
          record on the naming server is not touched.
        errors:
          - code: naming.operation-pending
            description: another operation with the node name is pending currently
  - name: Postings object
    description: >
      All postings. Each posting may contain one or more revisions, a new revision is created every time the posting is
      updated. The latest revision is the current one, the previous ones are marked as deleted.
    requests:
      - url: /postings
        type: POST
        in:
          struct: PostingText
        out:
          struct: PostingInfo
        auth: configurable
        description: >
          Create a new posting from the text given, sign it with the signing key and publish it on the timeline.
          The heading and the preview of the posting are created automatically, if needed.
        errors:
          - code: posting.node-name-not-set
            description: node name is not set yet
          - code: posting.signing-key-not-set
            description: signing key is not set yet
      - url: /postings/{id}
        type: PUT
        params:
          - type: String
            name: id
            description: ID of the posting
        in:
          struct: PostingText
        out:
          struct: PostingInfo
        auth: configurable
        description: >
          Update the posting, creating a new revision of it. The text is processed just like in the <code>POST</code>
          request.
        errors:
          - code: posting.not-found
            description: there is no posting with the given ID
          - code: posting.node-name-not-set
            description: node name is not set yet
          - code: posting.signing-key-not-set
            description: signing key is not set yet
      - url: /postings/{id}
        type: GET
        params:
          - type: String
            name: id
            description: ID of the posting
          - type: String
            name: include
            description: >
              Comma-separated list of additional blocks of information that are needed. The values are:
              <ul>
                <li><code>source</code> - source text of the posting.
              </ul>
        out:
          struct: PostingInfo
        description: Get an individual posting.
        errors:
          - code: posting.not-found
            description: there is no posting with the given ID
      - url: /postings/{id}
        type: DELETE
        params:
          - type: String
            name: id
            description: ID of the posting
        out:
          struct: Result
        auth: configurable
        description: >
          Delete the posting. The posting may not be purged from the database immediately, but preserved for some period
          of time to give a chance to restore it.
        errors:
          - code: posting.not-found
            description: there is no posting with the given ID
      - url: /postings/features
        type: GET
        out:
          struct: PostingFeatures
        description: Get information about supported features of postings.
  - name: Posting Revisions object
    description: All revisions of the posting.
    requests:
      - url: /postings/{postingId}/revisions
        type: GET
        params:
          - type: String
            name: postingId
            description: ID of the posting
        out:
          struct: PostingRevisionInfo
          array: true
        auth: configurable
        description: Get all revisions of the posting.
        errors:
          - code: posting.not-found
            description: there is no posting with the given ID
      - url: /postings/{postingId}/revisions/{id}
        type: GET
        params:
          - type: String
            name: postingId
            description: ID of the posting
          - type: String
            name: id
            description: ID of the revision
        out:
          struct: PostingRevisionInfo
        auth: configurable
        description: Get an individual revision of the posting.
        errors:
          - code: posting.not-found
            description: there is no posting with the given ID
          - code: posting-revision.not-found
            description: there is no revision with the given ID
      - url: /postings/{postingId}/revisions/{id}/restore
        type: POST
        params:
          - type: String
            name: postingId
            description: ID of the posting
          - type: String
            name: id
            description: ID of the revision
        out:
          struct: PostingRevisionInfo
        auth: owner
        description: >
          Restore a revision of the posting. A new revision is created with the same content as in the given revision.
        errors:
          - code: posting.not-found
            description: there is no posting with the given ID
          - code: posting-revision.not-found
            description: there is no revision with the given ID
          - code: posting-revision.already-current
            description: the given revision is already the current one
  - name: Profile object
    description: The profile - the detailed information about the node's owner, node's purpose etc.
    requests:
      - url: /profile
        type: GET
        out:
          struct: ProfileInfo
        auth: none or admin
        description: Get the profile.
      - url: /profile
        type: PUT
        in:
          struct: Profile
        out:
          struct: ProfileInfo
        auth: admin
        description: Update the profile.
  - name: Remote postings object
    description: Postings located on other nodes.
    requests:
      - url: /nodes/{nodeName}/postings/{id}/verify
        type: POST
        params:
          - type: String
            name: nodeName
            description: name of the remote node
          - type: String
            name: id
            description: ID of the posting on the remote node
        out:
          struct: AsyncOperationCreated
        auth: admin
        description: Verify the signature of the given posting.
      - url: /nodes/{nodeName}/postings/{id}/revisions/{revisionId}/verify
        type: POST
        params:
          - type: String
            name: nodeName
            description: name of the remote node
          - type: String
            name: id
            description: ID of the posting on the remote node
          - type: String
            name: revisionId
            description: ID of the posting revision
        out:
          struct: AsyncOperationCreated
        auth: admin
        description: Verify the signature of the given revision of a posting.
  - name: Settings object
    description: >
      Settings - the node and client settings. The node settings affect the node behavior. Only those settings are
      accepted that are known by the node, and their values are validated before saving. The node settings metadata can
      be obtained by request. The client settings are saved without validation and their metadata is built into the
      client. All client settings must have names starting with <code>client.</code> to distinguish them from the node
      ones. By convention, the client name is added to the prefix (<code>client.&lt;client name>.</code>) to be able to
      store settings of several different clients at the same time.
    requests:
      - url: /settings/node
        type: GET
        params:
          - type: String
            name: prefix
            description: filter settings whose names start with the given prefix, case-sensitive
        out:
          struct: SettingInfo
          array: true
        auth: admin
        description: >
          Get all node settings, sorted by name. If a setting has not changed its value from the default, it is omitted.
      - url: /settings/client
        type: GET
        params:
          - type: String
            name: prefix
            description: >
              filter settings whose names start with the given prefix, case-sensitive (<code>client.</code> prefix
              must be included)
        out:
          struct: SettingInfo
          array: true
        auth: admin
        description: Get all client settings, sorted by name.
      - url: /settings/node/metadata
        type: GET
        params:
          - type: String
            name: prefix
            description: filter settings whose names start with the given prefix, case-sensitive
        out:
          struct: SettingMetaInfo
          array: true
        auth: admin
        description: Get all node settings metadata, sorted by name.
      - url: /settings
        type: PUT
        in:
          struct: SettingInfo
          array: true
        out:
          struct: Result
        auth: admin
        description:
          Update the given settings. If the input contains node settings, they are validated and the first validation
          error is returned, if any. The update is always performed as whole - if there is an error saving any one of
          the settings in the input, none of them are updated.
        errors:
          - code: setting.deserialization-failed
            description: setting value deserialization failed
          - code: setting.cannot-convert
            description: cannot convert value to the setting type
          - code: setting.invalid-value
            description: invalid value for the setting
          - code: setting.internal
            description: cannot set value of an internal setting
          - code: setting.unknown
            description: unknown setting
  - name: Timeline object
    description: >
      Timeline - all postings that user is permitted to read. The postings are sorted by
      <a href="/development/protocols/moment.html">moment</a>, descending.
    requests:
      - url: /timeline
        type: GET
        out:
          struct: TimelineInfo
          array: true
        description: Get general information about the timeline.
      - url: /timeline/postings
        type: GET
        params:
          - type: int
            name: before
            description: filter postings posted at or before this moment
          - type: int
            name: after
            description: filter postings posted strongly after this moment
          - type: int
            name: limit
            description: maximum number of postings returned
        out:
          struct: TimelineSliceInfo
        description: >
          Get a slice of the timeline, delimited by <code>before</code> or <code>after</code> moments (but not both) and
          the given <code>limit</code>. If neither <code>before</code> nor <code>after</code> are provided, the latest
          postings are returned. The node may decide to return less postings than the given <code>limit</code>. The
          postings are always sorted by moment, descending.
        errors:
          - code: timeline.before-after-exclusive
            description: <code>before</code> and <code>after</code> parameters are not allowed together
          - code: limit.invalid
            description: <code>limit</code> parameter has an invalid value
  - name: Tokens object
    description: >
      The authentication token. <a href="/overview/authentication.html">Read more</a> about token-base authentication
      in the Overview section.
    requests:
      - url: /tokens/{token}
        type: GET
        params:
          - type: String
            name: token
            description: the token
        out:
          struct: TokenInfo
        description: Get information about the token.
      - url: /tokens
        type: POST
        in:
          struct: Credentials
        out:
          struct: TokenCreated
        description: Sign in and create a token.
        errors:
          - code: credentials.not-created
            description: credentials are not created yet
          - code: credentials.login-incorrect
            description: login or password is incorrect
  - name: Who Am I object
    description: Brief information about the node.
    requests:
      - url: /whoami
        type: GET
        out:
          struct: WhoAmI
        description: Get brief information about the node.

structures:
  - name: AsyncOperationCreated
    fields:
      - type: String
        name: id
        description: ID of the asyncronous operation that was created
  - name: Body
    fields:
      - type: String
        name: subject
        description: plain text
      - type: String
        name: text
        description: HTML
  - name: Choice
    fields:
      - type: String
        name: value
      - type: String
        name: title
        description: user-readable title for the value
  - name: Credentials
    fields:
      - type: String
        name: login
      - type: String
        name: password
    errors:
      - code: credentials.login.blank
        description: the login is empty
      - code: credentials.password.blank
        description: the password is empty
  - name: CredentialsCreated
    fields:
      - type: boolean
        name: created
        description: <code>true</code> if the credentials are initialized already, <code>false</code> otherwise
  - name: DomainInfo
    fields:
      - type: String
        name: name
        description: domain's hostname or <code>_default_</code> for the default domain
      - type: UUID
        name: nodeId
        description: domain's node ID
    errors:
      - code: domainInfo.name.blank
        description: the domain name is empty
      - code: domainInfo.name.wrong-hostname
        description: the domain name is not a valid hostname
      - code: domainInfo.nodeId.wrong-uuid
        description: the node ID is not a valid UUID
  - name: NameToRegister
    fields:
      - type: String
        name: name
    errors:
      - code: nameToRegister.name.blank
        description: the name is empty
      - code: nameToRegister.name.invalid
        description: the name is reserved, too long or contains invalid characters
  - name: PostingFeatures
    fields:
      - type: boolean
        name: subjectPresent
        description: <code>true</code> if new postings are recommended to have a subject, <code>false</code> otherwise
      - struct: Choice
        array: true
        name: sourceFormats
        description: >
          List of source text formats the node understands. The well-known values are:
          <ul>
            <li><code>plain-text</code> - plain text with newlines and paragraphs delimited by empty line;</li>
            <li><code>html</code> - HTML-formatted text, the node may allow only limited set of tags;</li>
            <li><code>markdown</code> - text in Markdown format.</li>
          </ul>
  - name: PostingInfo
    fields:
      - type: String
        name: id
      - type: String
        name: revisionId
        description: ID of the current revision of the posting
      - type: int
        name: totalRevisions
        description: total number of revisions the posting has
      - type: String
        name: receiverName
        description: name of the node where the posting was published
      - type: String
        name: ownerName
        description: node name of the posting's owner
      - type: String
        name: bodyPreview
        description: preview of the posting's body, a string representation of a JSON structure, may be absent
      - type: String
        name: bodySrc
        description: >
          the source text of the posting, a string representation of a JSON structure, may be absent if not requested
      - type: byte[]
        name: bodySrcHash
        description: hash of the source text of the posting
      - type: String
        name: bodySrcFormat
        description: >
          format of the source text of the posting, the list of available formats is returned in
          <a href="#PostingFeatures"><code>PostingFeatures</code></a>
      - type: String
        name: body
        description: body of the posting, a string representation of a JSON structure
      - type: String
        name: bodyFormat
        description: >
          format of the body of the posting, may have any value meaningful for the client, including:
          <ul>
            <li><code>html</code> - <a href="#Body"><code>Body</code></a> structure</li>
          </ul>
      - type: String
        name: heading
        description: heading of the posting
      - type: timestamp
        name: createdAt
        description: posting creation timestamp - the real time when the posting was created
      - type: timestamp
        name: publishedAt
        description: posting publication timestamp - the time the posting is published under at the timeline
      - type: timestamp
        name: editedAt
        description: posting editing timestamp - the last time the posting was updated
      - type: timestamp
        name: deletedAt
        description: posting deletion timestamp - the time when the posting was deleted, may be absent
      - type: int
        name: signatureVersion
        description: signature version (i.e. fingerprint version)
      - type: byte[]
        name: signature
        description: >
          the posting's owner signature (use <a href="node-api-fingerprints#Posting"><code>Posting</code></a>
          fingerprint)
      - type: int
        name: moment
      - type: String -> String[]
        name: operations
        description: list of the supported operations (see below) and the corresponding access hints
    operations:
      - name: edit
        description: edit the posting
      - name: delete
        description: delete the posting
      - name: revisions
        description: view the posting's revisions
  - name: PostingRevisionInfo
    fields:
      - type: String
        name: id
      - type: String
        name: bodyPreview
        description: preview of the revisions's body, a string representation of a JSON structure, may be absent
      - type: byte[]
        name: bodySrcHash
        description: hash of the source text of the revision
      - type: String
        name: bodySrcFormat
        description: >
          format of the source text of the revision, the list of available formats is returned in
          <a href="#PostingFeatures"><code>PostingFeatures</code></a>
      - type: String
        name: body
        description: body of the revision, a string representation of a JSON structure
      - type: String
        name: bodyFormat
        description: >
          format of the body of the revision, see detailed description in
          <a href="#PostingInfo"><code>PostingInfo</code></a><code>.bodyFormat</code>
      - type: String
        name: heading
        description: heading of the revision
      - type: timestamp
        name: createdAt
        description: revision creation timestamp - the real time when the revision was created
      - type: timestamp
        name: publishedAt
        description: revision publication timestamp - the time the revision is published under at the timeline
      - type: timestamp
        name: deletedAt
        description: revision deletion timestamp - the time when the revision was deleted, may be absent
      - type: int
        name: signatureVersion
        description: signature version (i.e. fingerprint version)
      - type: byte[]
        name: signature
        description: >
          the revision's owner signature (use <a href="node-api-fingerprints#Posting"><code>Posting</code></a>
          fingerprint)
      - type: int
        name: moment
  - name: PostingText
    fields:
      - type: String
        name: bodySrc
        description: the source text of the posting, a string representation of a JSON structure
      - type: String
        name: bodySrcFormat
        description: >
          format of the source text of the posting, <code>plain-text</code> by default; the list of available formats is
          returned in <a href="#PostingFeatures"><code>PostingFeatures</code></a>
      - type: String
        name: body
        description: body of the posting, a string representation of a JSON structure, may be absent
      - type: String
        name: bodyFormat
        description: >
          format of the body of the posting, see detailed description in
          <a href="#PostingInfo"><code>PostingInfo</code></a><code>.bodyFormat</code>
      - type: timestamp
        name: publishAt
        description: posting publication timestamp, the current timestamp by default
    errors:
      - code: postingText.bodySrc.blank
        description: body text is empty
      - code: postingText.bodySrc.wrong-size
        description: body text is too long
      - code: postingText.bodySrcFormat.unknown
        description: unknown body text format
      - code: postingText.body.wrong-size
        description: body HTML is too long
  - name: Profile
    fields:
      - type: String
        name: fullName
        description: node owner's full name
      - type: String
        name: gender
        description: node owners's gender
      - type: String
        name: email
        description: node owner's E-mail address
    errors:
      - code: profile.fullName.wrong-size
        description: the full name is too long
      - code: profile.gender.wrong-size
        description: the gender string is too long
      - code: profile.email.wrong-email
        description: the E-mail is not a well-formed E-mail address
  - name: ProfileInfo
    fields:
      - type: String
        name: fullName
        description: node owner's full name
      - type: String
        name: gender
        description: node owners's gender
      - type: String
        name: email
        description: node owner's E-mail address
      - type: String -> String[]
        name: operations
        description: list of the supported operations (see below) and the corresponding access hints
    operations:
      - name: edit
        description: change the profile
  - name: NodeNameInfo
    fields:
      - type: String
        name: name
      - enum: OperationStatus
        name: operationStatus
        description: status of the latest operation with the node name
      - type: timestamp
        name: operationStatusUpdated
        description: the last time the operation status was updated
      - type: String
        name: operationErrorCode
        description: if the operation with the node name was failed, the code of the failure
      - type: String
        name: operationErrorMessage
        description: if the operation with the node name was failed, the human-readable description of the failure
      - type: String -> String[]
        name: operations
        description: list of the supported operations (see below) and the corresponding access hints
    operations:
      - name: manage
        description: any modification of the node name, prolonging it etc.
  - name: RegisteredNameSecret
    fields:
      - type: String
        name: name
      - type: String[]
        name: mnemonic
        description: human-friendly mnemonic of the updating key
      - type: String
        name: secret
        description: base64-encoded secret of the updating key
  - name: RemotePostingVerificationInfo
    fields:
      - type: String
        name: id
        description: asynchronous operation ID
      - type: String
        name: nodeName
      - type: String
        name: postingId
      - type: String
        name: revisionId
      - type: String
        name: status
        description: >
          status of the operation, may be one of:
          <ul>
            <li>
              <code>running</code> - the verification is pending;
            </li>
            <li>
              <code>correct</code> - the signature is correct;
            </li>
            <li>
              <code>incorrect</code> - the signature is incorrect;
            </li>
            <li>
              <code>error</code> - the verification cannot be performed due to an error.
            </li>
          </ul>
      - type: String
        name: errorCode
        description: error code
      - type: String
        name: errorMessage
        description: human-readable error message
  - name: Result
    fields:
      - type: String
        name: errorCode
        description: error code
      - type: String
        name: message
        description: human-readable error message
  - name: SettingInfo
    fields:
      - type: String
        name: name
        description: name of the setting
      - type: String
        name: value
        description: value of the setting
  - name: SettingMetaInfo
    fields:
      - type: String
        name: name
        description: name of the setting
      - type: String
        name: type
        description: >
          type of the setting, may be one of:
          <ul>
            <li>
              <code>bool</code> - boolean, may have value <code>true</code> or <code>false</code>
            </li>
            <li>
              <code>Duration</code> - period of time, an non-negative integer followed by a single character
              designating a measurement unit:
              <ul>
                <li><code>s</code> - seconds;</li>
                <li><code>m</code> - minutes;</li>
                <li><code>h</code> - hours;</li>
                <li><code>d</code> - days.</li>
              </ul>
            </li>
            <li>
              <code>int</code> - integer
            </li>
            <li>
              <code>string</code> - string
            </li>
          </ul>
      - type: String
        name: defaultValue
        description: default value of the setting
      - type: String
        name: title
        description: human-friendly description of the setting
      - struct: SettingTypeModifiers
        name: modifiers
        description: >
          additional modifiers that may help to choose a proper UI component for the setting value and to validate the
          input; meaning of the modifiers depend on the setting type
  - name: SettingTypeModifiers
    fields:
      - type: String
        name: min
        description: (<code>int</code>, <code>Duration</code>) minimal value
      - type: String
        name: max
        description: (<code>int</code>, <code>Duration</code>) maximal value
      - type: boolean
        name: multiline
        description: (<code>string</code>) <code>true</code>, if the value is a multiline text
  - name: TimelineInfo
    fields:
      - type: String -> String[]
        name: operations
        description: list of the supported operations (see below) and the corresponding access hints
    operations:
      - name: add
        description: add postings to the timeline
  - name: TimelineSliceInfo
    fields:
      - type: int
        name: before
        description: the slice contains all postings before this moment, inclusive. May be the far future.
      - type: int
        name: after
        description: the slice contains all postings after this moment, exclusive. May be the far past.
      - struct: PostingInfo
        array: true
        name: postings
        description: the postings
  - name: TokenCreated
    fields:
      - type: String
        name: token
        description: the token
      - type: String[]
        name: permissions
        description: The list of <a href="/overview/permissions.html">permission groups</a> assigned to the token.
  - name: TokenInfo
    fields:
      - type: String
        name: token
        description: the token
      - type: boolean
        name: valid
        description: <code>true</code> if the token is valid, <code>false</code> otherwise.
      - type: String[]
        name: permissions
        description: >
          The list of <a href="/overview/permissions.html">permission groups</a> assigned to the token. See also the
          <a href="#standard-permission-groups">list of standard permission groups</a>.
  - name: WhoAmI
    fields:
      - type: String
        name: nodeName

enums:
  - name: OperationStatus
    description: >
      This enum is used to designate the operation status both by the naming server and by the node.
    values:
      - name: WAITING
        description: operation is waiting to be sent to the naming server
      - name: ADDED
        description: operation was accepted by the naming server
      - name: STARTED
        description: the naming server started to proceed the operation
      - name: SUCCEEDED
        description: operation completed successfully
      - name: FAILED
        description: operation failed
      - name: UNKNOWN
        description: operation status is unknown

http-codes:
  - code: 200
    description: No error.
  - code: 201
    description: Object created successfully. The object location is provided in <code>Location:</code> header.
  - code: 400
    description: Validation of the request body failed.
  - code: 401
    description: Invalid authentication token or root secret.
  - code: 403
    description: Authentication required, but not provided.
  - code: 404
    description: Unrecognized request or object not found.
  - code: 405
    description: Method not allowed.
  - code: 409
    description: Operation failed.
  - code: 500
    description: The node configured incorrectly or a bug in the node software; naming service not available.