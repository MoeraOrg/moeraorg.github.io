objects:
  - name: Credentials object
    description: Credentials used to authenticate the administrator of the node.
    requests:
      - url: /credentials
        type: GET
        out:
          struct: CredentialsCreated
        description: Check whether the credentials are initialized already.
      - url: /credentials
        type: POST
        in:
          struct: Credentials
        out:
          struct: Result
        description: >
          Initialize credentials, if they are not set yet. Note that this operation can be executed without
          authentication, so this should be done as soon as possible after the node installation. Sign in is not allowed
          until the credentials are set.
        errors:
          - code: credentials.already-created
            description: credentials are already created
      - url: /credentials
        type: PUT
        in:
          struct: Credentials
        out:
          struct: Result
        auth: admin
        description: Update credentials.
  - name: Domains object
    description: >
      One instance of Moera node software can serve several virtual nodes. These virtual nodes are called <i>domains</i>
      and distinguished by the hostname passed in the HTTP request. Each virtual node has <i>node ID</i>, it is used in
      the database to designate the data that belongs to a particular node. The hostname is mapped to the node ID when
      the request is processed, using the list of registered domains. If there is no domain with such a name, the
      special <code>_default_</code> domain is used.
    requests:
      - url: /domains
        type: GET
        out:
          struct: DomainInfo
          array: true
        auth: root secret
        description: Get the list of registered domains.
      - url: /domains/{name}
        type: GET
        params:
          - type: String
            name: name
            description: domain name
        out:
          struct: DomainInfo
        auth: root secret
        description: Get information about the domain with the given hostname.
        errors:
          - code: domain.not-found
            description: there is no domain with the given hostname
      - url: /domains
        type: POST
        in:
          struct: DomainInfo
        out:
          struct: DomainInfo
        auth: root secret
        description: >
          Create a new domain with the given hostname. If <code>nodeId</code> is not passed, it is generated
          automatically.
        errors:
          - code: domainInfo.name.blank
            description: the hostname is empty
          - code: domain.already-exists
            description: the domain with the given hostname already exists
      - url: /domains/{name}
        type: PUT
        params:
          - type: String
            name: name
            description: domain hostname
        in:
          struct: DomainInfo
        out:
          struct: DomainInfo
        auth: root secret
        description: >
          Update the domain with the given hostname. If the new hostname is not passed, the old hostname is preserved.
          (Note that you cannot pass a new name for the default hostname, because it cannot be renamed and
          <code>_default_</code> is not a valid hostname. Skip this field if you want to update the default hostname.)
          If <code>nodeId</code> is not passed, it is generated automatically.
        errors:
          - code: domain.not-found
            description: there is no domain with the given hostname
          - code: domain.cannot-rename-default
            description: cannot change the name of the default domain
      - url: /domains/{name}
        type: DELETE
        params:
          - type: String
            name: name
            description: domain name
        out:
          struct: Result
        auth: root secret
        description: >
          Delete the domain with the given hostname. This operation deletes the domain record only, the user's data
          related to the domain is preserved.
        errors:
          - code: domain.not-found
            description: there is no domain with the given hostname
          - code: domain.cannot-delete-default
            description: cannot delete the default domain
  - name: Postings object
    description: All postings.
    requests:
      - url: /postings
        type: POST
        in:
          struct: PostingText
        out:
          struct: PostingInfo
        auth: admin
        description: >
          Create a new posting from the text given, sign it with the signing key and publish it on the timeline.
          The heading and the preview of the posting are created automatically, if needed.
        errors:
          - code: posting.registered-name-not-set
            description: registered name is not set yet
          - code: posting.signing-key-not-set
            description: signing key is not set yet
      - url: /postings/{id}
        type: GET
        params:
          - type: UUID
            name: id
            description: ID of the posting
        out:
          struct: PostingInfo
        description: Get an individual posting.
        errors:
          - code: posting.not-found
            description: there is no posting with the given ID
      - url: /postings/features
        type: GET
        out:
          struct: PostingFeatures
        description: Get information about supported features of postings.
  - name: Profile object
    description: The profile - the detailed information about the node's owner, node's purpose etc.
    requests:
      - url: /profile
        type: GET
        out:
          struct: ProfileInfo
        auth: none or admin
        description: Get the profile.
      - url: /profile
        type: PUT
        in:
          struct: Profile
        out:
          struct: ProfileInfo
        auth: admin
        description: Update the profile.
  - name: Registered Name object
    description: >
      The registered name of the node. <a href="/overview/naming.html">Read more</a> about it in the Overview section.
      Operations with the registered name are performed asynchronously - need to poll the node periodically to get
      the current status of the operation. Only one operation with the registered name may be performed by the node at
      any moment.
    requests:
      - url: /registered-name
        type: GET
        out:
          struct: RegisteredNameInfo
        auth: none or admin
        description: >
          Get the registered name of the node. Admin user receives also the current status of the latest operation with
          the registered name.
      - url: /registered-name
        type: POST
        in:
          struct: NameToRegister
        out:
          struct: RegisteredNameSecret
        auth: admin
        description: >
          Register a new name for the node. The corresponding signing key is generated automatically and stored at
          the node. The updating key is generated and returned in the encoded form and in the form of mnemonic
          (a sequence of English words) that need to be written down and stored securely to be able to perform further
          operations with the name.
        errors:
          - code: naming.operation-pending
            description: another operation with the registered name is pending currently
      - url: /registered-name
        type: PUT
        in:
          struct: RegisteredNameSecret
        out:
          struct: Result
        auth: admin
        description: >
          Update the registered name of the node. May be used to assign an already-registered name to the node
          (the corresponding signing key is generated automatically and stored at the node), or to prolong the name.
          The secret or mnemonic of the updating key must be provided for this operation.
        errors:
          - code: naming.operation-pending
            description: another operation with the registered name is pending currently
          - code: registeredNameSecret.empty
            description: the registered name secret or mnemonic are not provided
          - code: registered-name.name-absent
            description: the registered name/generation is not provided and not known by the node
          - code: registered-name.<naming server error>
            description: >
              various errors returned by naming server
              (<a href="/development/protocols/naming-api.html#error-codes">see the list</a>)
      - url: /registered-name
        type: DELETE
        out:
          struct: Result
        auth: admin
        description: >
          Delete all the information related to the registered name (including the signing key) from the node. The name
          record on the naming server is not touched.
        errors:
          - code: naming.operation-pending
            description: another operation with the registered name is pending currently
  - name: Timeline object
    description: >
      Timeline - all postings that user is permitted to read. The postings are sorted by
      <a href="/development/protocols/moment.html">moment</a>, descending.
    requests:
      - url: /timeline
        type: GET
        out:
          struct: TimelineInfo
          array: true
        description: Get general information about the timeline.
      - url: /timeline/postings
        type: GET
        params:
          - type: int
            name: before
            description: filter postings posted at or before this moment
          - type: int
            name: after
            description: filter postings posted strongly after this moment
          - type: int
            name: limit
            description: maximum number of postings returned
        out:
          struct: TimelineSliceInfo
        description: >
          Get a slice of the timeline, delimited by <code>before</code> or <code>after</code> moments (but not both) and
          the given <code>limit</code>. If neither <code>before</code> nor <code>after</code> are provided, the latest
          postings are returned. The node may decide to return less postings than the given <code>limit</code>. The
          postings are always sorted by moment, descending.
        errors:
          - code: timeline.before-after-exclusive
            description: before and after parameters are not allowed together
  - name: Tokens object
    description: >
      The authentication token. <a href="/overview/authentication.html">Read more</a> about token-base authentication
      in the Overview section.
    requests:
      - url: /tokens/{token}
        type: GET
        params:
          - type: String
            name: token
            description: the token
        out:
          struct: TokenInfo
        description: Get information about the token.
      - url: /tokens
        type: POST
        in:
          struct: Credentials
        out:
          struct: TokenCreated
        description: Sign in and create a token.
        errors:
          - code: credentials.not-created
            description: credentials are not created yet
          - code: credentials.login-incorrect
            description: login or password is incorrect
  - name: Who Am I object
    description: Brief information about the node.
    requests:
      - url: /whoami
        type: GET
        out:
          struct: WhoAmI
        description: Get brief information about the node.

structures:
  - name: Choice
    fields:
      - type: String
        name: value
      - type: String
        name: title
        description: user-readable title for the value
  - name: Credentials
    fields:
      - type: String
        name: login
      - type: String
        name: password
    errors:
      - code: credentials.login.blank
        description: the login is empty
      - code: credentials.password.blank
        description: the password is empty

  - name: CredentialsCreated
    fields:
      - type: boolean
        name: created
        description: <code>true</code> if the credentials are initialized already, <code>false</code> otherwise
  - name: DomainInfo
    fields:
      - type: String
        name: name
        description: domain's hostname or <code>_default_</code> for the default domain
      - type: UUID
        name: nodeId
        description: domain's node ID
    errors:
      - code: domainInfo.name.blank
        description: the domain name is empty
      - code: domainInfo.name.wrong-hostname
        description: the domain name is not a valid hostname
      - code: domainInfo.nodeId.wrong-uuid
        description: the node ID is not a valid UUID
  - name: NameToRegister
    fields:
      - type: String
        name: name
    errors:
      - code: nameToRegister.name.blank
        description: the name is empty
      - code: nameToRegister.name.invalid
        description: the name is reserved, too long or contains invalid characters
  - name: PostingFeatures
    fields:
      - struct: Choice
        array: true
        name: sourceFormats
        description: >
          List of source text formats the node understands. The well-known values are:
          <ul>
            <li><code>plain-text</code> - plain text with newlines and paragraphs delimited by empty line;</li>
            <li><code>html</code> - HTML-formatted text, the node may allow only limited set of tags;</li>
            <li><code>markdown</code> - text in Markdown format.</li>
          </ul>
  - name: PostingInfo
    fields:
      - type: UUID
        name: id
      - type: String
        name: ownerName
        description: registered name of the posting's owner
      - type: int
        name: ownerGeneration
        description: registered name generation of the posting's owner
      - type: String
        name: bodyPreviewHtml
        description: preview of the posting's body (HTML), may be absent
      - type: byte[]
        name: bodySrcHash
        description: hash of the source text of the posting
      - type: String
        name: bodySrcFormat
        description: >
          format of the source text of the posting, the list of available formats is returned in
          <a href="#PostingFeatures"><code>PostingFeatures</code></a>
      - type: String
        name: bodyHtml
        description: body of the posting (HTML)
      - type: String
        name: heading
        description: heading of the posting
      - type: int
        name: created
        description: posting creation timestamp
      - type: byte[]
        name: signature
        description: the posting's owner signature (the fingerprint see below)
      - type: int
        name: moment
        description:
    fingerprint:
      - type: String
        value: <code>ownerName</code>
      - type: int
        value: <code>ownerGeneration</code>
      - type: byte[]
        value: <code>bodySrcHash</code>
      - type: String
        value: <code>bodySrcFormat</code>
      - type: String
        value: <code>bodyHtml</code>
      - type: int
        value: <code>created</code>
  - name: PostingText
    fields:
      - type: String
        name: bodySrc
        description: the source text of the posting
      - type: String
        name: bodySrcFormat
        description: >
          format of the source text of the posting, <code>plain-text</code> by default; the list of available formats is
          returned in <a href="#PostingFeatures"><code>PostingFeatures</code></a>
      - type: String
        name: bodyHtml
        description: body of the posting (HTML), may be absent
      - type: int
        name: created
        description: posting creation timestamp, the current timestamp by default
    errors:
      - code: postingText.bodySrc.blank
        description: body text is empty
      - code: postingText.bodySrc.wrong-size
        description: body text is too long
      - code: postingText.bodySrcFormat.unknown
        description: unknown body text format
      - code: postingText.bodyHtml.wrong-size
        description: body HTML is too long

  - name: Profile
    fields:
      - type: String
        name: fullName
        description: node owner's full name
      - type: String
        name: gender
        description: node owners's gender
      - type: String
        name: email
        description: node owner's E-mail address
    errors:
      - code: profile.fullName.wrong-size
        description: the full name is too long
      - code: profile.gender.wrong-size
        description: the gender string is too long
      - code: profile.email.wrong-email
        description: the E-mail is not a well-formed E-mail address
  - name: ProfileInfo
    fields:
      - type: String
        name: fullName
        description: node owner's full name
      - type: String
        name: gender
        description: node owners's gender
      - type: String
        name: email
        description: node owner's E-mail address
      - type: String -> String[]
        name: operations
        description: list of the supported operations (see below) and the corresponding access hints
    operations:
      - name: edit
        description: change the profile
  - name: RegisteredNameInfo
    fields:
      - type: String
        name: name
      - type: int
        name: generation
      - enum: OperationStatus
        name: operationStatus
        description: status of the latest operation with the registered name
      - type: timestamp
        name: operationStatusUpdated
        description: the last time the operation status was updated
      - type: String
        name: operationErrorCode
        description: if the operation with the registered name was failed, the code of the failure
      - type: String
        name: operationErrorMessage
        description: if the operation with the registered name was failed, the human-readable description of the failure
      - type: String -> String[]
        name: operations
        description: list of the supported operations (see below) and the corresponding access hints
    operations:
      - name: manage
        description: any modification of the registered name, prolonging it etc.
  - name: RegisteredNameSecret
    fields:
      - type: String
        name: name
      - type: int
        name: generation
      - type: String[]
        name: mnemonic
        description: human-friendly mnemonic of the updating key
      - type: String
        name: secret
        description: base64-encoded secret of the updating key
  - name: Result
    fields:
      - type: String
        name: errorCode
        description: error code
      - type: String
        name: message
        description: human-readable error message
  - name: TimelineInfo
    fields:
      - type: String -> String[]
        name: operations
        description: list of the supported operations (see below) and the corresponding access hints
    operations:
      - name: add
        description: add postings to the timeline
  - name: TimelineSliceInfo
    fields:
      - type: int
        name: before
        description: the slice contains all postings before this moment, inclusive. May be the far future.
      - type: int
        name: after
        description: the slice contains all postings after this moment, exclusive. May be the far past.
      - struct: PostingInfo
        array: true
        name: postings
        description: the postings
  - name: TokenCreated
    fields:
      - type: String
        name: token
        description: the token
      - type: String[]
        name: permissions
        description: The list of <a href="/overview/permissions.html">permission groups</a> assigned to the token.
  - name: TokenInfo
    fields:
      - type: String
        name: token
        description: the token
      - type: boolean
        name: valid
        description: <code>true</code> if the token is valid, <code>false</code> otherwise.
      - type: String[]
        name: permissions
        description: >
          The list of <a href="/overview/permissions.html">permission groups</a> assigned to the token. See also the
          <a href="#standard-permission-groups">list of standard permission groups</a>.
  - name: WhoAmI
    fields:
      - type: String
        name: registeredName
      - type: int
        name: registeredNameGeneration

enums:
  - name: OperationStatus
    description: >
      This enum is used to designate the operation status both by the naming server and by the node.
    values:
      - name: WAITING
        description: operation is waiting to be sent to the naming server
      - name: ADDED
        description: operation was accepted by the naming server
      - name: STARTED
        description: the naming server started to proceed the operation
      - name: SUCCEEDED
        description: operation completed successfully
      - name: FAILED
        description: operation failed
      - name: UNKNOWN
        description: operation status is unknown

http-codes:
  - code: 200
    description: No error.
  - code: 400
    description: Validation of the request body failed.
  - code: 401
    description: Invalid authentication token or root secret.
  - code: 403
    description: Authentication required, but not provided.
  - code: 404
    description: Unrecognized request or object not found.
  - code: 409
    description: Operation failed.
  - code: 500
    description: The node configured incorrectly or a bug in the node software; naming service not available.