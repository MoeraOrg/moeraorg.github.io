objects:
  - name: Activity Reactions object
    description: Local registry of all activity in the form of reactions performed by the node.
    requests:
      - url: /activity/reactions/search
        type: GET
        in:
          struct: ActivityReactionFilter
        out:
          struct: ActivityReactionInfo
          array: true
        auth: admin
        description: Get the list of all reactions performed by the node, filtered by some criteria.
  - name: Asyncronous Operations object
    description: Asyncronous operations pending or just finished on the node.
    requests:
      - url: /async-operations/remote-posting-verification/{id}
        type: GET
        params:
          - type: String
            name: id
            description: asynchronous operation ID
        out:
          struct: RemotePostingVerificationInfo
        auth: admin
        description: Get status of the asyncronous operation that performs verification of a remote posting signature.
        errors:
          - code: async-operation.not-found
            description: async operation with the given ID is not found
      - url: /async-operations/remote-reaction-verification/{id}
        type: GET
        params:
          - type: String
            name: id
            description: asynchronous operation ID
        out:
          struct: RemoteReactionVerificationInfo
        auth: admin
        description: >
          Get status of the asyncronous operation that performs verification of the signature of a reaction to a remote
          posting.
        errors:
          - code: async-operation.not-found
            description: async operation with the given ID is not found
  - name: Avatars object
    description: >
      Avatars of the node's owner. The list of avatars is ordered using ordinals that every avatar has.
      <br><br>
      Every avatar has a shape. It is stored and returned solely for client's interpretation. The shape has no meaning
      for the node and does not affect the avatar image stored at the node.
    requests:
      - url: /avatars
        type: GET
        out:
          struct: AvatarInfo
          array: true
        description: Get the list of avatars in the ascending order of their ordinals.
      - url: /avatars
        type: POST
        in:
          struct: AvatarAttributes
        out:
          struct: AvatarInfo
        auth: admin
        description: >
          Create a new avatar from a public media file that exists on the node. New public media file is created for
          the avatar. If avatar's ordinal is not provided in the input, the avatar is assigned an ordinal that is
          greater than ordinals of all existing avatars.
        errors:
          - code: media.storage-error
            description: media file cannot be stored
          - code: avatar.media-unsupported
            description: the type of the source media file is not supported for avatars
      - url: /avatars/{id}
        type: GET
        params:
          - type: String
            name: id
            description: avatar ID
        out:
          struct: AvatarInfo
        description: Get an individual avatar.
        errors:
          - code: avatar.not-found
            description: avatar is not found
      - url: /avatars/{id}
        type: DELETE
        params:
          - type: String
            name: id
            description: avatar ID
        out:
          struct: Result
        auth: admin
        description: Delete an avatar.
        errors:
          - code: avatar.not-found
            description: avatar is not found
      - url: /avatars/reorder
        type: POST
        in:
          struct: AvatarsOrdered
        out:
          struct: AvatarOrdinal
          array: true
        auth: admin
        description: >
          Reorder avatars. Every avatar mentioned in the input is assigned an ordinal in ascending order as they appear
          in the input. Ordinals of avatars not mentioned in the input are not touched.
        errors:
          - code: avatar.not-found
            description: avatar is not found
  - name: Cartes object
    description: >
      <a href="/development/protocols/carte.md">Cartes</a> - cryptographic tokens used for authentication on any node
      besides the home node.
    requests:
      - url: /cartes
        type: GET
        params:
          - type: int
            name: limit
            description: maximum number of cartes returned
        out:
          struct: CarteSet
        auth: admin
        entitled: true
        description: >
          Get a set of cartes that correspond to successive periods of time. The node may decide to return less cartes
          than the given <code>limit</code>.
  - name: Comments object
    description: Comments to a posting.
    requests:
      - url: /postings/{postingId}/comments
        type: GET
        params:
          - type: String
            name: postingId
            description: ID of the posting
          - type: int
            name: before
            description: filter comments posted at or before this moment
          - type: int
            name: after
            description: filter comments posted strongly after this moment
          - type: int
            name: limit
            description: maximum number of comments returned
        out:
          struct: CommentsSliceInfo
        description: >
          Get a slice of the list of comments, delimited by <code>before</code> or <code>after</code> moments (but not
          both) and the given <code>limit</code>. If neither <code>before</code> nor <code>after</code> are provided,
          the latest comments are returned. The node may decide to return less comments than the given
          <code>limit</code>. The stories are always sorted by moment, ascending.
        errors:
          - code: posting.not-found
            description: there is no posting with the given ID
          - code: comments.before-after-exclusive
            description: <code>before</code> and <code>after</code> parameters are not allowed together
          - code: limit.invalid
            description: <code>limit</code> parameter has an invalid value
      - url: /postings/{postingId}/comments
        type: POST
        params:
          - type: String
            name: postingId
            description: ID of the posting
        in:
          struct: CommentText
        out:
          struct: CommentCreated
        auth: owner
        description: >
          Create a comment from the given text and add it to the given posting. The comment owner must authenticate in
          some way. If the comment is not signed, it will be kept for a limited period of time and then erased. If
          authenticated as admin, the comment is signed by the node.
        errors:
          - code: posting.not-found
            description: there is no posting with the given ID
      - url: /postings/{postingId}/comments/{commentId}
        type: GET
        params:
          - type: String
            name: postingId
            description: ID of the posting
          - type: String
            name: commentId
            description: ID of the comment
          - type: String
            name: include
            description: >
              Comma-separated list of additional blocks of information that are needed. The values are:
              <ul>
                <li><code>source</code> - source text of the comment.
              </ul>
        out:
          struct: CommentInfo
        description: Get an individual comment.
        errors:
          - code: comment.not-found
            description: there is no comment with the given ID
          - code: comment.wrong-posting
            description: the comment is not related to the given posting
      - url: /postings/{postingId}/comments/{commentId}
        type: PUT
        params:
          - type: String
            name: postingId
            description: ID of the posting
          - type: String
            name: commentId
            description: ID of the comment
        in:
          struct: CommentText
        out:
          struct: CommentInfo
        auth: owner
        description: >
          Update the comment, creating a new revision of it. The text is processed just like in the <code>POST</code>
          request.
        errors:
          - code: comment.not-found
            description: there is no comment with the given ID
          - code: comment.wrong-posting
            description: the comment is not related to the given posting
      - url: /postings/{postingId}/comments/{commentId}
        type: DELETE
        params:
          - type: String
            name: postingId
            description: ID of the posting
          - type: String
            name: commentId
            description: ID of the comment
        out:
          struct: CommentTotalInfo
        auth: admin or owner
        description: >
          Delete the comment. The comment may not be purged from the database immediately, but preserved for some period
          of time to give a chance to restore it.
        errors:
          - code: comment.not-found
            description: there is no comment with the given ID
          - code: comment.wrong-posting
            description: the comment is not related to the given posting
  - name: Comment Revisions object
    description: All revisions of the comment.
    requests:
      - url: /postings/{postingId}/comments/{commentId}/revisions
        type: GET
        params:
          - type: String
            name: postingId
            description: ID of the posting
          - type: String
            name: commentId
            description: ID of the comment
        out:
          struct: CommentRevisionInfo
          array: true
        auth: configurable
        description: Get all revisions of the comment.
        errors:
          - code: comment.not-found
            description: there is no comment with the given ID
          - code: comment.wrong-posting
            description: the comment is not related to the given posting
      - url: /postings/{postingId}/comments/{commentId}/revisions/{id}
        type: GET
        params:
          - type: String
            name: postingId
            description: ID of the posting
          - type: String
            name: commentId
            description: ID of the comment
          - type: String
            name: id
            description: ID of the revision
        out:
          struct: CommentRevisionInfo
        auth: configurable
        description: Get an individual revision of the comment.
        errors:
          - code: comment.not-found
            description: there is no comment with the given ID
          - code: comment.wrong-posting
            description: the comment is not related to the given posting
          - code: comment-revision.not-found
            description: there is no revision with the given ID
  - name: Comment Reactions object
    description: Reactions ("Likes") - simple textless answers to a comment.
    requests:
      - url: /postings/{postingId}/comments/{commentId}/reactions
        type: POST
        params:
          - type: String
            name: postingId
            description: ID of the posting
          - type: String
            name: commentId
            description: ID of the comment
        in:
          struct: ReactionDescription
        out:
          struct: ReactionCreated
        auth: owner
        description: >
          Add a reaction to the given comment. The reaction owner must authenticate in some way. Only one reaction is
          allowed from each owner to a particular comment. If a reaction from the same owner to this comment already
          exists, it is overwritten. If the reaction is not signed, the reaction will be kept for a limited period of
          time and then erased (the previous reaction of the same owner will be restored, if any).
        errors:
          - code: comment.not-found
            description: there is no comment with the given ID
          - code: comment.wrong-posting
            description: the comment is not related to the given posting
          - code: comment.not-signed
            description: cannot add a reaction to an unsigned comment
          - code: reaction.not-accepted
            description: the reaction is not acceptable
      - url: /postings/{postingId}/comments/{commentId}/reactions
        type: GET
        params:
          - type: String
            name: postingId
            description: ID of the posting
          - type: String
            name: commentId
            description: ID of the comment
          - type: boolean
            name: negative
            description: <code>true</code>, to filter negative reactions, <code>false</code>, to filter positive ones
          - type: int
            name: emoji
            description: filter by reaction code, usually interpreted by clients as emoji code point
          - type: int
            name: before
            description: filter reactions created at or before this moment
          - type: int
            name: limit
            description: maximum number of reactions returned
        out:
          struct: ReactionsSliceInfo
        description: >
          Get a slice of the list of reactions to the given comment, optionally filtered by reaction type, delimited by
          <code>before</code> moment and the given <code>limit</code>. If <code>before</code> is not provided,
          the latest reactions are returned. The node may decide to return less reactions than the given
          <code>limit</code>. The reactions are always sorted by moment, descending.
        errors:
          - code: comment.not-found
            description: there is no comment with the given ID
          - code: comment.wrong-posting
            description: the comment is not related to the given posting
          - code: limit.invalid
            description: <code>limit</code> parameter has an invalid value
      - url: /postings/{postingId}/comments/{commentId}/reactions/{ownerName}
        type: GET
        params:
          - type: String
            name: postingId
            description: ID of the posting
          - type: String
            name: commentId
            description: ID of the comment
          - type: String
            name: ownerName
            description: reaction owner node name
        out:
          struct: ReactionInfo
        description: >
          Get the detailed information about the reaction of the given owner to the given comment. If no reaction with
          such owner exist, an empty structure with just <code>commentId</code> is returned.
        errors:
          - code: comment.not-found
            description: there is no comment with the given ID
          - code: comment.wrong-posting
            description: the comment is not related to the given posting
      - url: /postings/{postingId}/comments/{commentId}/reactions
        type: DELETE
        params:
          - type: String
            name: postingId
            description: ID of the posting
          - type: String
            name: commentId
            description: ID of the comment
        out:
          struct: Result
        auth: admin
        description: Delete all reactions to the given comment.
        errors:
          - code: comment.not-found
            description: there is no comment with the given ID
          - code: comment.wrong-posting
            description: the comment is not related to the given posting
      - url: /postings/{postingId}/comments/{commentId}/reactions/{ownerName}
        type: DELETE
        params:
          - type: String
            name: postingId
            description: ID of the posting
          - type: String
            name: commentId
            description: ID of the comment
          - type: String
            name: ownerName
            description: reaction owner node name
        out:
          struct: ReactionTotalsInfo
        auth: admin or owner
        description: Delete the reaction of the given owner to the given comment.
        errors:
          - code: comment.not-found
            description: there is no comment with the given ID
          - code: comment.wrong-posting
            description: the comment is not related to the given posting
  - name: Comment Reaction Totals object
    description: Summary of reactions to a comment.
    requests:
      - url: /postings/{postingId}/comments/{commentId}/reaction-totals
        type: GET
        params:
          - type: String
            name: postingId
            description: ID of the posting
          - type: String
            name: commentId
            description: ID of the comment
        out:
          struct: ReactionTotalsInfo
        description: Get summary of reactions to the comment given.
        errors:
          - code: comment.not-found
            description: there is no comment with the given ID
          - code: comment.wrong-posting
            description: the comment is not related to the given posting
  - name: Contacts object
    description: Information about all nodes having a relationship with the node.
    requests:
      - url: /people/contacts
        type: GET
        params:
          - type: String
            name: query
            description: the search query
          - type: int
            name: limit
            description: maximum number of contacts returned
        out:
          struct: ContactInfo
          array: true
        description: >
          Search for contacts matching the search <code>query</code>. Every space-delimited word in the query must
          case-insensitively match a beginning of the contact's node name or a beginning of any space-delimited word in
          the contact's full name. The order of words is not significant.
          <br><br>
          The node may decide to return less contacts than the given <code>limit</code>.
          <br><br>
          The contacts are sorted by their <i>closeness</i> to the node, which is calculated from the number of
          reactions and comments and their age.
        errors:
          - code: limit.invalid
            description: <code>limit</code> parameter has an invalid value
  - name: Credentials object
    description: Credentials used to authenticate the administrator of the node.
    requests:
      - url: /credentials
        type: GET
        out:
          struct: CredentialsCreated
        description: Check whether the credentials are initialized already.
      - url: /credentials
        type: POST
        in:
          struct: Credentials
        out:
          struct: Result
        description: >
          Initialize credentials, if they are not set yet. Note that this operation can be executed without
          authentication, so this should be done as soon as possible after the node installation. Sign in is not allowed
          until the credentials are set.
        errors:
          - code: credentials.already-created
            description: credentials are already created
      - url: /credentials
        type: PUT
        in:
          struct: CredentialsChange
        out:
          struct: Result
        description: >
          Update credentials. Either old password or credentials reset token should be set in the input for the
          operation to succeed. Credentials reset token is not related to the authentication token and usually is
          sent to the user by E-mail.
        errors:
          - code: credentials.login-incorrect
            description: login incorrect (the old password is wrong)
          - code: credentials.wrong-reset-token
            description: credentials reset token is wrong
          - code: credentials.reset-token-expired
            description: credentials reset token is expired
      - url: /credentials
        type: DELETE
        out:
          struct: Result
        auth: root secret
        description: Delete credentials.
      - url: /credentials/reset
        type: POST
        out:
          struct: EmailHint
        description: >
          The node generates credentials reset token that is sent to the node admin by E-mail or using any other way
          that is defined for credentials recovery. This token then may be used to change the credentials without
          knowing the password.
        errors:
          - code: credentials.email-not-set
            description: E-mail address is not set for the node
  - name: Deleted Postings object
    description: >
      All deleted postings, that are not purged from the database yet.
    requests:
      - url: /deleted-postings
        type: GET
        params:
          - type: int
            name: page
            description: page number, 0 by default
          - type: int
            name: limit
            description: page size (maximum number of postings returned), the default is defined by the node
        out:
          struct: PostingInfo
          array: true
        auth: admin
        description: >
          Get the list of deleted postings, page by page. The node may decide to use smaller page size than the given
          <code>limit</code>. The postings are always sorted by the deletion timestamp, descending.
        errors:
          - code: page.invalid
            description: <code>page</code> parameter has an invalid value
          - code: limit.invalid
            description: <code>limit</code> parameter has an invalid value
      - url: /deleted-postings/{id}
        type: GET
        params:
          - type: String
            name: id
            description: ID of the posting
        out:
          struct: PostingInfo
        auth: admin
        description: Get an individual deleted posting.
        errors:
          - code: posting.not-found
            description: there is no deleted posting with the given ID
      - url: /deleted-postings/{id}/restore
        type: POST
        params:
          - type: String
            name: id
            description: ID of the posting
        out:
          struct: PostingInfo
        auth: admin
        entitled: true
        description: >
          Restore a posting. A new revision is created with the same content as in the latest revision.
        errors:
          - code: posting.not-found
            description: there is no posting with the given ID
  - name: Deleted Posting Revisions object
    description: >
      All revisions of the deleted posting. This object supports the same requests as
      <a href="#Posting%20Revisions%20object">Posting Revisions object</a>, but uses <code>/deleted-postings</code>
      prefix instead of <code>/postings</code>.
  - name: Domains object
    description: >
      One instance of Moera node software can serve several virtual nodes. These virtual nodes are called <i>domains</i>
      and distinguished by the hostname passed in the HTTP request. Each virtual node has <i>node ID</i>, it is used in
      the database to designate the data that belongs to a particular node. The hostname is mapped to the node ID when
      the request is processed, using the list of registered domains. If there is no domain with such a name, the
      special <code>_default_</code> domain is used.
    requests:
      - url: /domains
        type: GET
        out:
          struct: DomainInfo
          array: true
        auth: root secret
        description: Get the list of registered domains.
      - url: /domains/{name}
        type: GET
        params:
          - type: String
            name: name
            description: domain name
        out:
          struct: DomainInfo
        auth: root secret or none
        description: >
          Get information about the domain with the given hostname. If domain registration for this server is public,
          this request does not require authentication.
        errors:
          - code: domain.not-found
            description: there is no domain with the given hostname
      - url: /domains
        type: POST
        in:
          struct: DomainAttributes
        out:
          struct: DomainInfo
        auth: root secret or none
        description: >
          Create a new domain with the given hostname. If <code>nodeId</code> is not passed, it is generated
          automatically. If domain registration for this server is public, this request does not require authentication.
        errors:
          - code: domain.already-exists
            description: a domain with the given hostname already exists
          - code: domain.node-id-used
            description: a domain with the given node ID already exists
      - url: /domains/{name}
        type: PUT
        params:
          - type: String
            name: name
            description: domain's hostname
        in:
          struct: DomainAttributes
        out:
          struct: DomainInfo
        auth: root secret
        description: >
          Update the domain with the given hostname. If the new hostname is not passed, the old hostname is preserved.
          (Note that you cannot pass a new name for the default hostname, because it cannot be renamed and
          <code>_default_</code> is not a valid hostname. Skip this field if you want to update the default hostname.)
          If <code>nodeId</code> is not passed, it is generated automatically.
        errors:
          - code: domain.not-found
            description: there is no domain with the given hostname
          - code: domain.cannot-rename-default
            description: cannot change the name of the default domain
      - url: /domains/{name}
        type: DELETE
        params:
          - type: String
            name: name
            description: domain name
        out:
          struct: Result
        auth: root secret
        description: >
          Delete the domain with the given hostname. This operation deletes the domain record only, the user's data
          related to the domain is preserved.
        errors:
          - code: domain.not-found
            description: there is no domain with the given hostname
          - code: domain.cannot-delete-default
            description: cannot delete the default domain
      - url: /domains/available
        type: GET
        params:
          - type: String
            name: nodeName
            description: node name
        out:
          struct: DomainAvailable
        description: >
          Get an available domain name that is recommended for the given node name. The domain name is usually chosen to
          be close to the node name in English transcription. If domain registration for this server is not public, this
          request is not accessible.
  - name: Drafts object
    description: >
      All drafts. This is an universal interface for managing all types for drafts to all types of entries. Drafts of
      entries located on remote nodes are all stored on the home node.
    requests:
      - url: /drafts
        type: GET
        params:
          - type: String
            name: draftType
            description: >
              type of the drafts, mandatory (see <code><a href="#DraftInfo">DraftInfo</a>.draftType</code> for the list
              of possible values)
          - type: String
            name: nodeName
            description: name of the node the drafts are related to, mandatory
          - type: String
            name: postingId
            description: ID of the posting, mandatory for all types, except <code>new-posting</code>
          - type: String
            name: commentId
            description: ID of the comment, mandatory for <code>comment-update</code> type
          - type: int
            name: page
            description: page number, 0 by default
          - type: int
            name: limit
            description: page size (maximum number of postings returned), the default is defined by the node
        out:
          struct: DraftInfo
          array: true
        auth: admin
        description: >
          Get the list of drafts, page by page, filtered by the given criteria. The node may decide to use smaller page
          size than the given <code>limit</code>. The drafts are always sorted by the creation timestamp, descending.
        errors:
          - code: page.invalid
            description: <code>page</code> parameter has an invalid value
          - code: limit.invalid
            description: <code>limit</code> parameter has an invalid value
      - url: /drafts
        type: POST
        in:
          struct: DraftText
        out:
          struct: DraftInfo
        auth: admin
        entitled: true
        description: Create a new draft from the text given.
      - url: /drafts/{id}
        type: GET
        params:
          - type: String
            name: id
            description: ID of the draft
        out:
          struct: DraftInfo
        auth: admin
        description: Get an individual draft.
        errors:
          - code: draft.not-found
            description: there is no draft with the given ID
      - url: /drafts/{id}
        type: PUT
        params:
          - type: String
            name: id
            description: ID of the draft
        in:
          struct: DraftText
        out:
          struct: DraftInfo
        auth: admin
        entitled: true
        description: Update the draft.
        errors:
          - code: draft.not-found
            description: there is no draft with the given ID
      - url: /draft/{id}
        type: DELETE
        params:
          - type: String
            name: id
            description: ID of the draft
        out:
          struct: Result
        auth: admin
        description: >
          Delete the draft.
        errors:
          - code: draft.not-found
            description: there is no draft with the given ID
  - name: Feeds object
    description: >
      Feed is a set of stories collected for some purpose. The stories are sorted by
      <a href="/development/protocols/moment.html">moment</a>, descending.
      </p><p>
      These are the standard feeds that have special meaning:
      <ul>
      <li><code>timeline</code> - the main feed of publications;</li>
      <li><code>instant</code> - the feed of instant notifications;</li>
      <li><code>news</code> - the main feed of publications gathered from other nodes.</li>
      </ul>
    requests:
      - url: /feeds
        type: GET
        out:
          struct: FeedInfo
          array: true
        description: Get general information about all feeds accessible by client.
      - url: /feeds/{feedName}
        type: GET
        params:
          - type: String
            name: feedName
            description: name of the feed
        out:
          struct: FeedInfo
        description: Get general information about the feed.
        errors:
          - code: feed.not-found
            description: there is no accessible feed with this name
      - url: /feeds/{feedName}/status
        type: GET
        params:
          - type: String
            name: feedName
            description: name of the feed
        out:
          struct: FeedStatus
        auth: admin or none
        description: Get information about total number and number of non-read and non-viewed stories in the feed.
        errors:
          - code: feed.not-found
            description: there is no accessible feed with this name
      - url: /feeds/{feedName}/status
        type: PUT
        params:
          - type: String
            name: feedName
            description: name of the feed
        in:
          struct: FeedStatusChange
        out:
          struct: FeedStatus
        auth: admin
        description: Update information about non-read and non-viewed stories in the feed.
        errors:
          - code: feed.not-found
            description: there is no accessible feed with this name
      - url: /feeds/{feedName}/stories
        type: GET
        params:
          - type: String
            name: feedName
            description: name of the feed
          - type: int
            name: before
            description: filter stories posted at or before this moment
          - type: int
            name: after
            description: filter stories posted strongly after this moment
          - type: int
            name: limit
            description: maximum number of stories returned
        out:
          struct: FeedSliceInfo
        description: >
          Get a slice of the feed, delimited by <code>before</code> or <code>after</code> moments (but not both) and
          the given <code>limit</code>. If neither <code>before</code> nor <code>after</code> are provided, the latest
          stories are returned. The node may decide to return less stories than the given <code>limit</code>. The
          stories are always sorted by moment, descending.
        errors:
          - code: feed.not-found
            description: there is no accessible feed with this name
          - code: feed.before-after-exclusive
            description: <code>before</code> and <code>after</code> parameters are not allowed together
          - code: limit.invalid
            description: <code>limit</code> parameter has an invalid value
  - name: Media object (private)
    description: >
      Media files that are bound to a particular uploader and may be inaccessible to other clients. Private media files
      cannot be retrieved by their hash, only by their ID. The ID is unique to the client that uploaded the file and
      the node the file was uploaded to. A private media file may have a linked posting - it is used to store the media
      file description, reactions and comments. The linked posting is accessed as any other posting.
    requests:
      - url: /media/private
        type: POST
        out:
          struct: PrivateMediaFileInfo
        auth: owner
        description: >
          Upload a new media file. Content of the file is passed in the request body
        errors:
          - code: media.image-invalid
            description: media file is not a readable image
          - code: media.wrong-size
            description: media file is too large
          - code: media.storage-error
            description: media file cannot be stored
      - url: /media/private/{id}/data
        type: GET
        params:
          - type: String
            name: id
            description: media file ID
        description: >
          Get media file content (returned in the response body).
        errors:
          - code: media.not-found
            description: media file is not found
      - url: /media/private/{id}/info
        type: GET
        params:
          - type: String
            name: id
            description: media file ID
        out:
          struct: PrivateMediaFileInfo
        description: >
          Get media file details.
        errors:
          - code: media.not-found
            description: media file is not found
  - name: Media object (public)
    description: >
      Media files that should be accessible to any client. ID of a public media file is SHA-1 hash of its content.
    requests:
      - url: /media/public
        type: POST
        out:
          struct: PublicMediaFileInfo
        auth: owner
        description: >
          Upload a new media file. Content of the file is passed in the request body
        errors:
          - code: media.image-invalid
            description: media file is not a readable image
          - code: media.wrong-size
            description: media file is too large
          - code: media.storage-error
            description: media file cannot be stored
      - url: /media/public/{id}/data
        type: GET
        params:
          - type: String
            name: id
            description: media file ID
        description: >
          Get media file content (returned in the response body).
        errors:
          - code: media.not-found
            description: media file is not found
      - url: /media/public/{id}/info
        type: GET
        params:
          - type: String
            name: id
            description: media file ID
        out:
          struct: PublicMediaFileInfo
        description: >
          Get media file details.
        errors:
          - code: media.not-found
            description: media file is not found
  - name: Node Name object
    description: >
      The name of the node. <a href="/overview/naming.html">Read more</a> about it in the Overview section.
      Operations with the node name are performed asynchronously - need to poll the node periodically to get
      the current status of the operation. Only one operation with the node name may be performed by the node at
      any moment.
    requests:
      - url: /node-name
        type: GET
        out:
          struct: NodeNameInfo
        description: >
          Get the name of the node. Admin user receives also the current status of the latest operation with
          the node name.
      - url: /node-name
        type: POST
        in:
          struct: NameToRegister
        out:
          struct: RegisteredNameSecret
        auth: admin
        description: >
          Register a new name for the node. The corresponding signing key is generated automatically and stored at
          the node. The updating key is generated and returned in the encoded form and in the form of mnemonic
          (a sequence of English words) that need to be written down and stored securely to be able to perform further
          operations with the name.
        errors:
          - code: naming.operation-pending
            description: another operation with the node name is pending currently
      - url: /node-name
        type: PUT
        in:
          struct: RegisteredNameSecret
        out:
          struct: Result
        auth: admin
        description: >
          Update the name of the node. May be used to assign an already-registered name to the node (the corresponding
          signing key is generated automatically and stored at the node), or to prolong the name. The secret or
          mnemonic of the updating key must be provided for this operation.
        errors:
          - code: naming.operation-pending
            description: another operation with the node name is pending currently
          - code: registeredNameSecret.empty
            description: the registered name secret or mnemonic are not provided
          - code: node-name.name-absent
            description: the node name is not provided and not known by the node
          - code: node-name.<naming server error>
            description: >
              various errors returned by naming server
              (<a href="/development/protocols/naming-api.html#error-codes">see the list</a>)
      - url: /node-name
        type: DELETE
        out:
          struct: Result
        auth: admin
        description: >
          Delete all the information related to the node name (including the signing key) from the node. The name
          record on the naming server is not touched.
        errors:
          - code: naming.operation-pending
            description: another operation with the node name is pending currently
  - name: Notifications object
    description: Receiver of notifications from other nodes.
    requests:
      - url: /notifications
        type: POST
        in:
          struct: NotificationPacket
        out:
          struct: Result
        description: >
          Accept a notification packet from other node. Notification packets older than 10 minutes are ignored.
          The sending node should update the packet timestamp and the signature and send the packet again.
          This mechanism prevents attackers from recording and resending old signed packets.
  - name: People object
    description: Information related to other nodes.
    requests:
      - url: /people
        type: GET
        out:
          struct: PeopleGeneralInfo
        description: Get general information about other nodes.
  - name: Postings object
    description: >
      All postings. Each posting may contain one or more revisions, a new revision is created every time the posting is
      updated. The latest revision is the current one, the previous ones are marked as deleted.
    requests:
      - url: /postings
        type: POST
        in:
          struct: PostingText
        out:
          struct: PostingInfo
        auth: owner
        entitled: true
        description: >
          Create a new posting from the text given and publish it in the given feeds (if any). The heading and
          the preview of the posting are created automatically, if needed. The posting owner must authenticate in
          some way. If the posting is not signed, it will be kept for a limited period of time and then erased. If
          authenticated as admin, the posting is signed by the node.
      - url: /postings/{id}
        type: PUT
        params:
          - type: String
            name: id
            description: ID of the posting
        in:
          struct: PostingText
        out:
          struct: PostingInfo
        auth: configurable
        entitled: true
        description: >
          Update the posting, creating a new revision of it. The text is processed just like in the <code>POST</code>
          request.
        errors:
          - code: posting.not-found
            description: there is no posting with the given ID
          - code: posting.not-original
            description: updating a non-original posting is not allowed
      - url: /postings/{id}
        type: GET
        params:
          - type: String
            name: id
            description: ID of the posting
          - type: String
            name: include
            description: >
              Comma-separated list of additional blocks of information that are needed. The values are:
              <ul>
                <li><code>source</code> - source text of the posting.
              </ul>
        out:
          struct: PostingInfo
        description: Get an individual posting.
        errors:
          - code: posting.not-found
            description: there is no posting with the given ID
      - url: /postings/{id}
        type: DELETE
        params:
          - type: String
            name: id
            description: ID of the posting
        out:
          struct: Result
        auth: configurable
        description: >
          Delete the posting. The posting may not be purged from the database immediately, but preserved for some period
          of time to give a chance to restore it.
        errors:
          - code: posting.not-found
            description: there is no posting with the given ID
      - url: /postings/features
        type: GET
        out:
          struct: PostingFeatures
        description: Get information about supported features of postings.
  - name: Posting Revisions object
    description: All revisions of the posting.
    requests:
      - url: /postings/{postingId}/revisions
        type: GET
        params:
          - type: String
            name: postingId
            description: ID of the posting
          - type: int
            name: limit
            description: maximum number of revisions returned
        out:
          struct: PostingRevisionInfo
          array: true
        auth: configurable
        description: >
          Get all revisions of the posting, but not more than <code>limit</code>. The node may decide to return less
          revisions than the given <code>limit</code>.
        errors:
          - code: posting.not-found
            description: there is no posting with the given ID
      - url: /postings/{postingId}/revisions/{id}
        type: GET
        params:
          - type: String
            name: postingId
            description: ID of the posting
          - type: String
            name: id
            description: ID of the revision
        out:
          struct: PostingRevisionInfo
        auth: configurable
        description: Get an individual revision of the posting.
        errors:
          - code: posting.not-found
            description: there is no posting with the given ID
          - code: posting-revision.not-found
            description: there is no revision with the given ID
      - url: /postings/{postingId}/revisions/{id}/restore
        type: POST
        params:
          - type: String
            name: postingId
            description: ID of the posting
          - type: String
            name: id
            description: ID of the revision
        out:
          struct: PostingRevisionInfo
        auth: owner
        entitled: true
        description: >
          Restore a revision of the posting. A new revision is created with the same content as in the given revision.
        errors:
          - code: posting.not-found
            description: there is no posting with the given ID
          - code: posting-revision.not-found
            description: there is no revision with the given ID
          - code: posting-revision.already-current
            description: the given revision is already the current one
  - name: Posting Reactions object
    description: Reactions ("Likes") - simple textless answers to a posting.
    requests:
      - url: /postings/{postingId}/reactions
        type: POST
        params:
          - type: String
            name: postingId
            description: ID of the posting
        in:
          struct: ReactionDescription
        out:
          struct: ReactionCreated
        auth: owner
        description: >
          Add a reaction to the given posting. The reaction owner must authenticate in some way. Only one reaction is
          allowed from each owner to a particular posting. If a reaction from the same owner to this posting already
          exists, it is overwritten. If the reaction is not signed, the reaction will be kept for a limited period of
          time and then erased (the previous reaction of the same owner will be restored, if any).
        errors:
          - code: posting.not-found
            description: there is no posting with the given ID
          - code: reaction.not-accepted
            description: the reaction is not acceptable
      - url: /postings/{postingId}/reactions
        type: GET
        params:
          - type: String
            name: postingId
            description: ID of the posting
          - type: boolean
            name: negative
            description: <code>true</code>, to filter negative reactions, <code>false</code>, to filter positive ones
          - type: int
            name: emoji
            description: filter by reaction code, usually interpreted by clients as emoji code point
          - type: int
            name: before
            description: filter reactions created at or before this moment
          - type: int
            name: limit
            description: maximum number of reactions returned
        out:
          struct: ReactionsSliceInfo
        description: >
          Get a slice of the list of reactions to the given posting, optionally filtered by reaction type, delimited by
          <code>before</code> moment and the given <code>limit</code>. If <code>before</code> is not provided,
          the latest reactions are returned. The node may decide to return less reactions than the given
          <code>limit</code>. The reactions are always sorted by moment, descending.
        errors:
          - code: posting.not-found
            description: there is no posting with the given ID
          - code: limit.invalid
            description: <code>limit</code> parameter has an invalid value
      - url: /postings/{postingId}/reactions/{ownerName}
        type: GET
        params:
          - type: String
            name: postingId
            description: ID of the posting
          - type: String
            name: ownerName
            description: reaction owner node name
        out:
          struct: ReactionInfo
        description: >
          Get the detailed information about the reaction of the given owner to the given posting. If no reaction with
          such owner exist, an empty structure with just <code>postingId</code> is returned.
        errors:
          - code: posting.not-found
            description: there is no posting with the given ID
      - url: /postings/{postingId}/reactions
        type: DELETE
        params:
          - type: String
            name: postingId
            description: ID of the posting
        out:
          struct: Result
        auth: admin
        description: Delete all reactions to the given posting.
        errors:
          - code: posting.not-found
            description: there is no posting with the given ID
      - url: /postings/{postingId}/reactions/{ownerName}
        type: DELETE
        params:
          - type: String
            name: postingId
            description: ID of the posting
          - type: String
            name: ownerName
            description: reaction owner node name
        out:
          struct: ReactionTotalsInfo
        auth: admin or owner
        description: Delete the reaction of the given owner to the given posting.
        errors:
          - code: posting.not-found
            description: there is no posting with the given ID
  - name: Posting Reaction Totals object
    description: Summary of reactions to a posting.
    requests:
      - url: /postings/{postingId}/reaction-totals
        type: GET
        params:
          - type: String
            name: postingId
            description: ID of the posting
        out:
          struct: ReactionTotalsInfo
        description: Get summary of reactions to the posting given.
        errors:
          - code: posting.not-found
            description: there is no posting with the given ID
  - name: Profile object
    description: The profile - the detailed information about the node's owner, node's purpose etc.
    requests:
      - url: /profile
        type: GET
        params:
          - type: String
            name: include
            description: >
              Comma-separated list of additional blocks of information that are needed. The values are:
              <ul>
                <li><code>source</code> - source text of the bio.
              </ul>
        out:
          struct: ProfileInfo
        description: Get the profile.
      - url: /profile
        type: PUT
        in:
          struct: ProfileAttributes
        out:
          struct: ProfileInfo
        auth: admin
        description: Update the profile.
  - name: Push Notifications object
    description: >
      SSE channels for delivering push notifications from the home node. When a client opens an SSE connection for
      the first time, an individual push notifications channel for this client is created (every client must generate
      a unique random identifier for its channel). After that, push notifications are stacked for this channel and
      the client should poll the channel periodically (or keep it open constantly) to receive them. If the client
      does not poll the channel for a long time, the channel is deleted.
    requests:
      - url: /push/{clientId}
        type: GET
        params:
          - type: String
            name: clientId
            description: ID of the client
          - type: int
            name: after
            description: >
              moment of the last notification already received by the client (<code>Last-Event-ID</code> header may be
              used instead of this parameter)
        out:
          struct: PushContent
          array: true
        auth: admin
        description: >
          Open the push notifications channel for the connected client or create a new one, if it does not exist. This
          request returns a live SSE stream, where <i>events</i> are notifications in a form of JSON-encoded
          <a href="#PushContent"><code>PushContent</code></a> structures and <i>event IDs</i> are the moments, when
          these notifications were generated. When the channel is opened, the node discards all notifications up to
          <code>after</code> (if provided) and delivers the rest of notifications till the current moment. After that,
          the notifications are delivered in real time until the channel is closed. If a client with the same
          <code>clientId</code> opens a channel from another device, this channel is automatically closed by the node.
        errors:
          - code: push.clientId.blank
            description: client ID is not set
          - code: push.clientId.wrong-size
            description: client ID is too long
          - code: push.too-many-clients
            description: too many push clients
      - url: /push/{clientId}
        type: DELETE
        params:
          - type: String
            name: clientId
            description: ID of the client
        out:
          struct: Result
        auth: admin
        description: Delete the channel with all notifications in it.
        errors:
          - code: push.not-found
            description: push client is not found
  - name: Remote Comments object
    description: Comments to postings located on other nodes.
    requests:
      - url: /nodes/{nodeName}/postings/{postingId}/comments
        type: POST
        params:
          - type: String
            name: nodeName
            description: name of the remote node
          - type: String
            name: postingId
            description: ID of the posting on the remote node
        in:
          struct: CommentSourceText
        out:
          struct: Result
        auth: admin
        entitled: true
        description: Add a comment to the posting on the remote node and register it in the registry at the local node.
      - url: /nodes/{nodeName}/postings/{postingId}/comments/{commentId}
        type: PUT
        params:
          - type: String
            name: nodeName
            description: name of the remote node
          - type: String
            name: postingId
            description: ID of the posting on the remote node
          - type: String
            name: commentId
            description: ID of the comment on the remote node
        in:
          struct: CommentSourceText
        out:
          struct: Result
        auth: admin
        entitled: true
        description: Update a comment to the posting on the remote node.
      - url: /nodes/{nodeName}/postings/{postingId}/comments/{commentId}
        type: DELETE
        params:
          - type: String
            name: nodeName
            description: name of the remote node
          - type: String
            name: postingId
            description: ID of the posting on the remote node
          - type: String
            name: commentId
            description: ID of the comment on the remote node
        out:
          struct: Result
        auth: admin
        description: Delete a comment from the registry of all comments at the local node.
      - url: /nodes/{nodeName}/postings/{postingId}/comments/{commentId}/verify
        type: POST
        params:
          - type: String
            name: nodeName
            description: name of the remote node
          - type: String
            name: postingId
            description: ID of the posting on the remote node
          - type: String
            name: commentId
            description: ID of the comment on the remote node
        out:
          struct: AsyncOperationCreated
        auth: admin
        description: Verify the signature of the given comment to the posting on the remote node.
  - name: Remote Postings object
    description: Postings located on other nodes.
    requests:
      - url: /nodes/{nodeName}/postings/{id}/verify
        type: POST
        params:
          - type: String
            name: nodeName
            description: name of the remote node
          - type: String
            name: id
            description: ID of the posting on the remote node
        out:
          struct: AsyncOperationCreated
        auth: admin
        description: Verify the signature of the given posting.
      - url: /nodes/{nodeName}/postings/{id}/revisions/{revisionId}/verify
        type: POST
        params:
          - type: String
            name: nodeName
            description: name of the remote node
          - type: String
            name: id
            description: ID of the posting on the remote node
          - type: String
            name: revisionId
            description: ID of the posting revision
        out:
          struct: AsyncOperationCreated
        auth: admin
        description: Verify the signature of the given revision of a posting.
  - name: Remote Posting Reactions object
    description: Reactions to postings located on other nodes.
    requests:
      - url: /nodes/{nodeName}/postings/{postingId}/reactions
        type: POST
        params:
          - type: String
            name: nodeName
            description: name of the remote node
          - type: String
            name: postingId
            description: ID of the posting on the remote node
        in:
          struct: ReactionAttributes
        out:
          struct: Result
        auth: admin
        entitled: true
        description: Add a reaction to the posting on the remote node and register it in the registry at the local node.
      - url: /nodes/{nodeName}/postings/{postingId}/reactions
        type: DELETE
        params:
          - type: String
            name: nodeName
            description: name of the remote node
          - type: String
            name: postingId
            description: ID of the posting on the remote node
        out:
          struct: Result
        auth: admin
        description: Delete a reaction from the registry of all reactions at the local node.
      - url: /nodes/{nodeName}/postings/{postingId}/reactions/{ownerName}/verify
        type: POST
        params:
          - type: String
            name: nodeName
            description: name of the remote node
          - type: String
            name: postingId
            description: ID of the posting on the remote node
          - type: String
            name: ownerName
            description: reaction owner node name
        out:
          struct: AsyncOperationCreated
        auth: admin
        description: Verify the signature of the reaction of the given owner to the posting on the remote node.
  - name: Settings object
    description: >
      Settings - the node and client settings. The node settings affect the node behavior. Only those settings are
      accepted that are known by the node, and their values are validated before saving. The node settings metadata can
      be obtained by request. The client settings are saved without validation and their metadata is built into the
      client. All client settings must have names starting with <code>client.</code> to distinguish them from the node
      ones. By convention, the client name is added to the prefix (<code>client.&lt;client name>.</code>) to be able to
      store settings of several different clients at the same time.
    requests:
      - url: /settings
        type: PUT
        in:
          struct: SettingInfo
          array: true
        out:
          struct: Result
        auth: admin or root secret
        description:
          Update the given settings. If the input contains node settings, they are validated and the first validation
          error is returned, if any. The update is always performed as whole - if there is an error saving any one of
          the settings in the input, none of them are updated.
          <br><br>
          If one of the settings to be updated is privileged, <i>root secret</i> authentication is required. If one of
          the settings to be updated is non-privileged, <i>admin</i> authentication is required.
        errors:
          - code: setting.deserialization-failed
            description: setting value deserialization failed
          - code: setting.cannot-convert
            description: cannot convert value to the setting type
          - code: setting.invalid-value
            description: invalid value for the setting
          - code: setting.internal
            description: cannot set value of an internal setting
          - code: setting.unknown
            description: unknown setting
      - url: /settings/client
        type: GET
        params:
          - type: String
            name: prefix
            description: >
              filter settings whose names start with the given prefix, case-sensitive (<code>client.</code> prefix
              must be included)
        out:
          struct: SettingInfo
          array: true
        auth: admin
        description: Get all client settings, sorted by name.
      - url: /settings/node
        type: GET
        params:
          - type: String
            name: prefix
            description: filter settings whose names start with the given prefix, case-sensitive
        out:
          struct: SettingInfo
          array: true
        auth: admin
        description: >
          Get all node settings, sorted by name. If a setting has not changed its value from the default, it is omitted.
      - url: /settings/node/metadata
        type: GET
        params:
          - type: String
            name: prefix
            description: filter settings whose names start with the given prefix, case-sensitive
        out:
          struct: SettingMetaInfo
          array: true
        auth: admin
        description: Get all node settings metadata, sorted by name.
      - url: /settings/node/metadata
        type: PUT
        in:
          struct: SettingMetaAttributes
          array: true
        out:
          struct: Result
        auth: root secret
        description: Update node settings metadata, overriding built-in defaults.
        errors:
          - code: setting.deserialization-failed
            description: setting value deserialization failed
          - code: setting.cannot-convert
            description: cannot convert value to the setting type
          - code: setting.invalid-value
            description: invalid value for the setting
          - code: setting.internal
            description: cannot set value of an internal setting
          - code: setting.unknown
            description: unknown setting
  - name: Stories object
    description: >
      All stories. Each story describes something happening in Moera, stories are building blocks for feeds. A story may
      reference a posting, a remote object etc.
    requests:
      - url: /stories/{id}
        type: GET
        params:
          - type: String
            name: id
            description: ID of the story
        out:
          struct: StoryInfo
        description: Get an individual story.
        errors:
          - code: story.not-found
            description: there is no story with the given ID
      - url: /stories/{id}
        type: PUT
        params:
          - type: String
            name: id
            description: ID of the story
        in:
          struct: StoryAttributes
        out:
          struct: StoryInfo
        auth: admin
        description: >
          Update the story.
        errors:
          - code: story.not-found
            description: there is no story with the given ID
  - name: Subscribers object
    description: >
      All nodes that have subscribed to notifications from this node.
    requests:
      - url: /people/subscribers
        type: GET
        params:
          - type: String
            name: nodeName
            description: filter by subscribed node name, may be omitted
          - type: String
            name: type
            description: >
              filter by subscription type (see
              <code><a href="#SubscriptionDescription">SubscriptionDescription</a>.type</code> for the list of possible
              values), may be omitted
        out:
          struct: SubscriberInfo
          array: true
        description: Get the list of all subscribers, optionally filtered by some criteria.
      - url: /people/subscribers
        type: POST
        in:
          struct: SubscriberDescription
        out:
          struct: SubscriberInfo
        auth: owner
        description: Subscribe to a particular group of notifications.
        errors:
          - code: subscriber.already-exists
            description: an identical subscriber already exists
      - url: /people/subscribers/{id}
        type: GET
        params:
          - type: String
            name: id
            description: ID of the subscriber
        out:
          struct: SubscriberInfo
        auth: admin or owner
        description: Get an individual subscriber.
        errors:
          - code: subscriber.not-found
            description: there is no subscriber with the given ID
      - url: /people/subscribers/{id}
        type: DELETE
        params:
          - type: String
            name: id
            description: ID of the subscriber
        out:
          struct: Result
        auth: admin or owner
        description: Delete a subscriber.
        errors:
          - code: subscriber.not-found
            description: there is no subscriber with the given ID
  - name: Subscriptions object
    description: >
      All nodes that send notifications to this node.
    requests:
      - url: /people/subscriptions
        type: GET
        params:
          - type: String
            name: nodeName
            description: filter by node name, may be omitted
          - type: String
            name: type
            description: >
              filter by subscription type (see
              <code><a href="#SubscriptionDescription">SubscriptionDescription</a>.type</code> for the list of possible
              values), may be omitted
        out:
          struct: SubscriptionInfo
          array: true
        description: Get the list of all subscriptions, optionally filtered by some criteria.
      - url: /people/subscriptions
        type: POST
        in:
          struct: SubscriptionDescription
        out:
          struct: SubscriptionInfo
        auth: admin
        entitled: true
        description: Register a subscription to notifications from a particular node.
        errors:
          - code: subscription.already-exists
            description: an identical subscription already exists
      - url: /people/subscriptions
        type: DELETE
        params:
          - type: String
            name: remoteNodeName
            description: name of the node this node is subscribed to
          - type: String
            name: remoteSubscriberId
            description: ID of the subscriber on the remote node
        out:
          struct: Result
        auth: admin
        description: Delete the subscription described by the given parameters.
        errors:
          - code: subscription.not-found
            description: there is no subscription with the given parameters.
      - url: /people/subscriptions/search
        type: GET
        in:
          struct: SubscriptionFilter
        out:
          struct: SubscriptionInfo
          array: true
        auth: admin
        description: Search for subscriptions by the given criteria.
  - name: Tokens object
    description: >
      The authentication token. <a href="/overview/authentication.html">Read more</a> about token-base authentication
      in the Overview section.
    requests:
      - url: /tokens/{token}
        type: GET
        params:
          - type: String
            name: token
            description: the token
        out:
          struct: TokenInfo
        description: Get information about the token.
      - url: /tokens
        type: POST
        in:
          struct: Credentials
        out:
          struct: TokenCreated
        description: Sign in and create a token.
        errors:
          - code: credentials.not-created
            description: credentials are not created yet
          - code: credentials.login-incorrect
            description: login or password is incorrect
  - name: Who Am I object
    description: Brief information about the node.
    requests:
      - url: /whoami
        type: GET
        out:
          struct: WhoAmI
        description: Get brief information about the node.

structures:
  - name: AcceptedReactions
    fields:
      - type: String
        name: positive
        description: >
          comma-separated list of codes of the positive reactions that are accepted; a code may be prefixed by
          <code>0x</code> to designate hexadecimal number and <code>+</code> to designate a recommended reaction
      - type: String
        name: negative
        description: >
          comma-separated list of codes of the negative reactions that are accepted (the format is the same as above)
  - name: ActivityReactionFilter
    fields:
      - struct: RemotePosting
        array: true
        name: postings
        description: include only reactions to remote postings from this list
  - name: ActivityReactionInfo
    fields:
      - type: String
        name: remoteNodeName
        description: name of the remote node
      - type: String
        name: remoteFullName
        description: full name of the remote node
      - struct: AvatarImage
        name: remoteAvatar
        description: avatar of the remote node
      - type: String
        name: remotePostingId
        description: ID of the posting on the remote node
      - type: boolean
        name: negative
        description: <code>true</code>, if the reaction is negative, <code>false</code>, if positive
      - type: int
        name: emoji
        description: reaction code, usually interpreted by clients as emoji code point
      - type: timestamp
        name: createdAt
        description: reaction creation timestamp - the real time when the reaction was created
  - name: AsyncOperationCreated
    fields:
      - type: String
        name: id
        description: ID of the asyncronous operation that was created
  - name: AvatarAttributes
    fields:
      - type: String
        name: mediaId
        description: ID of the public media file used as a source image
      - type: int
        name: clipX
        description: x coordinate of the top-left corner of the clipping square
      - type: int
        name: clipY
        description: y coordinate of the top-left corner of the clipping square
      - type: int
        name: clipSize
        description: size of the clipping square
      - type: int
        name: avatarSize
        description: size of the avatar to be created
      - type: float
        name: rotate
        description: rotation angle of the source image
      - type: String
        name: shape
        description: shape of the avatar
      - type: int
        name: ordinal
        description: ordinal of the avatar, may be absent
    errors:
      - code: avatarAttributes.mediaId.blank
        description: media ID is not set
      - code: avatarAttributes.mediaId.not-found
        description: the source media is not found
      - code: avatarAttributes.clipX.out-of-range
        description: clipping area left side is out of the image bounds
      - code: avatarAttributes.clipY.out-of-range
        description: clipping area top side is out of the image bounds
      - code: avatarAttributes.clipSize.out-of-range
        description: clipping area size is out of range (usually too small)
      - code: avatarAttributes.avatarSize.out-of-range
        description: avatar size is out of range (usually too small)
  - name: AvatarDescription
    fields:
      - type: String
        name: mediaId
        description: ID of the public media file used as an avatar image
      - type: String
        name: shape
        description: shape of the avatar
      - type: bool
        name: optional
        description: >
          if set to <code>true</code>, the node will ignore the absence of the media file referenced in
          <code>mediaId</code> field (empty avatar will be used in this case); if set to <code>false</code> or absent,
          the node will return an error, if the media file referenced in <code>mediaId</code> field is absent
  - name: AvatarImage
    fields:
      - type: String
        name: mediaId
        description: ID of the media file
      - type: String
        name: path
        description: >
          virtual location of the media file, relative to the <code>/media</code>
          <a href="virtual-pages.html">virtual page</a>
      - type: int
        name: width
        description: width of the media in pixels (<code>null</code>, if the media file is not an image/video)
      - type: int
        name: height
        description: height of the media in pixels (<code>null</code>, if the media file is not an image/video)
      - type: String
        name: shape
        description: shape of the avatar
  - name: AvatarInfo
    fields:
      - type: String
        name: id
        description: ID of the avatar
      - type: String
        name: mediaId
        description: ID of the media file
      - type: String
        name: path
        description: >
          virtual location of the media file, relative to the <code>/media</code>
          <a href="virtual-pages.html">virtual page</a>
      - type: int
        name: width
        description: width of the media in pixels (<code>null</code>, if the media file is not an image/video)
      - type: int
        name: height
        description: height of the media in pixels (<code>null</code>, if the media file is not an image/video)
      - type: String
        name: shape
        description: shape of the avatar
      - type: int
        name: ordinal
        description: ordinal of the avatar
  - name: AvatarOrdinal
    fields:
      - type: String
        name: id
        description: ID of the avatar
      - type: int
        name: ordinal
        description: ordinal of the avatar
  - name: AvatarsOrdered
    fields:
      - type: String[]
        name: ids
        description: IDs of avatars
  - name: Body
    fields:
      - type: String
        name: subject
        description: plain text
      - type: String
        name: text
        description: HTML
  - name: CarteInfo
    fields:
      - type: String
        name: carte
      - type: timestamp
        name: beginning
        description: timestamp of the beginning of the carte's life
      - type: timestamp
        name: deadline
        description: timestamp of the end of the carte's life
  - name: CarteSet
    fields:
      - type: String
        name: cartesIp
        description: the client IP address the cartes are bound to
      - struct: CarteInfo
        array: true
        name: cartes
        description: the cartes
      - type: timestamp
        name: createdAt
        description: cartes creation timestamp
  - name: Choice
    fields:
      - type: String
        name: value
      - type: String
        name: title
        description: user-readable title for the value
  - name: ClientReactionInfo
    fields:
      - type: boolean
        name: negative
        description: <code>true</code>, if the reaction is negative, <code>false</code>, if positive
      - type: int
        name: emoji
        description: reaction code, usually interpreted by clients as emoji code point
      - type: timestamp
        name: createdAt
        description: reaction creation timestamp - the real time when the reaction was created
      - type: timestamp
        name: deadline
        description: if present, the reaction will be erased at this time
  - name: CommentCreated
    fields:
      - struct: CommentInfo
        name: comment
        description: details of the comment created
      - type: int
        name: total
        description: total number of comments in the posting after the creation
  - name: CommentInfo
    fields:
      - type: String
        name: id
      - type: String
        name: ownerName
        description: node name of the comment's owner
      - type: String
        name: ownerFullName
        description: full name of the comment's owner
      - struct: AvatarImage
        name: ownerAvatar
        description: avatar of the comment's owner
      - type: String
        name: postingId
        description: ID of the parent posting of the comment
      - type: String
        name: postingRevisionId
        description: ID of the revision of parent posting that was current when the comment was created
      - type: String
        name: revisionId
        description: ID of the current revision of the comment
      - type: int
        name: totalRevisions
        description: total number of revisions the comment has
      - type: String
        name: bodyPreview
        description: preview of the comment's body, a string representation of a JSON structure, may be absent
      - type: String
        name: bodySrc
        description: >
          the source text of the comment, a string representation of a JSON structure, may be absent if not requested
      - type: byte[]
        name: bodySrcHash
        description: hash of the source text of the comment
      - type: String
        name: bodySrcFormat
        description: >
          format of the source text of the comment, the list of available formats is returned in
          <a href="#PostingFeatures"><code>PostingFeatures</code></a>
      - type: String
        name: body
        description: body of the comment, a string representation of a JSON structure
      - type: String
        name: bodyFormat
        description: >
          format of the body of the comment, may have any value meaningful for the client, including:
          <ul>
            <li><code>message</code> - <a href="#Body"><code>Body</code></a> structure;</li>
            <li><code>application</code> - an application-specific structure.</li>
          </ul>
      - struct: MediaAttachment
        array: true
        name: media
        description: list of the media attached to the comment
      - type: String
        name: heading
        description: heading of the comment
      - struct: RepliedTo
        name: repliedTo
        description: information about the comment this comment is replying to, may be absent
      - type: int
        name: moment
      - type: timestamp
        name: createdAt
        description: comment creation timestamp - the real time when the comment was created
      - type: timestamp
        name: editedAt
        description: comment editing timestamp - the last time the comment was updated
      - type: timestamp
        name: deletedAt
        description: comment deletion timestamp - the time when the comment was deleted, may be absent
      - type: timestamp
        name: revisionCreatedAt
        description: creation timestamp of the current revision of the comment
      - type: timestamp
        name: deadline
        description: >
          comment purging timestamp - the time when the deleted comment will be purged from the database, may be absent
      - type: byte[]
        name: digest
        description: cryptographic digest of the comment
      - type: byte[]
        name: signature
        description: >
          the comment's owner signature (use <a href="node-api-fingerprints.html#Comment"><code>Comment</code></a>
          fingerprint)
      - type: int
        name: signatureVersion
        description: signature version (i.e. fingerprint version)
      - type: String -> String[]
        name: operations
        description: list of the supported operations (see below) and the corresponding access hints
      - struct: AcceptedReactions
        name: acceptedReactions
        description: types of reactions that the comment accepts
      - struct: ClientReactionInfo
        name: clientReaction
        description: details of the existing reaction (if any) of the client's owner
      - struct: ReactionTotalsInfo
        name: reactions
        description: reactions summary of the comment
    operations:
      - name: edit
        description: edit the comment
      - name: delete
        description: delete the comment
      - name: revisions
        description: view the comment's revisions
      - name: reactions
        description: view reactions to the comment
  - name: CommentRevisionInfo
    fields:
      - type: String
        name: id
      - type: String
        name: postingRevisionId
        description: ID of the posting revision that was actual at the moment of creation of this comment revision
      - type: String
        name: bodyPreview
        description: preview of the revision's body, a string representation of a JSON structure, may be absent
      - type: byte[]
        name: bodySrcHash
        description: hash of the source text of the revision
      - type: String
        name: bodySrcFormat
        description: >
          format of the source text of the revision, the list of available formats is returned in
          <a href="#PostingFeatures"><code>PostingFeatures</code></a>
      - type: String
        name: body
        description: body of the revision, a string representation of a JSON structure
      - type: String
        name: bodyFormat
        description: >
          format of the body of the revision, may have any value meaningful for the client, including:
          <ul>
            <li><code>message</code> - <a href="#Body"><code>Body</code></a> structure;</li>
            <li><code>application</code> - an application-specific structure.</li>
          </ul>
      - type: String
        name: heading
        description: heading of the revision
      - type: timestamp
        name: createdAt
        description: revision creation timestamp - the real time when the revision was created
      - type: timestamp
        name: deletedAt
        description: revision deletion timestamp - the time when the revision was deleted, may be absent
      - type: timestamp
        name: deadline
        description: >
          revision deletion timestamp - the time when the revision will be deleted and the previous revision will take
          its place, may be absent
      - type: byte[]
        name: digest
        description: cryptographic digest of the revision
      - type: byte[]
        name: signature
        description: >
          the comment's owner signature (use <a href="node-api-fingerprints.html#Comment"><code>Comment</code></a>
          fingerprint)
      - type: int
        name: signatureVersion
        description: signature version (i.e. fingerprint version)
      - struct: ClientReactionInfo
        name: clientReaction
        description: details of the existing reaction (if any) of the client's owner
      - struct: ReactionTotalsInfo
        name: reactions
        description: reactions summary of the revision
  - name: CommentsSliceInfo
    fields:
      - type: int
        name: before
        description: the slice contains all comments before this moment, inclusive. May be the far future.
      - type: int
        name: after
        description: the slice contains all comments after this moment, exclusive. May be the far past.
      - struct: CommentInfo
        array: true
        name: comments
        description: the comments
      - type: int
        name: total
        description: total number of comments
      - type: int
        name: totalInPast
        description: number of comments before this slice till the far past
      - type: int
        name: totalInFuture
        description: number of comments after this slice till the far future
  - name: CommentSourceText
    fields:
      - struct: AvatarDescription
        name: ownerAvatar
        description: avatar of the comment's owner
      - type: String
        name: bodySrc
        description: the source text of the comment, a string representation of a JSON structure
      - type: String
        name: bodySrcFormat
        description: >
          format of the source text of the comment, <code>plain-text</code> by default; the list of available formats is
          returned in <a href="#PostingFeatures"><code>PostingFeatures</code></a>
      - struct: MediaWithDigest
        array: true
        name: media
        description: array of IDs and digests of private media to be attached to the comment
      - struct: AcceptedReactions
        name: acceptedReactions
        description: types of reactions that the comment accepts
      - type: String
        name: repliedToId
        description: ID of the comment this comment is replying to
    errors:
      - code: commentText.bodySrc.blank
        description: body text is empty
      - code: commentText.bodySrc.wrong-size
        description: body text is too long
      - code: commentText.bodySrc.wrong-encoding
        description: body text is formatted incorrectly
      - code: commentText.acceptedReactions.positive.wrong-size
        description: list of accepted positive reactions is too long
      - code: commentText.acceptedReactions.positive.wrong-pattern
        description: list of accepted positive reactions has wrong format
      - code: commentText.acceptedReactions.negative.wrong-size
        description: list of accepted negative reactions is too long
      - code: commentText.acceptedReactions.negative.wrong-pattern
        description: list of accepted negative reactions has wrong format
  - name: CommentText
    fields:
      - type: String
        name: ownerName
        description: node name of the comment's owner
      - type: String
        name: ownerFullName
        description: full name of the comment's owner
      - struct: AvatarDescription
        name: ownerAvatar
        description: avatar of the comment's owner
      - type: String
        name: bodyPreview
        description: preview of the comment's body, a string representation of a JSON structure
      - type: String
        name: bodySrc
        description: the source text of the comment, a string representation of a JSON structure
      - type: String
        name: bodySrcFormat
        description: >
          format of the source text of the comment, <code>plain-text</code> by default; the list of available formats is
          returned in <a href="#PostingFeatures"><code>PostingFeatures</code></a>
      - type: String
        name: body
        description: body of the comment, a string representation of a JSON structure
      - type: String
        name: bodyFormat
        description: >
          format of the body of the comment, may have any value meaningful for the client, including:
          <ul>
            <li><code>message</code> - <a href="#Body"><code>Body</code></a> structure;</li>
            <li><code>application</code> - an application-specific structure.</li>
          </ul>
      - type: String[]
        name: media
        description: array of IDs of private media to be attached to the comment
      - type: timestamp
        name: createdAt
        description: comment creation timestamp - the real time when the comment was created
      - struct: AcceptedReactions
        name: acceptedReactions
        description: types of reactions that the comment accepts
      - type: String
        name: repliedToId
        description: ID of the comment this comment is replying to
      - type: byte[]
        name: signature
        description: >
          the comment's owner signature (use <a href="node-api-fingerprints.html#Comment"><code>Comment</code></a>
          fingerprint)
      - type: int
        name: signatureVersion
        description: signature version (i.e. fingerprint version)
    errors:
      - code: commentText.ownerAvatar.mediaId.not-found
        description: owner's avatar is not found
      - code: commentText.bodySrc.blank
        description: body text is empty
      - code: commentText.bodySrc.wrong-size
        description: body text is too long
      - code: commentText.bodySrc.wrong-encoding
        description: body text is formatted incorrectly
      - code: commentText.bodySrcFormat.unknown
        description: unknown body text format
      - code: commentText.body.blank
        description: body is empty
      - code: commentText.body.wrong-size
        description: body is too long
      - code: commentText.body.wrong-encoding
        description: body encoding is incorrect
      - code: commentText.bodyPreview.wrong-encoding
        description: body preview encoding is incorrect
      - code: commentText.bodyFormat.blank
        description: body format is not set
      - code: commentText.bodyFormat.wrong-size
        description: body format is too long
      - code: commentText.media.not-found
        description: media attachment is not found
      - code: commentText.media.not-compressed
        description: >
          media attachment is not compressed as the node requires, the parameters of the desired compression are
          returned in <a href="#PostingFeatures"><code>PostingFeatures</code></a>
      - code: commentText.createdAt.blank
        description: body creation timestamp is not set
      - code: commentText.createdAt.out-of-range
        description: body creation timestamp is too far from the current timestamp
      - code: commentText.acceptedReactions.positive.wrong-size
        description: list of accepted positive reactions is too long
      - code: commentText.acceptedReactions.positive.wrong-pattern
        description: list of accepted positive reactions has wrong format
      - code: commentText.acceptedReactions.negative.wrong-size
        description: list of accepted negative reactions is too long
      - code: commentText.acceptedReactions.negative.wrong-pattern
        description: list of accepted negative reactions has wrong format
      - code: commentText.repliedToId.not-found
        description: comment referred in `repliedToId` is not found
  - name: CommentTotalInfo
    fields:
      - type: int
        name: total
        description: total number of comments in the posting after the operation
  - name: ContactInfo
    fields:
      - type: String
        name: nodeName
      - type: String
        name: fullName
      - struct: AvatarImage
        name: avatar
      - type: float
        name: closeness
        description: >
          closeness of the contact to the node, which is calculated from the number of reactions and comments and
          their age
  - name: Credentials
    fields:
      - type: String
        name: login
      - type: String
        name: password
    errors:
      - code: credentials.login.blank
        description: the login is empty
      - code: credentials.password.blank
        description: the password is empty
  - name: CredentialsChange
    fields:
      - type: String
        name: token
        description: credentials reset token
      - type: String
        name: oldPassword
        description: the current password
      - type: String
        name: login
      - type: String
        name: password
    errors:
      - code: credentials.login.blank
        description: the login is empty
      - code: credentials.password.blank
        description: the password is empty
  - name: CredentialsCreated
    fields:
      - type: boolean
        name: created
        description: <code>true</code> if the credentials are initialized already, <code>false</code> otherwise
  - name: DomainAttributes
    fields:
      - type: String
        name: name
        description: domain's hostname or <code>_default_</code> for the default domain
      - type: UUID
        name: nodeId
        description: domain's node ID
    errors:
      - code: domainAttributes.name.blank
        description: the domain name is empty
      - code: domainAttributes.name.wrong-hostname
        description: the domain name is not a valid hostname
      - code: domainAttributes.nodeId.wrong-uuid
        description: the node ID is not a valid UUID
  - name: DomainAvailable
    fields:
      - type: String
        name: name
        description: fully-qualified domain name
  - name: DomainInfo
    fields:
      - type: String
        name: name
        description: domain's hostname or <code>_default_</code> for the default domain
      - type: UUID
        name: nodeId
        description: domain's node ID
      - type: timestamp
        name: createdAt
        description: domain creation timestamp
    errors:
      - code: domainInfo.name.blank
        description: the domain name is empty
      - code: domainInfo.name.wrong-hostname
        description: the domain name is not a valid hostname
      - code: domainInfo.nodeId.wrong-uuid
        description: the node ID is not a valid UUID
  - name: DraftInfo
    fields:
      - type: String
        name: id
      - type: String
        name: draftType
        description: >
          type of the draft, one of:
          <ul>
            <li><code>new-posting</code> - draft of a new posting;</li>
            <li><code>posting-update</code> - draft of an update to a posting;</li>
            <li><code>new-comment</code> - draft of a new comment;</li>
            <li><code>comment-update</code> - draft of an update to a comment.</li>
          </ul>
      - type: String
        name: receiverName
        description: name of the node the draft is related to
      - type: String
        name: receiverPostingId
        description: ID of the posting, set for all types, except <code>new-posting</code>
      - type: String
        name: receiverCommentId
        description: ID of the comment, set for <code>comment-update</code> type
      - type: timestamp
        name: createdAt
        description: draft creation timestamp - the real time when the draft was created
      - type: timestamp
        name: editedAt
        description: draft editing timestamp - the last time the draft was updated
      - type: timestamp
        name: deadline
        description: draft purging timestamp - the time when the draft will be purged from the database, if not updated
      - type: String
        name: ownerFullName
        description: full name of the posting's/comment's owner
      - struct: AvatarDescription
        name: ownerAvatar
        description: avatar of the posting's/comment's owner
      - struct: AcceptedReactions
        name: acceptedReactions
        description: types of reactions that the posting accepts
      - type: boolean
        name: reactionsVisible
        description: >
          <code>true</code>, if the posting allows to view detailed information about reactions to anybody except
          posting and reaction owners, <code>false</code> otherwise
      - type: boolean
        name: reactionTotalsVisible
        description: >
          <code>true</code>, if the posting allows to view number of reactions to anybody except the posting owner,
          <code>false</code> otherwise
      - type: String
        name: bodySrc
        description: the source text of the draft, a string representation of a JSON structure
      - type: String
        name: bodySrcFormat
        description: >
          format of the source text of the draft, <code>plain-text</code> by default; the list of available formats is
          returned in <a href="#PostingFeatures"><code>PostingFeatures</code></a>
      - type: String
        name: body
        description: body of the draft, a string representation of a JSON structure
      - type: String
        name: bodyFormat
        description: >
          format of the body of the draft, see detailed description in
          <a href="#PostingInfo"><code>PostingInfo</code></a><code>.bodyFormat</code>
      - struct: MediaAttachment
        array: true
        name: media
        description: list of the media attached to the draft
      - type: String
        name: heading
        description: heading of the draft
      - type: int
        name: publishAt
        description: story publication timestamp - the time the story must be published under in the feed
      - struct: UpdateInfo
        name: updateInfo
        description: description of the update
  - name: DraftText
    fields:
      - type: String
        name: draftType
        description: >
          type of the draft (see <code><a href="#DraftInfo">DraftInfo</a>.draftType</code> for the list of possible
          values)
      - type: String
        name: receiverName
        description: name of the node the draft is related to
      - type: String
        name: receiverPostingId
        description: ID of the posting, mandatory for all types, except <code>new-posting</code>
      - type: String
        name: receiverCommentId
        description: ID of the comment, mandatory for <code>comment-update</code> type
      - type: String
        name: ownerFullName
        description: full name of the posting's/comment's owner
      - struct: AvatarDescription
        name: ownerAvatar
        description: avatar of the posting's/comment's owner
      - struct: AcceptedReactions
        name: acceptedReactions
        description: types of reactions that the posting accepts
      - type: boolean
        name: reactionsVisible
        description: >
          <code>true</code>, if the posting allows to view detailed information about reactions to anybody except
          posting and reaction owners, <code>false</code> otherwise
      - type: boolean
        name: reactionTotalsVisible
        description: >
          <code>true</code>, if the posting allows to view number of reactions to anybody except the posting owner,
          <code>false</code> otherwise
      - type: String
        name: bodySrc
        description: the source text of the draft, a string representation of a JSON structure
      - type: String
        name: bodySrcFormat
        description: >
          format of the source text of the draft, <code>plain-text</code> by default; the list of available formats is
          returned in <a href="#PostingFeatures"><code>PostingFeatures</code></a>
      - struct: RemoteMedia
        array: true
        name: media
        description: list of the media attached to the draft, the media may be located on another node
      - type: int
        name: publishAt
        description: story publication timestamp - the time the story must be published under in the feed
      - struct: UpdateInfo
        name: updateInfo
        description: description of the update
    errors:
      - code: draftText.postingId.blank
        description: posting ID is not set
      - code: draftText.commentId.blank
        description: comment ID is not set
      - code: draftText.ownerFullName.wrong-size
        description: owner's full name is too long
      - code: draftText.ownerAvatar.mediaId.not-found
        description: owner's avatar is not found
      - code: draftText.bodySrc.wrong-size
        description: body text is too long
      - code: draftText.bodySrc.wrong-encoding
        description: body text encoding is incorrect
      - code: draftText.bodySrcFormat.unknown
        description: unknown body text format
      - code: draftText.acceptedReactions.positive.wrong-size
        description: list of accepted positive reactions is too long
      - code: draftText.acceptedReactions.positive.wrong-pattern
        description: list of accepted positive reactions has wrong format
      - code: draftText.acceptedReactions.negative.wrong-size
        description: list of accepted negative reactions is too long
      - code: draftText.acceptedReactions.negative.wrong-pattern
        description: list of accepted negative reactions has wrong format
  - name: EmailHint
    fields:
      - type: String
        name: emailHint
        description: >
          a masked E-mail address that should help user to understand which E-mail address was used without revealing it
  - name: FeedInfo
    fields:
      - type: String
        name: feedName
        description: name of the feed
      - type: String
        name: title
        description: title of the feed
      - type: String
        name: subscriberId
        description: >
          ID of the subscriber, if the client is subscribed to notifications about this feed, <code>null</code>
          or absent otherwise
      - type: String -> String[]
        name: operations
        description: list of the supported operations (see below) and the corresponding access hints
    operations:
      - name: add
        description: add stories to the feed
  - name: FeedReference
    fields:
      - type: String
        name: feedName
        description: name of the feed
      - type: timestamp
        name: publishedAt
        description: story publication timestamp - the time the story is published under in the feed
      - type: boolean
        name: pinned
        description: >
          <code>true</code>, if the story is pinned (should appear before any non-pinned story in the feed),
          <code>false</code> otherwise
      - type: int
        name: moment
      - type: String
        name: storyId
        description: ID of the story
      - type: String -> String[]
        name: operations
        description: >
          list of the supported operations (see <code><a href="#StoryInfo">StoryInfo</a>.operations</code>) and
          the corresponding access hints for the story in the feed
  - name: FeedSliceInfo
    fields:
      - type: int
        name: before
        description: the slice contains all stories before this moment, inclusive. May be the far future.
      - type: int
        name: after
        description: the slice contains all stories after this moment, exclusive. May be the far past.
      - struct: StoryInfo
        array: true
        name: stories
        description: the stories
      - type: int
        name: totalInPast
        description: total number of stories in the feed before this slice
      - type: int
        name: totalInFuture
        description: total number of stories in the feed after this slice
  - name: FeedStatus
    fields:
      - type: int
        name: total
        description: total number of stories
      - type: int
        name: totalPinned
        description: total number of pinned stories
      - type: int
        name: notViewed
        description: number of stories that have not been viewed yet, admin only
      - type: int
        name: notRead
        description: number of stories that have not been read yet, admin only
      - type: int
        name: notViewedMoment
        description: moment of the oldest non-viewed story, admin only, may be absent
  - name: FeedStatusChange
    fields:
      - type: boolean
        name: viewed
        description: new value of the <code>viewed</code> flag (<code>null</code>, if the flag is not changed)
      - type: boolean
        name: read
        description: new value of the <code>read</code> flag (<code>null</code>, if the flag is not changed)
      - type: int
        name: before
        description: change flags for all stories before this moment, inclusive
  - name: FeedWithStatus
    fields:
      - type: String
        name: feedName
        description: name of the feed
      - type: int
        name: notViewed
        description: number of stories in the feed that have not been viewed yet
      - type: int
        name: notRead
        description: number of stories in the feed that have not been read yet
  - name: MediaAttachment
    fields:
      - struct: PrivateMediaFileInfo
        name: media
        description: details of the attached media, may be absent, if the media is not located on the node
      - struct: RemoteMediaInfo
        name: remoteMedia
        description: details of the media, if it is located on another node
      - type: boolean
        name: embedded
        description: >
            <code>true</code> if the media is used in the body of the posting/comment, <code>false</code> otherwise
  - name: MediaFilePreviewInfo
    fields:
      - type: int
        name: targetWidth
        description: the width the preview was prepared for viewing at
      - type: int
        name: width
        description: actual width of the preview in pixels
      - type: int
        name: height
        description: actual height of the preview in pixels
      - type: boolean
        name: original
        description: <code>true</code> if the preview is identical to the original media, <code>false</code> otherwise
  - name: MediaWithDigest
    fields:
      - type: String
        name: id
        description: ID of the media file
      - type: String
        name: digest
        description: cryptographic digest of the media file
  - name: NameToRegister
    fields:
      - type: String
        name: name
    errors:
      - code: nameToRegister.name.blank
        description: the name is empty
      - code: nameToRegister.name.invalid
        description: the name is reserved, too long or contains invalid characters
  - name: NotificationPacket
    fields:
      - type: String
        name: id
        description: ID of the notification packet on the sending node (used to filter out duplicates)
      - type: String
        name: nodeName
        description: name of the sending node
      - type: String
        name: fullName
        description: full name of the sending node
      - struct: AvatarImage
        name: avatar
        description: avatar of the sending node
      - type: timestamp
        name: createdAt
        description: notification packet creation timestamp
      - type: String
        name: type
        description: notification type
      - type: String
        name: notification
        description: >
          the notification, a string representation of a JSON structure (see
          <a href="notifications.html">Notifications</a> page for details)
      - type: byte[]
        name: signature
        description: >
          the notification packet sender signature (use
          <a href="node-api-fingerprints.html#NotificationPacket"><code>NotificationPacket</code></a> fingerprint)
      - type: int
        name: signatureVersion
        description: signature version (i.e. fingerprint version)
  - name: NodeNameInfo
    fields:
      - type: String
        name: name
      - enum: OperationStatus
        name: operationStatus
        description: status of the latest operation with the node name
      - type: timestamp
        name: operationStatusUpdated
        description: the last time the operation status was updated
      - type: String
        name: operationErrorCode
        description: if the operation with the node name was failed, the code of the failure
      - type: String
        name: operationErrorMessage
        description: if the operation with the node name was failed, the human-readable description of the failure
      - type: String -> String[]
        name: operations
        description: list of the supported operations (see below) and the corresponding access hints
    operations:
      - name: manage
        description: any modification of the node name, prolonging it etc
  - name: PeopleGeneralInfo
    fields:
      - type: int
        name: feedSubscribersTotal
        description: total number of subscribers of the node
      - type: int
        name: feedSubscriptionsTotal
        description: total number of subscriptions of the node
  - name: PostingFeatures
    fields:
      - type: boolean
        name: subjectPresent
        description: <code>true</code> if new postings are recommended to have a subject, <code>false</code> otherwise
      - struct: Choice
        array: true
        name: sourceFormats
        description: >
          List of source text formats the node understands. The well-known values are:
          <ul>
            <li><code>plain-text</code> - plain text with newlines and paragraphs delimited by empty line;</li>
            <li><code>html</code> - HTML-formatted text, the node may allow only limited set of tags;</li>
            <li><code>markdown</code> - text in Markdown format.</li>
          </ul>
      - type: int
        name: mediaMaxSize
        description: maximal size of a media attachment in a post
      - type: int
        name: imageRecommendedSize
        description: maximal size of a compressed image in a post
      - type: int
        name: imageRecommendedPixels
        description: maximal resolution of a compressed image in a post (in pixels)
  - name: PostingInfo
    fields:
      - type: String
        name: id
      - type: String
        name: revisionId
        description: ID of the current revision of the posting
      - type: String
        name: receiverRevisionId
        description: ID of the current revision of the original posting (for cached copies of remote postings only)
      - type: int
        name: totalRevisions
        description: total number of revisions the posting has
      - type: String
        name: receiverName
        description: name of the node where the posting was published (for cached copies of remote postings only)
      - type: String
        name: receiverFullName
        description: full name of the node where the posting was published (for cached copies of remote postings only)
      - struct: AvatarImage
        name: receiverAvatar
        description: avatar of the node where the posting was published (for cached copies of remote postings only)
      - type: String
        name: receiverPostingId
        description: ID of the original posting (for cached copies of remote postings only)
      - type: String
        name: parentMediaId
        description: ID of the media the posting is linked to, if any
      - type: String
        name: ownerName
        description: node name of the posting's owner
      - type: String
        name: ownerFullName
        description: full name of the posting's owner
      - struct: AvatarImage
        name: ownerAvatar
        description: avatar of the posting's owner
      - type: String
        name: bodyPreview
        description: preview of the posting's body, a string representation of a JSON structure, may be absent
      - type: String
        name: bodySrc
        description: >
          the source text of the posting, a string representation of a JSON structure, may be absent if not requested
      - type: byte[]
        name: bodySrcHash
        description: hash of the source text of the posting
      - type: String
        name: bodySrcFormat
        description: >
          format of the source text of the posting, the list of available formats is returned in
          <a href="#PostingFeatures"><code>PostingFeatures</code></a>
      - type: String
        name: body
        description: body of the posting, a string representation of a JSON structure
      - type: String
        name: bodyFormat
        description: >
          format of the body of the posting, may have any value meaningful for the client, including:
          <ul>
            <li><code>message</code> - <a href="#Body"><code>Body</code></a> structure;</li>
            <li><code>application</code> - an application-specific structure.</li>
          </ul>
      - struct: MediaAttachment
        array: true
        name: media
        description: list of the media attached to the posting
      - type: String
        name: heading
        description: heading of the posting
      - struct: UpdateInfo
        name: updateInfo
        description: description of the latest update
      - type: timestamp
        name: createdAt
        description: posting creation timestamp - the real time when the posting was created
      - type: timestamp
        name: editedAt
        description: posting editing timestamp - the last time the posting was updated
      - type: timestamp
        name: deletedAt
        description: posting deletion timestamp - the time when the posting was deleted, may be absent
      - type: timestamp
        name: receiverCreatedAt
        description: original posting creation timestamp (for cached copies of remote postings only)
      - type: timestamp
        name: receiverEditedAt
        description: original posting editing timestamp (for cached copies of remote postings only)
      - type: timestamp
        name: receiverDeletedAt
        description: original posting deletion timestamp (for cached copies of remote postings only)
      - type: timestamp
        name: revisionCreatedAt
        description: creation timestamp of the current revision of the posting
      - type: timestamp
        name: receiverRevisionCreatedAt
        description: >
          creation timestamp of the current revision of the original posting (for cached copies of remote postings only)
      - type: timestamp
        name: deadline
        description: >
          posting purging timestamp - the time when the deleted posting will be purged from the database, may be absent
      - type: byte[]
        name: signature
        description: >
          the posting's owner signature (use <a href="node-api-fingerprints.html#Posting"><code>Posting</code></a>
          fingerprint)
      - type: int
        name: signatureVersion
        description: signature version (i.e. fingerprint version)
      - struct: FeedReference
        array: true
        name: feedReferences
        description: array of references to the posting from stories in feeds
      - type: String -> String[]
        name: operations
        description: list of the supported operations (see below) and the corresponding access hints
      - struct: AcceptedReactions
        name: acceptedReactions
        description: types of reactions that the posting accepts
      - struct: ClientReactionInfo
        name: clientReaction
        description: details of the existing reaction (if any) of the client's owner
      - struct: ReactionTotalsInfo
        name: reactions
        description: reactions summary of the posting
      - type: boolean
        name: reactionsVisible
        description: >
          <code>true</code>, if the posting allows to view detailed information about reactions to anybody except
          posting and reaction owners, <code>false</code> otherwise
      - type: boolean
        name: reactionTotalsVisible
        description: >
          <code>true</code>, if the posting allows to view number of reactions to anybody except the posting owner,
          <code>false</code> otherwise
      - struct: PostingSourceInfo
        array: true
        name: sources
        description: details of the sources the posting was received from (for cached copies of remote postings only)
      - type: int
        name: totalComments
        description: total number of comments to the posting
      - struct: PostingSubscriptionsInfo
        name: subscriptions
        description: existing subscriptions of the client's owner
    operations:
      - name: edit
        description: edit the posting
      - name: delete
        description: delete the posting
      - name: revisions
        description: view the posting's revisions
      - name: reactions
        description: view reactions to the posting
  - name: PostingRevisionInfo
    fields:
      - type: String
        name: id
      - type: String
        name: receiverId
        description: ID of the original revision (for cached copies of remote postings only)
      - type: String
        name: bodyPreview
        description: preview of the revisions's body, a string representation of a JSON structure, may be absent
      - type: byte[]
        name: bodySrcHash
        description: hash of the source text of the revision
      - type: String
        name: bodySrcFormat
        description: >
          format of the source text of the revision, the list of available formats is returned in
          <a href="#PostingFeatures"><code>PostingFeatures</code></a>
      - type: String
        name: body
        description: body of the revision, a string representation of a JSON structure
      - type: String
        name: bodyFormat
        description: >
          format of the body of the revision, see detailed description in
          <a href="#PostingInfo"><code>PostingInfo</code></a><code>.bodyFormat</code>
      - struct: MediaAttachment
        array: true
        name: media
        description: list of the media attached to the revision
      - type: String
        name: heading
        description: heading of the revision
      - struct: UpdateInfo
        name: updateInfo
        description: description of the latest update
      - type: timestamp
        name: createdAt
        description: revision creation timestamp - the real time when the revision was created
      - type: timestamp
        name: deletedAt
        description: revision deletion timestamp - the time when the revision was deleted, may be absent
      - type: timestamp
        name: receiverCreatedAt
        description: original revision creation timestamp (for cached copies of remote postings only)
      - type: timestamp
        name: receiverDeletedAt
        description: original revision deletion timestamp (for cached copies of remote postings only)
      - type: byte[]
        name: signature
        description: >
          the revision's owner signature (use <a href="node-api-fingerprints.html#Posting"><code>Posting</code></a>
          fingerprint)
      - type: int
        name: signatureVersion
        description: signature version (i.e. fingerprint version)
      - struct: ClientReactionInfo
        name: clientReaction
        description: details of the existing reaction (if any) of the client's owner
      - struct: ReactionTotalsInfo
        name: reactions
        description: reactions summary of the posting revision
  - name: PostingSourceInfo
    fields:
      - type: String
        name: nodeName
        description: name of the remote node
      - type: String
        name: fullName
        description: full name of the remote node
      - struct: AvatarImage
        name: avatar
        description: avatar of the remote node
      - type: String
        name: feedName
        description: name of the feed on the remote node
      - type: String
        name: postingId
        description: ID of the posting on the remote node
      - type: timestamp
        name: createdAt
        description: timestamp when the posting was received from this source
  - name: PostingSubscriptionsInfo
    fields:
      - type: String
        name: comments
        description: ID of the existing subscription to posting comments, if any
  - name: PostingText
    fields:
      - type: String
        name: ownerName
        description: node name of the posting's owner, may be absent
      - type: String
        name: ownerFullName
        description: full name of the posting's owner
      - struct: AvatarDescription
        name: ownerAvatar
        description: avatar of the posting's owner
      - type: String
        name: bodyPreview
        description: preview of the posting's body, a string representation of a JSON structure
      - type: String
        name: bodySrc
        description: the source text of the posting, a string representation of a JSON structure
      - type: String
        name: bodySrcFormat
        description: >
          format of the source text of the posting, <code>plain-text</code> by default; the list of available formats is
          returned in <a href="#PostingFeatures"><code>PostingFeatures</code></a>
      - type: String
        name: body
        description: body of the posting, a string representation of a JSON structure
      - type: String
        name: bodyFormat
        description: >
          format of the body of the posting, may have any value meaningful for the client, including:
          <ul>
            <li><code>message</code> - <a href="#Body"><code>Body</code></a> structure;</li>
            <li><code>application</code> - an application-specific structure.</li>
          </ul>
      - type: String[]
        name: media
        description: array of IDs of private media to be attached to the posting
      - type: timestamp
        name: createdAt
        description: posting creation timestamp - the real time when the posting was created
      - struct: AcceptedReactions
        name: acceptedReactions
        description: types of reactions that the posting accepts
      - type: boolean
        name: reactionsVisible
        description: >
          <code>true</code>, if the posting allows to view detailed information about reactions to anybody except
          posting and reaction owners, <code>false</code> otherwise
      - type: boolean
        name: reactionTotalsVisible
        description: >
          <code>true</code>, if the posting allows to view number of reactions to anybody except the posting owner,
          <code>false</code> otherwise
      - struct: StoryAttributes
        array: true
        name: publications
        description: list of publications in feeds that must be made after creating the posting (for new postings only)
      - struct: UpdateInfo
        name: updateInfo
        description: description of the update
      - type: byte[]
        name: signature
        description: >
          the posting's owner signature (use <a href="node-api-fingerprints.html#Posting"><code>Posting</code></a>
          fingerprint)
      - type: int
        name: signatureVersion
        description: signature version (i.e. fingerprint version)
    errors:
      - code: postingText.ownerAvatar.mediaId.not-found
        description: owner's avatar is not found
      - code: postingText.bodySrc.blank
        description: body source text is empty
      - code: postingText.bodySrc.wrong-size
        description: body source text is too long
      - code: postingText.bodySrc.wrong-encoding
        description: body source text is formatted incorrectly
      - code: postingText.bodySrcFormat.unknown
        description: unknown body source text format
      - code: postingText.body.blank
        description: body text is empty
      - code: postingText.body.wrong-size
        description: body text is too long
      - code: postingText.bodyPreview.wrong-encoding
        description: body preview encoding is incorrect
      - code: postingText.bodyFormat.blank
        description: body format is not set
      - code: postingText.bodyFormat.wrong-size
        description: body format is too long
      - code: postingText.media.not-found
        description: media attachment is not found
      - code: postingText.media.not-compressed
        description: >
          media attachment is not compressed as the node requires, the parameters of the desired compression are
          returned in <a href="#PostingFeatures"><code>PostingFeatures</code></a>
      - code: postingText.createdAt.blank
        description: body creation timestamp is not set
      - code: postingText.createdAt.out-of-range
        description: body creation timestamp is too far from the current timestamp
      - code: postingText.acceptedReactions.positive.wrong-size
        description: list of accepted positive reactions is too long
      - code: postingText.acceptedReactions.positive.wrong-pattern
        description: list of accepted positive reactions has wrong format
      - code: postingText.acceptedReactions.negative.wrong-size
        description: list of accepted negative reactions is too long
      - code: postingText.acceptedReactions.negative.wrong-pattern
        description: list of accepted negative reactions has wrong format
      - code: postingText.publications.cannot-modify
        description: <code>publications</code> field is not allowed in posting modification query
  - name: PrivateMediaFileInfo
    fields:
      - type: String
        name: id
        description: ID of the media file
      - type: String
        name: hash
        description: SHA-1 hash of the media file
      - type: String
        name: path
        description: >
          virtual location of the media file, relative to the <code>/media</code>
          <a href="virtual-pages.html">virtual page</a>
      - type: String
        name: mimeType
        description: MIME-type of the media
      - type: int
        name: width
        description: width of the media in pixels (<code>null</code>, if the media file is not an image/video)
      - type: int
        name: height
        description: height of the media in pixels (<code>null</code>, if the media file is not an image/video)
      - type: int
        name: size
        description: size of the media file in bytes
      - type: String
        name: postingId
        description: ID of the posting linked to the media (may be absent)
      - struct: MediaFilePreviewInfo
        array: true
        name: previews
        description: list of media previews - downscaled versions of the media
  - name: ProfileAttributes
    fields:
      - type: String
        name: fullName
        description: node owner's full name
      - type: String
        name: gender
        description: node owners's gender
      - type: String
        name: email
        description: node owner's E-mail address
      - type: String
        name: title
        description: node title
      - type: String
        name: bioSrc
        description: the source text of node owner's bio (arbitrary text)
      - type: String
        name: bioSrcFormat
        description: >
          format of the source text of node owner's bio, <code>markdown</code> by default; the list of available formats
          is returned in <a href="#PostingFeatures"><code>PostingFeatures</code></a>
      - type: String
        name: avatarId
        description: node owner's avatar ID
    errors:
      - code: profileAttributes.fullName.wrong-size
        description: the full name is too long
      - code: profileAttributes.gender.wrong-size
        description: the gender string is too long
      - code: profileAttributes.email.wrong-size
        description: the E-mail is too long
      - code: profileAttributes.email.wrong-email
        description: the E-mail is not a well-formed E-mail address
      - code: profileAttributes.title.wrong-size
        description: the title is too long
      - code: profileAttributes.bioSrc.wrong-size
        description: the bio is too long
  - name: ProfileInfo
    fields:
      - type: String
        name: fullName
        description: node owner's full name
      - type: String
        name: gender
        description: node owners's gender
      - type: String
        name: email
        description: node owner's E-mail address
      - type: String
        name: title
        description: node title
      - type: String
        name: bioSrc
        description: the source text of node owner's bio (arbitrary text), may be absent if not requested
      - type: String
        name: bioSrcFormat
        description: >
          format of the source text of node owner's bio, <code>markdown</code> by default, may be absent if not
          requested; the list of available formats is returned in
          <a href="#PostingFeatures"><code>PostingFeatures</code></a>
      - type: String
        name: bioHtml
        description: HTML representation of node owner's bio
      - struct: AvatarInfo
        name: avatar
        description: node owner's avatar
      - type: String -> String[]
        name: operations
        description: list of the supported operations (see below) and the corresponding access hints
    operations:
      - name: edit
        description: change the profile
  - name: PublicMediaFileInfo
    fields:
      - type: String
        name: id
        description: ID of the media file
      - type: String
        name: path
        description: >
          virtual location of the media file, relative to the <code>/media</code>
          <a href="virtual-pages.html">virtual page</a>
      - type: int
        name: width
        description: width of the media in pixels (<code>null</code>, if the media file is not an image/video)
      - type: int
        name: height
        description: height of the media in pixels (<code>null</code>, if the media file is not an image/video)
      - type: int
        name: size
        description: size of the media file in bytes
  - name: PushContent
    fields:
      - type: String
        name: type
        description: >
          type of the notification, one of:
          <ul>
            <li><code>story-added</code> - a story was added to a feed;</li>
            <li><code>story-deleted</code> - a story was deleted from a feed;</li>
            <li><code>feed-updated</code> - feed status was updated.</li>
          </ul>
      - type: String
        name: id
        description: ID of the story (<code>story-deleted</code> notifications only)
      - struct: StoryInfo
        name: story
        description: the story (<code>story-added</code> notifications only)
      - struct: FeedWithStatus
        name: feedStatus
        description: status of the feed (<code>feed-updated</code> notifications only)
  - name: ReactionAttributes
    fields:
      - type: boolean
        name: negative
        description: <code>true</code>, if the reaction is negative, <code>false</code>, if positive
      - type: int
        name: emoji
        description: reaction code, usually interpreted by clients as emoji code point
  - name: ReactionCreated
    fields:
      - struct: ReactionInfo
        name: reaction
        description: details of the reaction created
      - struct: ReactionTotalsInfo
        name: totals
        description: summary of reactions after the creation
  - name: ReactionDescription
    fields:
      - type: String
        name: ownerName
        description: reaction owner's node name
      - type: String
        name: ownerFullName
        description: reaction owner's full name
      - struct: AvatarDescription
        name: ownerAvatar
        description: reaction owner's avatar
      - type: boolean
        name: negative
        description: <code>true</code>, if the reaction is negative, <code>false</code>, if positive
      - type: int
        name: emoji
        description: reaction code, usually interpreted by clients as emoji code point
      - type: byte[]
        name: signature
        description: >
          the reaction owner signature (use <a href="node-api-fingerprints.html#Reaction"><code>Reaction</code></a>
          fingerprint)
      - type: int
        name: signatureVersion
        description: signature version (i.e. fingerprint version)
    errors:
      - code: reactionDescription.ownerAvatar.mediaId.not-found
        description: owner's avatar is not found
  - name: ReactionInfo
    fields:
      - type: String
        name: ownerName
        description: reaction owner's node name
      - type: String
        name: ownerFullName
        description: reaction owner's full name
      - struct: AvatarImage
        name: ownerAvatar
        description: reaction owner's avatar
      - type: String
        name: postingId
        description: ID of the posting
      - type: String
        name: postingRevisionId
        description: ID of the posting revision, if relevant
      - type: String
        name: commentId
        description: ID of the comment, if relevant
      - type: String
        name: commentRevisionId
        description: ID of the comment revision, if relevant
      - type: boolean
        name: negative
        description: <code>true</code>, if the reaction is negative, <code>false</code>, if positive
      - type: int
        name: emoji
        description: reaction code, usually interpreted by clients as emoji code point
      - type: int
        name: moment
      - type: timestamp
        name: createdAt
        description: reaction creation timestamp - the real time when the reaction was created
      - type: timestamp
        name: deadline
        description: if present, the reaction will be erased at this time
      - type: byte[]
        name: signature
        description: >
          the reaction owner signature (use <a href="node-api-fingerprints.html#Reaction"><code>Reaction</code></a>
          fingerprint)
      - type: int
        name: signatureVersion
        description: signature version (i.e. fingerprint version)
      - type: String -> String[]
        name: operations
        description: list of the supported operations (see below) and the corresponding access hints
    operations:
      - name: delete
        description: delete the reaction
  - name: ReactionsSliceInfo
    fields:
      - type: int
        name: before
        description: the slice contains all reactions before this moment, inclusive. May be the far future.
      - type: int
        name: after
        description: the slice contains all reactions after this moment, exclusive. May be the far past.
      - type: int
        name: total
        description: total number of reactions in the whole list
      - struct: ReactionInfo
        array: true
        name: reactions
        description: the reactions
  - name: ReactionTotalInfo
    fields:
      - type: int
        name: emoji
        description: reaction code, usually interpreted by clients as emoji code point
      - type: int
        name: total
        description: total number of reactions with the given code (may be absent)
      - type: float
        name: share
        description: >
          share the reactions with the given code stand from the total number of reactions (may be absent, if
          <code>total</code> is present)
  - name: ReactionTotalsInfo
    fields:
      - struct: ReactionTotalInfo
        array: true
        name: positive
        description: summary of positive reactions
      - struct: ReactionTotalInfo
        array: true
        name: negative
        description: summary of negative reactions
  - name: RegisteredNameSecret
    fields:
      - type: String
        name: name
      - type: String[]
        name: mnemonic
        description: human-friendly mnemonic of the updating key
      - type: String
        name: secret
        description: base64-encoded secret of the updating key
  - name: RemoteMedia
    fields:
      - type: String
        name: id
        description: ID of the media file
      - type: String
        name: hash
        description: SHA-1 hash of the media file
      - type: String
        name: digest
        description: cryptographic digest of the media file
  - name: RemoteMediaInfo
    fields:
      - type: String
        name: id
        description: ID of the media file
      - type: String
        name: hash
        description: SHA-1 hash of the media file
      - type: String
        name: digest
        description: cryptographic digest of the media file
  - name: RemotePosting
    fields:
      - type: String
        name: nodeName
        description: name of the node
      - type: String
        name: postingId
        description: ID of the posting on the node
  - name: RemotePostingVerificationInfo
    fields:
      - type: String
        name: id
        description: asynchronous operation ID
      - type: String
        name: nodeName
      - type: String
        name: postingId
      - type: String
        name: revisionId
      - type: String
        name: status
        description: >
          status of the operation, may be one of:
          <ul>
            <li>
              <code>running</code> - the verification is pending;
            </li>
            <li>
              <code>correct</code> - the signature is correct;
            </li>
            <li>
              <code>incorrect</code> - the signature is incorrect;
            </li>
            <li>
              <code>error</code> - the verification cannot be performed due to an error.
            </li>
          </ul>
      - type: String
        name: errorCode
        description: error code
      - type: String
        name: errorMessage
        description: human-readable error message
  - name: RemoteReactionVerificationInfo
    fields:
      - type: String
        name: id
        description: asynchronous operation ID
      - type: String
        name: nodeName
      - type: String
        name: postingId
      - type: String
        name: reactionOwnerName
        description: node name of the reaction's owner
      - type: String
        name: status
        description: >
          status of the operation, may be one of:
          <ul>
            <li>
              <code>running</code> - the verification is pending;
            </li>
            <li>
              <code>correct</code> - the signature is correct;
            </li>
            <li>
              <code>incorrect</code> - the signature is incorrect;
            </li>
            <li>
              <code>error</code> - the verification cannot be performed due to an error.
            </li>
          </ul>
      - type: String
        name: errorCode
        description: error code
      - type: String
        name: errorMessage
        description: human-readable error message
  - name: RepliedTo
    fields:
      - type: String
        name: id
        description: ID of the comment
      - type: String
        name: revisionId
        description: ID of the comment revision
      - type: String
        name: name
        description: node name of the comment's owner
      - type: String
        name: fullName
        description: full name of the comment's owner
      - struct: AvatarImage
        name: avatar
        description: avatar of the comment's owner
      - type: String
        name: heading
        description: heading of the comment
      - type: byte[]
        name: digest
        description: cryptographic digest of the comment
  - name: Result
    fields:
      - type: String
        name: errorCode
        description: error code
      - type: String
        name: message
        description: human-readable error message
  - name: SettingInfo
    fields:
      - type: String
        name: name
        description: name of the setting
      - type: String
        name: value
        description: value of the setting
  - name: SettingMetaAttributes
    fields:
      - type: String
        name: name
        description: name of the setting
      - type: String
        name: defaultValue
        description: >
          default value of the setting (if absent or <code>null</code>, the built-in default value will be used)
      - type: boolean
        name: privileged
        description: >
          the setting should be privileged (if absent or <code>null</code>, the built-in value of the flag will be used)
  - name: SettingMetaInfo
    fields:
      - type: String
        name: name
        description: name of the setting
      - type: String
        name: type
        description: >
          type of the setting, may be one of:
          <ul>
            <li>
              <code>bool</code> - boolean, may have value <code>true</code> or <code>false</code>
            </li>
            <li>
              <code>Duration</code> - period of time, an non-negative integer followed by a single character
              designating a measurement unit:
              <ul>
                <li><code>s</code> - seconds;</li>
                <li><code>m</code> - minutes;</li>
                <li><code>h</code> - hours;</li>
                <li><code>d</code> - days.</li>
              </ul>
            </li>
            <li>
              <code>int</code> - integer
            </li>
            <li>
              <code>string</code> - string
            </li>
          </ul>
      - type: String
        name: defaultValue
        description: default value of the setting
      - type: boolean
        name: privileged
        description: the setting is privileged - may be changed by server owner only
      - type: String
        name: title
        description: human-friendly description of the setting
      - struct: SettingTypeModifiers
        name: modifiers
        description: >
          additional modifiers that may help to choose a proper UI component for the setting value and to validate the
          input; meaning of the modifiers depend on the setting type
  - name: SettingTypeModifiers
    fields:
      - type: String
        name: min
        description: (<code>int</code>, <code>Duration</code>) minimal value
      - type: String
        name: max
        description: (<code>int</code>, <code>Duration</code>) maximal value
      - type: boolean
        name: multiline
        description: (<code>string</code>) <code>true</code>, if the value is a multiline text
      - type: boolean
        name: never
        description: (<code>Duration</code>) <code>true</code>, if value <code>never</code> is allowed
      - type: boolean
        name: always
        description: (<code>Duration</code>) <code>true</code>, if value <code>always</code> is allowed
  - name: StoryAttributes
    fields:
      - type: String
        name: feedName
        description: name of the feed
      - type: timestamp
        name: publishAt
        description: story publication timestamp - the time the story must be published under in the feed
      - type: boolean
        name: pinned
        description: >
          <code>true</code>, if the story is pinned (should appear before any non-pinned story in the feed),
          <code>false</code> otherwise
      - type: boolean
        name: viewed
        description: value of the <code>viewed</code> flag (<code>null</code>, if the flag is not changed)
      - type: boolean
        name: read
        description: value of the <code>read</code> flag (<code>null</code>, if the flag is not changed)
  - name: StoryInfo
    fields:
      - type: String
        name: id
      - type: String
        name: feedName
        description: name of the feed
      - type: String
        name: storyType
        description: >
          type of the story (see <a href="stories.html">Stories</a> page for description of various story types and
          their meaning)
      - type: timestamp
        name: createdAt
        description: story creation timestamp - the real time when the story was created
      - type: timestamp
        name: publishedAt
        description: story publication timestamp - the time the story is published under in the feed
      - type: boolean
        name: pinned
        description: >
          <code>true</code>, if the story is pinned (should appear before any non-pinned story in the feed),
          <code>false</code> otherwise
      - type: int
        name: moment
      - type: boolean
        name: viewed
        description: <code>true</code>, if the story has been viewed by node owner, <code>false</code> otherwise
      - type: boolean
        name: read
        description: <code>true</code>, if the story has been read by node owner, <code>false</code> otherwise
      - type: String -> String[]
        name: operations
        description: list of the supported operations (see below) and the corresponding access hints
      - struct: AvatarImage
        name: summaryAvatar
        description: avatar of the summary of the story
      - type: String
        name: summary
        description: user-readable summary of the story
      - type: String
        name: trackingId
        description: >
          ID (visible by node admin only) that may be used to update the story viewed/read status without authentication
      - struct: PostingInfo
        name: posting
        description: the posting this story is about (may be absent or contain only ID)
      - struct: CommentInfo
        name: comment
        description: the comment this story is about (may be absent or contain only ID)
      - type: String
        name: remoteNodeName
        description: name of the node this story is about (may be absent)
      - type: String
        name: remoteFullName
        description: full name of the node this story is about (may be absent)
      - type: String
        name: remotePostingId
        description: ID of the posting at remote node this story is about (may be absent)
      - type: String
        name: remoteCommentId
        description: ID of the comment at remote node this story is about (may be absent)
    operations:
      - name: edit
        description: update the story
      - name: delete
        description: delete the story
  - name: SubscriberDescription
    fields:
      - type: String
        name: type
        description: >
          subscription type, (see <code><a href="#SubscriptionDescription">SubscriptionDescription</a>.type</code> for
          the list of possible values)
      - type: String
        name: feedName
        description: feed name, if the subscription type requires one
      - type: String
        name: postingId
        description: posting ID, if the subscription type requires one
      - type: String
        name: ownerFullName
        description: full name of the subscriber
      - struct: AvatarDescription
        name: ownerAvatar
        description: avatar of the subscriber
      - type: timestamp
        name: lastUpdatedAt
        description: timestamp of the latest known state of the object, may be absent
    errors:
      - code: subscriberDescription.type.blank
        description: type is empty
      - code: subscriberDescription.feedName.blank
        description: feed name is empty
      - code: subscriberDescription.feedName.not-found
        description: feed is not found
      - code: subscriberDescription.postingId.blank
        description: posting ID is empty
      - code: subscriberDescription.postingId.not-found
        description: posting is not found
      - code: subscriberDescription.ownerAvatar.mediaId.not-found
        description: subscriber's avatar is not found
  - name: SubscriberInfo
    fields:
      - type: String
        name: id
        description: subscriber ID
      - type: String
        name: type
        description: >
          subscription type, (see <code><a href="#SubscriptionDescription">SubscriptionDescription</a>.type</code> for
          the list of possible values)
      - type: String
        name: feedName
        description: feed name, if the subscription type requires one
      - type: String
        name: postingId
        description: posting ID, if the subscription type requires one
      - type: String
        name: nodeName
        description: name of the subscribed node
      - type: String
        name: fullName
        description: full name of the subscribed node
      - struct: AvatarImage
        name: avatar
        description: avatar of the subscribed node
      - type: timestamp
        name: createdAt
        description: subscription creation timestamp
  - name: SubscriptionDescription
    fields:
      - type: String
        name: type
        description: >
          subscription type, the possible values are:
          <ul>
            <li><code>feed</code> - subscribe to new stories in the feed;</li>
            <li><code>posting</code> - subscribe to updates to the posting;</li>
            <li><code>posting-comments</code> - subscribe to new comments to the posting;</li>
            <li><code>profile</code> - subscribe to updates to the node profile.</li>
          </ul>
      - type: String
        name: feedName
        description: feed name on this node that receives notifications
      - type: String
        name: remoteSubscriberId
        description: ID of the subscriber on the remote node
      - type: String
        name: remoteNodeName
        description: name of the node this node is subscribed to
      - type: String
        name: remoteFullName
        description: full name of the node this node is subscribed to
      - struct: AvatarDescription
        name: remoteAvatar
        description: avatar of the node this node is subscribed to
      - type: String
        name: remoteFeedName
        description: feed name on the remote node, if the subscription type requires one
      - type: String
        name: remotePostingId
        description: posting ID on the remote node, if the subscription type requires one
      - type: String
        name: reason
        description: >
          subscription reason, the well-known values are:
          <ul>
            <li><code>user</code> - node owner asked to subscribe;</li>
            <li><code>mention</code> - node name was mentioned;</li>
            <li><code>comment</code> - node owner commented the posting.</li>
          </ul>
    errors:
      - code: subscriptionDescription.type.blank
        description: type is empty
      - code: subscriptionDescription.feedName.blank
        description: feed name is empty
      - code: subscriptionDescription.feedName.not-found
        description: feed is not found
      - code: subscriptionDescription.remoteSubscriberId.blank
        description: subscriber ID is empty
      - code: subscriptionDescription.remoteSubscriberId.wrong-size
        description: subscriber ID is too long
      - code: subscriptionDescription.remoteNodeName.blank
        description: node name is empty
      - code: subscriptionDescription.remoteNodeName.wrong-size
        description: node name is too long
      - code: subscriptionDescription.remoteAvatar.mediaId.not-found
        description: node avatar is not found
      - code: subscriptionDescription.remoteFeedName.wrong-size
        description: remote feed name is too long
      - code: subscriptionDescription.remotePostingId.wrong-size
        description: posting ID is too long
      - code: subscriptionDescription.reason.blank
        description: subscription reason is empty
  - name: SubscriptionFilter
    fields:
      - struct: RemotePosting
        array: true
        name: postings
        description: list of postings
  - name: SubscriptionInfo
    fields:
      - type: String
        name: id
        description: subscription ID
      - type: String
        name: type
        description: >
          subscription type, (see <code><a href="#SubscriptionDescription">SubscriptionDescription</a>.type</code> for
          the list of possible values)
      - type: String
        name: feedName
        description: feed name on this node that receives notifications
      - type: String
        name: remoteSubscriberId
        description: ID of the subscriber on the remote node
      - type: String
        name: remoteNodeName
        description: name of the node this node is subscribed to
      - type: String
        name: remoteFullName
        description: full name of the node this node is subscribed to
      - struct: AvatarImage
        name: remoteAvatar
        description: avatar of the node this node is subscribed to
      - type: String
        name: remoteFeedName
        description: feed name on the remote node, if the subscription type requires one
      - type: String
        name: remotePostingId
        description: posting ID on the remote node, if the subscription type requires one
      - type: timestamp
        name: createdAt
        description: subscription creation timestamp
      - type: String
        name: reason
        description: >
          subscription reason (see the list of well-known values in
          <a href="#SubscriptionDescription"><code>SubscriptionDescription</code></a><code>.reason</code>
  - name: TokenCreated
    fields:
      - type: String
        name: token
        description: the token
      - type: String[]
        name: permissions
        description: the list of <a href="/overview/permissions.html">permission groups</a> assigned to the token
  - name: TokenInfo
    fields:
      - type: String
        name: token
        description: the token
      - type: boolean
        name: valid
        description: <code>true</code> if the token is valid, <code>false</code> otherwise
      - type: String[]
        name: permissions
        description: >
          The list of <a href="/overview/permissions.html">permission groups</a> assigned to the token. See also the
          <a href="#standard-permission-groups">list of standard permission groups</a>.
  - name: UpdateInfo
    fields:
      - type: boolean
        name: important
        description: <code>true</code>, if the update is important, <code>false</code> (the default) otherwise
      - type: String
        name: description
        description: description of the update
  - name: WhoAmI
    fields:
      - type: String
        name: nodeName
      - type: boolean
        name: nodeNameChanging
        description: <code>true</code> if node name is about to be changed
      - type: String
        name: fullName
        description: node owner's full name
      - type: String
        name: gender
        description: node owners's gender
      - type: String
        name: title
        description: node title
      - struct: AvatarImage
        name: avatar
        description: node owners's avatar

enums:
  - name: OperationStatus
    description: >
      This enum is used to designate the operation status both by the naming server and by the node.
    values:
      - name: WAITING
        description: operation is waiting to be sent to the naming server
      - name: ADDED
        description: operation was accepted by the naming server
      - name: STARTED
        description: the naming server started to proceed the operation
      - name: SUCCEEDED
        description: operation completed successfully
      - name: FAILED
        description: operation failed
      - name: UNKNOWN
        description: operation status is unknown

http-codes:
  - code: 200
    description: No error.
  - code: 201
    description: Object created successfully. The object location is provided in <code>Location:</code> header.
  - code: 400
    description: Validation of the request body failed.
  - code: 401
    description: Invalid authentication token or root secret.
  - code: 403
    description: Authentication required, but not provided.
  - code: 404
    description: Unrecognized request or object not found.
  - code: 405
    description: Method not allowed.
  - code: 409
    description: Operation failed.
  - code: 500
    description: The node configured incorrectly or a bug in the node software; naming service not available.