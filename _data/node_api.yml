objects:
  - name: Activity Reactions
    description: Local registry of all activity in the form of reactions performed by the node.
    requests:
      - url: /activity/reactions/search
        type: POST
        function: searchActivityReactions
        in:
          struct: ActivityReactionFilter
          name: filter
        out:
          struct: ActivityReactionInfo
          array: true
        auth: admin
        description: Get the list of all reactions performed by the node, filtered by some criteria.
  - name: Asynchronous Operations
    description: Asynchronous operations pending or just finished on the node.
    requests:
      - url: /async-operations/remote-posting-verification/{id}
        type: GET
        function: getRemotePostingVerificationStatus
        params:
          - type: String
            name: id
            description: asynchronous operation ID
        out:
          struct: RemotePostingVerificationInfo
        auth: admin
        description: >
          Get the status of the asynchronous operation that performs verification of a remote posting signature.
        errors:
          - code: async-operation.not-found
            description: async operation with the given ID is not found
      - url: /async-operations/remote-reaction-verification/{id}
        type: GET
        function: getRemoteReactionVerificationStatus
        params:
          - type: String
            name: id
            description: asynchronous operation ID
        out:
          struct: RemoteReactionVerificationInfo
        auth: admin
        description: >
          Get the status of the asynchronous operation that performs verification of the signature of a reaction to
          a remote posting.
        errors:
          - code: async-operation.not-found
            description: async operation with the given ID is not found
  - name: Avatars
    description: >
      Avatars of the node's owner. The list of avatars is ordered using ordinals that every avatar has.
      <br><br>
      Every avatar has a shape. It is stored and returned solely for client's interpretation. The shape has no meaning
      for the node and does not affect the avatar image stored at the node.
    requests:
      - url: /avatars
        type: GET
        function: getAvatars
        out:
          struct: AvatarInfo
          array: true
        description: Get the list of avatars in the ascending order of their ordinals.
      - url: /avatars
        type: POST
        function: createAvatar
        in:
          struct: AvatarAttributes
          name: avatar
        out:
          struct: AvatarInfo
        auth: admin
        description: >
          Create a new avatar from a public media file that exists on the node. A new public media file is created for
          the avatar. If the avatar's ordinal is not provided in the input, the avatar is assigned an ordinal that is
          greater than ordinals of all existing avatars.
        errors:
          - code: media.storage-error
            description: media file cannot be stored
          - code: avatar.media-unsupported
            description: the type of the source media file is not supported for avatars
      - url: /avatars/{id}
        type: GET
        function: getAvatar
        params:
          - type: String
            name: id
            description: avatar ID
        out:
          struct: AvatarInfo
        description: Get an individual avatar.
        errors:
          - code: avatar.not-found
            description: avatar is not found
      - url: /avatars/{id}
        type: DELETE
        function: deleteAvatar
        params:
          - type: String
            name: id
            description: avatar ID
        out:
          struct: Result
        auth: admin
        description: Delete an avatar.
        errors:
          - code: avatar.not-found
            description: avatar is not found
      - url: /avatars/reorder
        type: POST
        function: reorderAvatars
        in:
          struct: AvatarsOrdered
          name: order
        out:
          struct: AvatarOrdinal
          array: true
        auth: admin
        description: >
          Reorder avatars. Every avatar mentioned in the input is assigned an ordinal in ascending order as they appear
          in the input. Ordinals of avatars not mentioned in the input are not touched.
        errors:
          - code: avatar.not-found
            description: avatar is not found
  - name: Blocked Instants
    description: It is possible to block creation of some types of stories in the instants feed.
    requests:
      - url: /blocked-instants
        type: POST
        function: blockInstant
        in:
          struct: BlockedInstantAttributes
          name: instant
        out:
          struct: BlockedInstantInfo
        auth: admin
        description: >
          Blocks creation of instants of the given story type, related to the given entry, optionally unblocking at
          the given time in the future.
        errors:
          - code: entry.not-found
            description: entry is not found
      - url: /blocked-instants/{id}
        type: GET
        function: getBlockedInstant
        params:
          - type: String
            name: id
            description: ID of the blocked instant
        out:
          struct: BlockedInstantInfo
        auth: admin
        description: Get details about the given blocked instant.
        errors:
          - code: blocked-instant.not-found
            description: blocked instant is not found
      - url: /blocked-instants/{id}
        type: DELETE
        function: unblockInstant
        params:
          - type: String
            name: id
            description: ID of the blocked instant
        out:
          struct: Result
        auth: admin
        description: Unblock the given instant.
        errors:
          - code: blocked-instant.not-found
            description: blocked instant is not found
      - url: /blocked-instants/search
        type: POST
        function: searchBlockedInstants
        in:
          struct: BlockedInstantFilter
          name: filter
        out:
          struct: BlockedInstantInfo
          array: true
        auth: admin
        description: Search blocked instants by the given criteria.
  - name: Blocked Users
    description: >
      It is possible to block particular nodes from performing some operations on this node, even if they are otherwise
      permitted to do so. It is also possible to mark some nodes to be invisible (in discussions, for example), the
      client should fetch the list of invisible nodes to perform filtering on the client side.
    requests:
      - url: /people/blocked-users
        type: POST
        function: blockUser
        in:
          struct: BlockedUserAttributes
          name: user
        out:
          struct: BlockedUserInfo
        auth: admin
        description: >
          Blocks the given node from performing the given operations, in a particular posting or globally, optionally
          unblocking at the given time in the future.
        errors:
          - code: entry.not-found
            description: entry is not found
      - url: /people/blocked-users/{id}
        type: GET
        function: getBlockedUser
        params:
          - type: String
            name: id
            description: ID of the blocked user
        out:
          struct: BlockedUserInfo
        auth: optional
        description: Get details about the given blocked user.
        errors:
          - code: blocked-user.not-found
            description: blocked user is not found
      - url: /people/blocked-users/{id}
        type: DELETE
        function: unblockUser
        params:
          - type: String
            name: id
            description: ID of the blocked user
        out:
          struct: Result
        auth: admin
        description: Unblock the given user.
        errors:
          - code: blocked-user.not-found
            description: blocked user is not found
      - url: /people/blocked-users/search
        type: POST
        function: searchBlockedUsers
        in:
          struct: BlockedUserFilter
          name: filter
        out:
          struct: BlockedUserInfo
          array: true
        auth: optional
        description: Search blocked users by the given criteria.
      - url: /people/blocked-users/checksums
        type: GET
        function: getBlockedUsersChecksums
        out:
          struct: BlockedUsersChecksums
        auth: admin
        description: >
          Get checksums of the information about the blocked users. This request may be used to quickly detect the
          changes in the blocked users list to update the cache on the client side.
  - name: Blocked-by Users
    description: >
      The node receives notifications from nodes that blocked it. This information is stored on the node and can be
      requested.
    requests:
      - url: /people/blocked-by-users/{id}
        type: GET
        function: getBlockedByUser
        params:
          - type: String
            name: id
            description: ID of the blocked-by user
        out:
          struct: BlockedByUserInfo
        auth: optional
        description: Get details about the given node that blocked this node.
        errors:
          - code: blocked-by-user.not-found
            description: blocked-by user is not found
      - url: /people/blocked-by-users/search
        type: POST
        function: searchBlockedByUsers
        in:
          struct: BlockedByUserFilter
          name: filter
        out:
          struct: BlockedByUserInfo
          array: true
        auth: optional
        description: Search nodes that blocked this node, by the given criteria.
  - name: Cartes
    description: >
      <a href="authentication.html#carte">Cartes</a> - cryptographic tokens used to authenticate on any node.
    requests:
      - url: /cartes
        type: POST
        function: createCartes
        in:
          struct: CarteAttributes
          name: attributes
        out:
          struct: CarteSet
        auth: admin
        description: >
          Create a set of cartes with the given attributes. Cartes in the sequence correspond to successive periods of
          time.
      - url: /cartes/verify
        type: POST
        function: verifyCarte
        in:
          struct: ClientCarte
          name: clientCarte
        out:
          struct: CarteVerificationInfo
        auth: admin
        description: >
          Verify if the given carte may be used for authentication on this node. Additionally, if
          <code>clientName</code> is provided, it is compared to the carte owner's name.
        errors:
          - code: carte.wrong-client
            description: carte authenticates a different node name
  - name: Comments
    description: Comments to a posting.
    requests:
      - url: /postings/{postingId}/comments
        type: GET
        function: getCommentsSlice
        params:
          - type: String
            name: postingId
            description: ID of the posting
        query:
          - type: long
            name: after
            optional: true
            description: filter comments posted strongly after this moment
          - type: long
            name: before
            optional: true
            description: filter comments posted at or before this moment
          - type: int
            name: limit
            optional: true
            description: maximum number of comments returned
        out:
          struct: CommentsSliceInfo
        auth: optional
        description: >
          Get a slice of the list of comments, delimited by <code>before</code> or <code>after</code> moments (but not
          both) and the given <code>limit</code>. If neither <code>before</code> nor <code>after</code> are provided,
          the latest comments are returned. The node may decide to return fewer comments than the given
          <code>limit</code>. The stories are always sorted by moment, ascending.
        errors:
          - code: posting.not-found
            description: there is no posting with the given ID
          - code: comments.before-after-exclusive
            description: <code>before</code> and <code>after</code> parameters are not allowed together
          - code: limit.invalid
            description: <code>limit</code> parameter has an invalid value
      - url: /postings/{postingId}/comments
        type: POST
        function: createComment
        params:
          - type: String
            name: postingId
            description: ID of the posting
        in:
          struct: CommentText
          name: comment
        out:
          struct: CommentCreated
        auth: required or signature
        description: >
          Create a comment from the given text and add it to the given posting. The comment owner must authenticate in
          some way. If the comment is not signed, it will be kept for a limited period of time and then erased. If
          authenticated as admin, the node signs the comment.
        errors:
          - code: posting.not-found
            description: there is no posting with the given ID
          - code: posting.not-signed
            description: the posting is not signed, so it is impossible to add comments to it
          - code: avatar.not-found
            description: there is no avatar with the given ID
          - code: media.not-found
            description: there is no media with the given ID
          - code: media.not-compressed
            description: >
              media attachment is not compressed as the node requires, the parameters of the desired compression are
              returned in <code><a href="#PostingFeatures">PostingFeatures</a></code>
      - url: /postings/{postingId}/comments/{commentId}
        type: GET
        function: getComment
        params:
          - type: String
            name: postingId
            description: ID of the posting
          - type: String
            name: commentId
            description: ID of the comment
        query:
          - type: String
            name: include
            optional: true
            description:
            flags:
              - name: source
                description: source text of the comment
        out:
          struct: CommentInfo
        auth: optional
        description: Get an individual comment.
        errors:
          - code: posting.not-found
            description: there is no posting with the given ID
          - code: comment.not-found
            description: there is no comment with the given ID
          - code: comment.wrong-posting
            description: the comment is not related to the given posting
      - url: /postings/{postingId}/comments
        type: PUT
        function: updateAllComments
        params:
          - type: String
            name: postingId
            description: ID of the posting
        in:
          struct: CommentMassAttributes
          name: attributes
        out:
          struct: Result
        auth: optional
        description: >
          Update operation overrides for all comments in the posting.
        errors:
          - code: posting.not-found
            description: there is no posting with the given ID
      - url: /postings/{postingId}/comments/{commentId}
        type: PUT
        function: updateComment
        params:
          - type: String
            name: postingId
            description: ID of the posting
          - type: String
            name: commentId
            description: ID of the comment
        in:
          struct: CommentText
          name: comment
        out:
          struct: CommentInfo
        auth: required or signature
        description: >
          Update the comment, creating a new revision of it. The text is processed just like in the <code>POST</code>
          request.
        errors:
          - code: posting.not-found
            description: there is no posting with the given ID
          - code: comment.not-found
            description: there is no comment with the given ID
          - code: comment.wrong-posting
            description: the comment is not related to the given posting
          - code: avatar.not-found
            description: there is no avatar with the given ID
          - code: media.not-found
            description: there is no media with the given ID
          - code: media.not-compressed
            description: >
              media attachment is not compressed as the node requires, the parameters of the desired compression are
              returned in <code><a href="#PostingFeatures">PostingFeatures</a></code>
      - url: /postings/{postingId}/comments/{commentId}
        type: DELETE
        function: deleteComment
        params:
          - type: String
            name: postingId
            description: ID of the posting
          - type: String
            name: commentId
            description: ID of the comment
        out:
          struct: CommentTotalInfo
        auth: required
        description: >
          Delete the comment. The comment may not be purged from the database immediately, but preserved for some period
          of time to give a chance to restore it.
        errors:
          - code: posting.not-found
            description: there is no posting with the given ID
          - code: comment.not-found
            description: there is no comment with the given ID
          - code: comment.wrong-posting
            description: the comment is not related to the given posting
      - url: /postings/{postingId}/comments/{commentId}/attached
        type: GET
        function: getPostingsAttachedToComment
        params:
          - type: String
            name: postingId
            description: ID of the posting
          - type: String
            name: commentId
            description: ID of the comment
        out:
          struct: PostingInfo
          array: true
        auth: optional
        description: Get all postings linked to media attached to the given comment.
        errors:
          - code: posting.not-found
            description: there is no posting with the given ID
          - code: comment.not-found
            description: there is no comment with the given ID
          - code: comment.wrong-posting
            description: the comment is not related to the given posting
  - name: Comment Revisions
    description: All revisions of the comment.
    requests:
      - url: /postings/{postingId}/comments/{commentId}/revisions
        type: GET
        function: getCommentRevisions
        params:
          - type: String
            name: postingId
            description: ID of the posting
          - type: String
            name: commentId
            description: ID of the comment
        out:
          struct: CommentRevisionInfo
          array: true
        auth: optional
        description: Get all revisions of the comment.
        errors:
          - code: comment.not-found
            description: there is no comment with the given ID
          - code: comment.wrong-posting
            description: the comment is not related to the given posting
      - url: /postings/{postingId}/comments/{commentId}/revisions/{id}
        type: GET
        function: getCommentRevision
        params:
          - type: String
            name: postingId
            description: ID of the posting
          - type: String
            name: commentId
            description: ID of the comment
          - type: String
            name: id
            description: ID of the revision
        out:
          struct: CommentRevisionInfo
        auth: optional
        description: Get an individual revision of the comment.
        errors:
          - code: comment.not-found
            description: there is no comment with the given ID
          - code: comment.wrong-posting
            description: the comment is not related to the given posting
          - code: comment-revision.not-found
            description: there is no revision with the given ID
  - name: Comment Reactions
    description: Reactions ("Likes") - simple textless answers to a comment.
    requests:
      - url: /postings/{postingId}/comments/{commentId}/reactions
        type: POST
        function: createCommentReaction
        params:
          - type: String
            name: postingId
            description: ID of the posting
          - type: String
            name: commentId
            description: ID of the comment
        in:
          struct: ReactionDescription
          name: reaction
        out:
          struct: ReactionCreated
        auth: required or signature
        description: >
          Add a reaction to the given comment. The reaction owner must authenticate in some way. Only one reaction is
          allowed from each owner to a particular comment. If a reaction from the same owner to this comment already
          exists, it is overwritten. If the reaction is not signed, the reaction will be kept for a limited period of
          time and then erased (the previous reaction of the same owner will be restored, if any).
        errors:
          - code: comment.not-found
            description: there is no comment with the given ID
          - code: comment.wrong-posting
            description: the comment is not related to the given posting
          - code: comment.not-signed
            description: cannot add a reaction to an unsigned comment
          - code: reaction.not-accepted
            description: the reaction is not acceptable
          - code: avatar.not-found
            description: there is no avatar with the given ID
      - url: /postings/{postingId}/comments/{commentId}/reactions/{ownerName}
        type: PUT
        function: updateCommentReaction
        params:
          - type: String
            name: postingId
            description: ID of the posting
          - type: String
            name: commentId
            description: ID of the comment
          - type: String
            name: ownerName
            description: reaction owner node name
        in:
          struct: ReactionOverride
          name: reaction
        out:
          struct: ReactionInfo
        auth: optional
        description: >
          Update the reaction's operations or set operations' overrides.
        errors:
          - code: posting.not-found
            description: there is no posting with the given ID
          - code: comment.not-found
            description: there is no comment with the given ID
          - code: comment.wrong-posting
            description: the comment is not related to the given posting
      - url: /postings/{postingId}/comments/{commentId}/reactions
        type: GET
        function: getCommentReactionsSlice
        params:
          - type: String
            name: postingId
            description: ID of the posting
          - type: String
            name: commentId
            description: ID of the comment
        query:
          - type: boolean
            name: negative
            optional: true
            description: <code>true</code>, to filter negative reactions, <code>false</code>, to filter positive ones
          - type: int
            name: emoji
            optional: true
            description: filter by reaction code, usually interpreted by clients as emoji code point
          - type: long
            name: before
            optional: true
            description: filter reactions created at or before this moment
          - type: int
            name: limit
            optional: true
            description: maximum number of reactions returned
        out:
          struct: ReactionsSliceInfo
        auth: optional
        description: >
          Get a slice of the list of reactions to the given comment, optionally filtered by reaction type, delimited by
          <code>before</code> moment and the given <code>limit</code>. If <code>before</code> is not provided,
          the latest reactions are returned. The node may decide to return fewer reactions than the given
          <code>limit</code>. The reactions are always sorted by moment, descending.
        errors:
          - code: comment.not-found
            description: there is no comment with the given ID
          - code: comment.wrong-posting
            description: the comment is not related to the given posting
          - code: limit.invalid
            description: <code>limit</code> parameter has an invalid value
      - url: /postings/{postingId}/comments/{commentId}/reactions/{ownerName}
        type: GET
        function: getCommentReaction
        params:
          - type: String
            name: postingId
            description: ID of the posting
          - type: String
            name: commentId
            description: ID of the comment
          - type: String
            name: ownerName
            description: reaction owner node name
        out:
          struct: ReactionInfo
        auth: optional
        description: >
          Get the detailed information about the reaction of the given owner to the given comment. If no reaction with
          such an owner exists, an empty structure with just <code>commentId</code> is returned.
        errors:
          - code: comment.not-found
            description: there is no comment with the given ID
          - code: comment.wrong-posting
            description: the comment is not related to the given posting
      - url: /postings/{postingId}/comments/{commentId}/reactions
        type: DELETE
        function: deleteAllCommentReactions
        params:
          - type: String
            name: postingId
            description: ID of the posting
          - type: String
            name: commentId
            description: ID of the comment
        out:
          struct: Result
        auth: admin
        description: Delete all reactions to the given comment.
        errors:
          - code: comment.not-found
            description: there is no comment with the given ID
          - code: comment.wrong-posting
            description: the comment is not related to the given posting
      - url: /postings/{postingId}/comments/{commentId}/reactions/{ownerName}
        type: DELETE
        function: deleteCommentReaction
        params:
          - type: String
            name: postingId
            description: ID of the posting
          - type: String
            name: commentId
            description: ID of the comment
          - type: String
            name: ownerName
            description: reaction owner node name
        out:
          struct: ReactionTotalsInfo
        auth: optional
        description: Delete the reaction of the given owner to the given comment.
        errors:
          - code: comment.not-found
            description: there is no comment with the given ID
          - code: comment.wrong-posting
            description: the comment is not related to the given posting
  - name: Comment Reaction Totals
    description: Summary of reactions to a comment.
    requests:
      - url: /postings/{postingId}/comments/{commentId}/reaction-totals
        type: GET
        function: getCommentReactionTotals
        params:
          - type: String
            name: postingId
            description: ID of the posting
          - type: String
            name: commentId
            description: ID of the comment
        out:
          struct: ReactionTotalsInfo
        auth: optional
        description: Get a summary of reactions to the comment given.
        errors:
          - code: comment.not-found
            description: there is no comment with the given ID
          - code: comment.wrong-posting
            description: the comment is not related to the given posting
  - name: Contacts
    description: Information about all nodes having a relationship with the node.
    requests:
      - url: /people/contacts
        type: GET
        function: getContacts
        query:
          - type: String
            name: query
            optional: true
            description: the search query
          - type: int
            name: limit
            optional: true
            description: maximum number of contacts returned
        out:
          struct: ContactInfo
          array: true
        auth: admin
        description: >
          Search for contacts matching the search <code>query</code>. Every space-delimited word in the query must match
          case-insensitively a beginning of the contact's node name or a beginning of any space-delimited word in
          the contact's full name. The order of words is not significant.
          <br><br>
          The node may decide to return fewer contacts than the given <code>limit</code>.
          <br><br>
          The contacts are sorted by <i>social distance</i> from the node, which depends on their subscription and
          friendship status and the number of recent reactions and comments.
        errors:
          - code: limit.invalid
            description: <code>limit</code> parameter has an invalid value
  - name: Credentials
    description: Credentials used to authenticate the administrator of the node.
    requests:
      - url: /credentials
        type: GET
        function: checkCredentials
        out:
          struct: CredentialsCreated
        description: Check whether the credentials are initialized already.
      - url: /credentials
        type: POST
        function: createCredentials
        in:
          struct: Credentials
          name: credentials
        out:
          struct: Result
        description: >
          Initialize credentials if they are not set yet. Note that this operation can be executed without
          authentication, so this should be done as soon as possible after the node installation. Sign in is not allowed
          until the credentials are set.
        errors:
          - code: credentials.already-created
            description: credentials are already created
      - url: /credentials
        type: PUT
        function: updateCredentials
        in:
          struct: CredentialsChange
          name: credentials
        out:
          struct: Result
        description: >
          Update credentials. Either old password or credentials reset token should be set in the input for the
          operation to succeed. Credentials reset token is not related to the authentication token and usually is
          sent to the user by E-mail.
        errors:
          - code: credentials.login-incorrect
            description: login incorrect (the old password is wrong)
          - code: credentials.wrong-reset-token
            description: credentials reset token is wrong
          - code: credentials.reset-token-expired
            description: credentials reset token is expired
      - url: /credentials
        type: DELETE
        function: deleteCredentials
        out:
          struct: Result
        auth: root admin
        description: Delete credentials.
      - url: /credentials/reset
        type: POST
        function: resetCredentials
        out:
          struct: EmailHint
        description: >
          The node generates credentials reset token that is sent to the node admin by E-mail or using any other way
          that is defined for recovery of credentials. This token then may be used to change the credentials without
          knowing the password.
        errors:
          - code: credentials.email-not-set
            description: E-mail address is not set for the node
  - name: Deleted Postings
    description: >
      All deleted postings, that are not purged from the database yet.
    requests:
      - url: /deleted-postings
        type: GET
        function: getDeletedPostings
        query:
          - type: int
            name: page
            optional: true
            description: page number, 0 by default
          - type: int
            name: limit
            optional: true
            description: page size (maximum number of postings returned), the default is defined by the node
        out:
          struct: PostingInfo
          array: true
        auth: admin
        description: >
          Get the list of deleted postings, page by page. The node may decide to use a smaller page size than the given
          <code>limit</code>. The postings are always sorted by the deletion timestamp, descending.
        errors:
          - code: page.invalid
            description: <code>page</code> parameter has an invalid value
          - code: limit.invalid
            description: <code>limit</code> parameter has an invalid value
      - url: /deleted-postings/{id}
        type: GET
        function: getDeletedPosting
        params:
          - type: String
            name: id
            description: ID of the posting
        out:
          struct: PostingInfo
        auth: admin
        description: Get an individual deleted posting.
        errors:
          - code: posting.not-found
            description: there is no deleted posting with the given ID
      - url: /deleted-postings/{id}/restore
        type: POST
        function: restoreDeletedPosting
        params:
          - type: String
            name: id
            description: ID of the posting
        out:
          struct: PostingInfo
        auth: admin
        description: >
          Restore a posting. A new revision is created with the same content as in the latest revision.
        errors:
          - code: posting.not-found
            description: there is no posting with the given ID
  - name: Deleted Posting Revisions
    description: >
      All revisions of the deleted posting.
    requests:
      - url: /deleted-postings/{postingId}/revisions
        type: GET
        function: getDeletePostingRevisions
        params:
          - type: String
            name: postingId
            description: ID of the posting
        query:
          - type: int
            name: limit
            optional: true
            description: maximum number of revisions returned
        out:
          struct: PostingRevisionInfo
          array: true
        auth: optional
        description: >
          Get all revisions of the deleted posting, but not more than <code>limit</code>. The node may decide to return
          fewer revisions than the given <code>limit</code>.
        errors:
          - code: posting.not-found
            description: there is no posting with the given ID
      - url: /deleted-postings/{postingId}/revisions/{id}
        type: GET
        function: getDeletedPostingRevision
        params:
          - type: String
            name: postingId
            description: ID of the posting
          - type: String
            name: id
            description: ID of the revision
        out:
          struct: PostingRevisionInfo
        auth: optional
        description: Get an individual revision of the deleted posting.
        errors:
          - code: posting.not-found
            description: there is no posting with the given ID
          - code: posting-revision.not-found
            description: there is no revision with the given ID
      - url: /postings/{postingId}/revisions/{id}/restore
        type: POST
        function: restoreDeletedPostingRevision
        params:
          - type: String
            name: postingId
            description: ID of the posting
          - type: String
            name: id
            description: ID of the revision
        out:
          struct: PostingRevisionInfo
        auth: admin
        description: >
          Restore a posting at a particular revision. A new revision is created with the same content as in the given
          revision.
        errors:
          - code: posting.not-found
            description: there is no posting with the given ID
          - code: posting-revision.not-found
            description: there is no revision with the given ID
          - code: posting-revision.already-current
            description: the given revision is already the current one
  - name: Domains
    description: >
      One instance of Moera node software can serve several virtual nodes. These virtual nodes are called <i>domains</i>
      and distinguished by the hostname passed in the HTTP request. Each virtual node has <i>node ID</i>, it is used in
      the database to designate the data that belongs to a particular node. The hostname is mapped to the node ID when
      the request is processed, using the list of registered domains. If there is no domain with such a name, the
      special <code>_default_</code> domain is used.
    requests:
      - url: /domains
        type: GET
        function: getDomains
        out:
          struct: DomainInfo
          array: true
        auth: root admin
        description: Get the list of registered domains.
      - url: /domains/{name}
        type: GET
        function: getDomain
        params:
          - type: String
            name: name
            description: domain name
        out:
          struct: DomainInfo
        auth: root admin or none
        description: >
          Get information about the domain with the given hostname. If domain registration for this server is public,
          this request does not require authentication.
        errors:
          - code: domain.not-found
            description: there is no domain with the given hostname
      - url: /domains
        type: POST
        function: createDomain
        in:
          struct: DomainAttributes
          name: domain
        out:
          struct: DomainInfo
        auth: root admin or none
        description: >
          Create a new domain with the given hostname. If <code>nodeId</code> is not passed, it is generated
          automatically. If domain registration for this server is public, this request does not require authentication.
        errors:
          - code: domain.name.blank
            description: the domain name is empty
          - code: domain.already-exists
            description: a domain with the given hostname already exists
          - code: domain.node-id-used
            description: a domain with the given node ID already exists
      - url: /domains/{name}
        type: PUT
        function: updateDomain
        params:
          - type: String
            name: name
            description: domain's hostname
        in:
          struct: DomainAttributes
          name: domain
        out:
          struct: DomainInfo
        auth: root admin
        description: >
          Update the domain with the given hostname. If the new hostname is not passed, the old hostname is preserved.
          (Note that you cannot pass a new name for the default hostname, because it cannot be renamed and
          <code>_default_</code> is not a valid hostname. Skip this field if you want to update the default hostname.)
          If <code>nodeId</code> is not passed, it is generated automatically.
        errors:
          - code: domain.not-found
            description: there is no domain with the given hostname
          - code: domain.cannot-rename-default
            description: cannot change the name of the default domain
      - url: /domains/{name}
        type: DELETE
        function: deleteDomain
        params:
          - type: String
            name: name
            description: domain name
        out:
          struct: Result
        auth: root admin
        description: >
          Delete the domain with the given hostname. This operation deletes the domain record only, the user's data
          related to the domain is preserved.
        errors:
          - code: domain.not-found
            description: there is no domain with the given hostname
          - code: domain.cannot-delete-default
            description: cannot delete the default domain
      - url: /domains/available
        type: GET
        function: isDomainAvailable
        query:
          - type: String
            name: nodeName
            description: node name
        out:
          struct: DomainAvailable
        description: >
          Get an available domain name recommended for the given node name. The domain name is usually chosen to be
          close to the node name in English transcription. If domain registration for this server is not public, this
          request is not accessible.
  - name: Drafts
    description: >
      All drafts. This is an universal interface for managing all types for drafts to all types of entries. Drafts of
      entries located on remote nodes are all stored on the home node.
    requests:
      - url: /drafts
        type: GET
        function: getDrafts
        query:
          - enum: DraftType
            name: draftType
            description: type of the drafts
          - type: String
            name: nodeName
            description: name of the node the drafts are related to
          - type: String
            name: postingId
            optional: true
            description: ID of the posting, mandatory for all types, except <code>new-posting</code>
          - type: String
            name: commentId
            optional: true
            description: ID of the comment, mandatory for <code>comment-update</code> type
          - type: int
            name: page
            optional: true
            description: page number, 0 by default
          - type: int
            name: limit
            optional: true
            description: page size (maximum number of postings returned), the default is defined by the node
        out:
          struct: DraftInfo
          array: true
        auth: admin
        description: >
          Get the list of drafts, page by page, filtered by the given criteria. The node may decide to use a smaller
          page size than the given <code>limit</code>. The drafts are always sorted by the creation timestamp,
          descending.
        errors:
          - code: page.invalid
            description: <code>page</code> parameter has an invalid value
          - code: limit.invalid
            description: <code>limit</code> parameter has an invalid value
      - url: /drafts
        type: POST
        function: createDraft
        in:
          struct: DraftText
          name: draft
        out:
          struct: DraftInfo
        auth: admin
        description: Create a new draft from the text given.
        errors:
          - code: avatar.not-found
            description: there is no avatar with the given ID
          - code: media.not-found
            description: there is no media with the given ID
      - url: /drafts/{id}
        type: GET
        function: getDraft
        params:
          - type: String
            name: id
            description: ID of the draft
        out:
          struct: DraftInfo
        auth: admin
        description: Get an individual draft.
        errors:
          - code: draft.not-found
            description: there is no draft with the given ID
      - url: /drafts/{id}
        type: PUT
        function: updateDraft
        params:
          - type: String
            name: id
            description: ID of the draft
        in:
          struct: DraftText
          name: draft
        out:
          struct: DraftInfo
        auth: admin
        description: Update the draft.
        errors:
          - code: draft.not-found
            description: there is no draft with the given ID
          - code: media.not-found
            description: there is no media with the given ID
      - url: /drafts/{id}
        type: DELETE
        function: deleteDraft
        params:
          - type: String
            name: id
            description: ID of the draft
        out:
          struct: Result
        auth: admin
        description: >
          Delete the draft.
        errors:
          - code: draft.not-found
            description: there is no draft with the given ID
  - name: Features
    description: >
      Information about features supported by the node.
    requests:
      - url: /features
        type: GET
        function: getFeatures
        out:
          struct: Features
        auth: optional
        description: Get information about features supported by the node.
  - name: Feeds
    description: >
      Feed is a set of stories collected for some purpose. The stories are sorted by <a href="moment.html">moment</a>,
      descending.
      </p><p>
      These are the standard feeds that have special meaning:
      <ul>
        <li><code>timeline</code> - the main feed of publications;</li>
        <li><code>instant</code> - the feed of instant notifications;</li>
        <li><code>news</code> - the main feed of publications gathered from other nodes.</li>
      </ul>
    requests:
      - url: /feeds
        type: GET
        function: getFeeds
        out:
          struct: FeedInfo
          array: true
        auth: admin or none
        description: Get general information about all feeds accessible by client.
      - url: /feeds/{feedName}
        type: GET
        function: getFeedGeneral
        params:
          - type: String
            name: feedName
            description: name of the feed
        out:
          struct: FeedInfo
        auth: admin or none
        description: Get general information about the feed.
        errors:
          - code: feed.not-found
            description: there is no accessible feed with this name
      - url: /feeds/{feedName}/status
        type: GET
        function: getFeedStatus
        params:
          - type: String
            name: feedName
            description: name of the feed
        out:
          struct: FeedStatus
        auth: admin or none
        description: Get information about the total number and number of non-read and non-viewed stories in the feed.
        errors:
          - code: feed.not-found
            description: there is no accessible feed with this name
      - url: /feeds/{feedName}/status
        type: PUT
        function: updateFeedStatus
        params:
          - type: String
            name: feedName
            description: name of the feed
        in:
          struct: FeedStatusChange
          name: change
        out:
          struct: FeedStatus
        auth: admin
        description: Update information about non-read and non-viewed stories in the feed.
        errors:
          - code: feed.not-found
            description: there is no accessible feed with this name
      - url: /feeds/{feedName}/stories
        type: GET
        function: getFeedSlice
        params:
          - type: String
            name: feedName
            description: name of the feed
        query:
          - type: long
            name: after
            optional: true
            description: filter stories posted strongly after this moment
          - type: long
            name: before
            optional: true
            description: filter stories posted at or before this moment
          - type: int
            name: limit
            optional: true
            description: maximum number of stories returned
        out:
          struct: FeedSliceInfo
        auth: admin or none
        description: >
          Get a slice of the feed, delimited by <code>before</code> or <code>after</code> moments (but not both) and
          the given <code>limit</code>. If neither <code>before</code> nor <code>after</code> are provided, the latest
          stories are returned. The node may decide to return fewer stories than the given <code>limit</code>. The
          stories are always sorted by moment, descending.
        errors:
          - code: feed.not-found
            description: there is no accessible feed with this name
          - code: feed.before-after-exclusive
            description: <code>before</code> and <code>after</code> parameters are not allowed together
          - code: limit.invalid
            description: <code>limit</code> parameter has an invalid value
  - name: Friend Groups
    description: >
      A friend may be member of one or more groups of friends. Each group as an ID and title. The group with a title
      <code>t:friends</code> is a standard group "Friends" that is created automatically for every node.
    requests:
      - url: /people/friends/groups
        type: GET
        function: getFriendGroups
        out:
          struct: FriendGroupInfo
          array: true
        auth: optional
        description: Get the list of all groups of friends that exist on the node.
      - url: /people/friends/groups/{id}
        type: GET
        function: getFriendGroup
        params:
          - type: String
            name: id
            description: ID of the group of friends
        out:
          struct: FriendGroupInfo
        auth: optional
        description: Get the information about the group of friends.
        errors:
          - code: friend-group.not-found
            description: the group of friends is not found
      - url: /people/friends/groups
        type: POST
        function: createFriendGroup
        in:
          struct: FriendGroupDescription
          name: friendGroup
        out:
          struct: FriendGroupInfo
        auth: admin
        description: Create a group of friends.
      - url: /people/friends/groups/{id}
        type: PUT
        function: updateFriendGroup
        params:
          - type: String
            name: id
            description: ID of the group of friends
        in:
          struct: FriendGroupDescription
          name: friendGroup
        out:
          struct: FriendGroupInfo
        auth: admin
        description: Update the details of the group of friends.
        errors:
          - code: friend-group.not-found
            description: the group of friends is not found
      - url: /people/friends/groups/{id}
        type: DELETE
        function: deleteFriendGroup
        params:
          - type: String
            name: id
            description: ID of the group of friends
        out:
          struct: Result
        auth: admin
        description: Delete the group of friends.
        errors:
          - code: friend-group.not-found
            description: the group of friends is not found
  - name: Friends
    description: >
      Friends are nodes that may have special permissions on this node. It is possible to write "friends only" posts or
      to enable commenting to friends or to a group of friends only etc.
    requests:
      - url: /people/friends
        type: GET
        function: getFriends
        query:
          - type: String
            name: groupId
            optional: true
            description: ID of a group of friends
        out:
          struct: FriendInfo
          array: true
        auth: optional
        description: Get the list of all friends of the node or friends belonging to a particular group.
        errors:
          - code: friend-group.not-found
            description: the group of friends is not found
      - url: /people/friends/{name}
        type: GET
        function: getFriend
        params:
          - type: String
            name: name
            description: name of the node
        out:
          struct: FriendInfo
        auth: optional
        description: Get the friendship information for the node given.
      - url: /people/friends
        type: PUT
        function: updateFriends
        in:
          struct: FriendDescription
          array: true
          name: friends
        out:
          struct: FriendInfo
          array: true
        auth: admin
        description: >
          Update the friendship status of the nodes passed in the input. If some node passed in the input is not
          a member of some of the groups of friends listed for it, the node is added to them. If it is a member of some
          groups of friends that are not listed for it, the node is removed from them.
  - name: Friend-ofs
    description: >
      The node receives notifications from nodes that added it to their friends. This information is stored on the node
      and can be requested.
    requests:
      - url: /people/friend-ofs
        type: GET
        function: getFriendOfs
        out:
          struct: FriendOfInfo
          array: true
        auth: optional
        description: Get the list of all nodes that added this node to their friends.
      - url: /people/friend-ofs/{name}
        type: GET
        function: getFriendOf
        params:
          - type: String
            name: name
            description: name of the node
        out:
          struct: FriendOfInfo
        auth: optional
        description: Get the information for the node given, whether it has added this node to its friends.
  - name: Grants
    description: >
      The node may grant administrative permissions (of a limited scope) on itself to other nodes.
    requests:
      - url: /grants
        type: GET
        function: getAllGrants
        out:
          struct: GrantInfo
          array: true
        auth: admin
        description: Get the list of all nodes having administrative permissions on this node.
      - url: /grants/{nodeName}
        type: GET
        function: getGrant
        params:
          - type: String
            name: nodeName
            description: name of the node
        out:
          struct: GrantInfo
        auth: admin
        description: Get information about the administrative permissions granted to the node.
      - url: /grants/{nodeName}
        type: PUT
        function: grantOrRevoke
        params:
          - type: String
            name: nodeName
            description: name of the node
        in:
          struct: GrantChange
          name: change
        out:
          struct: GrantInfo
        auth: admin
        description: Grant a set of administrative permissions to the node or revoke them.
        errors:
          - code: grant.name-not-registered
            description: node name is not registered yet
      - url: /grants/{nodeName}
        type: DELETE
        function: revokeAll
        params:
          - type: String
            name: nodeName
            description: name of the node
        out:
          struct: Result
        auth: admin
        description: Revoke all administrative permissions granted to the node.
  - name: Media (private)
    description: >
      Media files that are bound to a particular uploader and may be inaccessible to other clients. Private media files
      cannot be retrieved by their hash, only by their ID. The ID is unique to the client that uploaded the file and
      the node the file was uploaded to. A private media file may have a linked posting - it is used to store the media
      file description, reactions and comments. The linked posting is accessed as any other posting.
    requests:
      - url: /media/private
        type: POST
        function: uploadAdminMedia
        in:
          type: blob
        out:
          struct: PrivateMediaFileInfo
        auth: admin
        description: >
          Upload a new media file owned by the node admin. The content of the file is passed in the request body.
        errors:
          - code: media.image-invalid
            description: media file is not a readable image
          - code: media.wrong-size
            description: media file is too large
          - code: media.storage-error
            description: media file cannot be stored
      - url: /media/private/{clientName}
        type: POST
        function: uploadPrivateMedia
        params:
          - type: String
            name: clientName
            description: name of the node owning the media file
        in:
          type: blob
        out:
          struct: PrivateMediaFileInfo
        auth: required
        description: >
          Upload a new media file owned by the given node. The content of the file is passed in the request body.
        errors:
          - code: media.image-invalid
            description: media file is not a readable image
          - code: media.wrong-size
            description: media file is too large
          - code: media.storage-error
            description: media file cannot be stored
      - url: /media/private/{id}/data
        type: GET
        function: getPrivateMedia
        params:
          - type: String
            name: id
            description: media file ID
        query:
          - type: int
            name: width
            optional: true
            description: >
              preferred width of the media in pixels; if present, the node will try to return the smallest in size,
              but the best in quality variant of the media, according to the width provided
          - type: boolean
            name: download
            optional: true
            description: >
              if <code>true</code>, the node will add <code>Content-Disposition: attachment</code> header to the output
        out:
          type: blob
        auth: optional
        description: >
          Get media file content (returned in the response body).
        errors:
          - code: media.not-found
            description: media file is not found
      - url: /media/private/{id}/info
        type: GET
        function: getPrivateMediaInfo
        params:
          - type: String
            name: id
            description: media file ID
        out:
          struct: PrivateMediaFileInfo
        auth: optional
        description: >
          Get media file details.
        errors:
          - code: media.not-found
            description: media file is not found
      - url: /media/private/{id}/parent
        type: GET
        function: getPrivateMediaParentEntry
        params:
          - type: String
            name: id
            description: media file ID
        out:
          struct: EntryInfo
          array: true
        auth: optional
        description: >
          Get the list of all postings and comments the media file is attached to.
  - name: Media (public)
    description: >
      Media files that should be accessible to any client. ID of a public media file is SHA-1 hash of its content.
    requests:
      - url: /media/public
        type: POST
        function: uploadPublicMedia
        in:
          type: blob
        out:
          struct: PublicMediaFileInfo
        auth: required
        description: >
          Upload a new media file. The content of the file is passed in the request body
        errors:
          - code: media.image-invalid
            description: media file is not a readable image
          - code: media.wrong-size
            description: media file is too large
          - code: media.storage-error
            description: media file cannot be stored
      - url: /media/public/{id}/data
        type: GET
        function: getPublicMedia
        params:
          - type: String
            name: id
            description: media file ID
        query:
          - type: int
            name: width
            optional: true
            description: >
              preferred width of the media in pixels; if present, the node will try to return the smallest in size,
              but the best in quality variant of the media, according to the width provided
          - type: boolean
            name: download
            optional: true
            description: >
              if <code>true</code>, the node will add <code>Content-Disposition: attachment</code> header to the output
        out:
          type: blob
        description: >
          Get media file content (returned in the response body).
        errors:
          - code: media.not-found
            description: media file is not found
      - url: /media/public/{id}/info
        type: GET
        function: getPublicMediaInfo
        params:
          - type: String
            name: id
            description: media file ID
        out:
          struct: PublicMediaFileInfo
        description: >
          Get media file details.
        errors:
          - code: media.not-found
            description: media file is not found
  - name: Node Name
    description: >
      The name of the node. <a href="/overview/naming.html">Read more</a> about it in the Architecture Overview section.
      Operations with the node name are performed asynchronously - need to poll the node periodically to get
      the current status of the operation. Only one operation with the node name may be performed by the node at
      any moment.
    requests:
      - url: /node-name
        type: GET
        function: getNodeName
        out:
          struct: NodeNameInfo
        auth: admin or none
        description: >
          Get the name of the node. Admin user receives the current status of the latest operation with the node name.
      - url: /node-name
        type: POST
        function: createNodeName
        in:
          struct: NameToRegister
          name: nameToRegister
        out:
          struct: RegisteredNameSecret
        auth: admin
        description: >
          Register a new name for the node. The corresponding signing key is generated automatically and stored at
          the node. The updating key is generated and returned in the encoded form and in the form of mnemonic
          (a sequence of English words). The words need to be written down and stored securely to be able to perform
          further operations with the name.
        errors:
          - code: naming.operation-pending
            description: another operation with the node name is pending currently
      - url: /node-name
        type: PUT
        function: updateNodeName
        in:
          struct: RegisteredNameSecret
          name: secret
        out:
          struct: Result
        auth: admin
        description: >
          Update the name of the node. May be used to assign an already-registered name to the node (the corresponding
          signing key is generated automatically and stored at the node), or to prolong the name. The secret or
          mnemonic of the updating key must be provided for this operation.
        errors:
          - code: naming.operation-pending
            description: another operation with the node name is pending currently
          - code: node-name.secret.empty
            description: the registered name secret or mnemonic are not provided
          - code: node-name.name-absent
            description: the node name is not provided and not known by the node
          - code: node-name.<naming server error>
            description: >
              various errors returned by naming server
              (<a href="/development/naming-api.html#error-codes">see the list</a>)
      - url: /node-name
        type: DELETE
        function: deleteNodeName
        out:
          struct: Result
        auth: admin
        description: >
          Delete all the information related to the node name (including the signing key) from the node. The name
          record on the naming server is not touched.
        errors:
          - code: naming.operation-pending
            description: another operation with the node name is pending currently
      - url: /node-name/mnemonic
        type: GET
        function: getStoredMnemonic
        out:
          struct: KeyMnemonic
        auth: admin
        description: Get the updating key mnemonic stored on the node.
        errors:
          - code: not-found
            description: the mnemonic is not stored
      - url: /node-name/mnemonic
        type: POST
        function: storeMnemonic
        in:
          struct: KeyMnemonic
          name: mnemonic
        out:
          struct: Result
        auth: admin
        description: Store the updating key mnemonic on the node.
      - url: /node-name/mnemonic
        type: DELETE
        function: deleteStoredMnemonic
        out:
          struct: Result
        auth: admin
        description: Delete the updating key mnemonic stored on the node.
  - name: Notifications
    description: Receiver of notifications from other nodes.
    requests:
      - url: /notifications
        type: POST
        function: sendNotification
        in:
          struct: NotificationPacket
          name: packet
        out:
          struct: Result
        auth: signature
        description: >
          Accept a notification packet from another node. Notification packets older than 10 minutes are ignored.
          The sending node should update the packet timestamp and the signature and send the packet again.
          This mechanism prevents attackers from recording and resending old signed packets.
        errors:
          - code: frozen
            description: >
              not an error; the notification was accepted, but will not be processed immediately, because the node is
              frozen due to inactivity
          - code: ask.too-many
            description: >
              the node cannot accept so many <a href="notifications.html#ASKED">ASKED</a> notifications from the same
              node
          - code: ask.too-often
            description: >
              the node cannot accept so many <a href="notifications.html#ASKED">ASKED</a> notifications over a short
              period of time
  - name: People
    description: Information related to other nodes.
    requests:
      - url: /people
        type: GET
        function: getPeopleGeneral
        out:
          struct: PeopleGeneralInfo
        auth: optional
        description: Get general information about other nodes.
  - name: Plugins
    description: >
      Plugins are web applications that integrate closely with the node or with the server as whole. Authenticating as
      root admin or node admin, they may perform operations, receive internal events, extend node API with new requests
      and add their own settings to the list of node settings. Every plugin registers its URL with the node, and
      the node uses this URL to call it when necessary.
    requests:
      - url: /plugins
        type: POST
        function: registerPlugin
        in:
          struct: PluginDescription
          name: plugin
        out:
          struct: PluginInfo
        auth: root admin or admin
        description: >
          Register the plugin. If the plugin authenticates as root admin, the plugin is registered at the server level.
          If the plugin authenticates as node admin, the plugin is registered at the node level.
        errors:
          - code: plugin.already-exists
            description: plugin with this name is already registered
      - url: /plugins
        type: GET
        function: getPlugins
        out:
          struct: PluginInfo
          array: true
        auth: optional
        description: Get information about all plugins registered for the node and server.
      - url: /plugins/{pluginName}
        type: GET
        function: getPlugin
        params:
          - type: String
            name: pluginName
            description: name of the plugin
        out:
          struct: PluginInfo
        auth: optional
        description: Get information about the plugin.
        errors:
          - code: plugin.unknown
            description: unknown plugin
      - url: /plugins/{pluginName}/&lt;request location>
        type: "&lt;any>"
        params:
          - type: String
            name: pluginName
            description: name of the plugin
        auth: optional
        description: >
          Invoke API provided by the plugin. The request is passed through to the plugin with the original method to
          the URL <code>&lt;plugin URL>/&lt;request location></code>. All headers, except <code>Host</code> and
          <code>Authorization</code> are also passed through and two more headers are added: <code>X-Moera-Auth</code>
          and <code>X-Moera-Origin</code>. <a href="headers.html">Read more about them.</a> The response from the plugin
          is passed to the client as is.
        errors:
          - code: plugin.unknown
            description: unknown plugin
          - code: plugin.invocation-error
            description: the request cannot be passed to the plugin
      - url: /plugins/{pluginName}/events
        type: GET
        params:
          - type: String
            name: pluginName
            description: name of the plugin
        query:
          - type: long
            name: after
            optional: true
            description: >
              moment of the latest event that has been seen by the plugin; may be passed in <code>Last-Event-ID</code>
              header instead
        auth: root admin or admin
        description: >
          <a name="internal-events">Get <a href="https://en.wikipedia.org/wiki/Server-sent_events">SSE stream</a> of
          internal events from the node. The stream is filtered as defined in
          <code><a href="#PluginDescription">PluginDescription</a>.acceptedEvents</code>. If the plugin is registered
          on the node level, it can receive only events related to the node. A plugin registered on the server level
          can receive any event related to any node in the server.
          <br><br>
          The events are not documented here, they correspond to
          <a href="https://github.com/MoeraOrg/moera-node/tree/master/src/main/java/org/moera/node/liberin/model">liberin
          objects in the source code of the node</a>. For example, <code>PostingUpdatedLiberin</code> corresponds to
          <code>posting-updated</code> event.
          <br><br>
          Each SSE event has ID that is equal to the moment of the event, and content that is a serialized JSON object
          with the following fields:
          <br><br>
          <table class="table">
            <thead>
              <tr>
                <th class="col-3">Type</th>
                <th class="col-3">Field</th>
                <th class="col-6">Comment</th>
              </tr>
            </thead>
            <tbody class="table-group-divider">
              <tr>
                <td><code>String</code></td>
                <td><code>type</code></td>
                <td>type of the event</td>
              </tr>
              <tr>
                <td><code>String</code></td>
                <td><code>nodeId</code></td>
                <td>ID of the node in the server</td>
              </tr>
              <tr>
                <td><code><a href="#PluginContext">PluginContext</a></code></td>
                <td><code>context</code></td>
                <td>request context, if the event was emitted as a result of an API call</td>
              </tr>
              <tr>
                <td>...</td>
                <td>...</td>
                <td>other event-specific fields</td>
              </tr>
            </tbody>
          </table>
        errors:
          - code: plugin.unknown
            description: unknown plugin
      - url: /plugins/{pluginName}
        type: DELETE
        function: unregisterPlugin
        params:
          - type: String
            name: pluginName
            description: name of the plugin
        out:
          struct: Result
        auth: root admin or admin
        description: Unregister the plugin.
        errors:
          - code: plugin.unknown
            description: unknown plugin
  - name: Postings
    description: >
      All postings. Each posting may contain one or more revisions, a new revision is created every time the posting is
      updated. The latest revision is the current one, the previous ones are marked as deleted.
    requests:
      - url: /postings
        type: POST
        function: createPosting
        in:
          struct: PostingText
          name: posting
        out:
          struct: PostingInfo
        auth: required or signature
        description: >
          Create a new posting from the text given and publish it in the given feeds (if any). The heading and
          the preview of the posting are created automatically, if needed. The posting owner must authenticate in
          some way. If the posting is not signed, it will be kept for a limited period of time and then erased. If
          authenticated as admin, the node signs the posting.
        errors:
          - code: avatar.not-found
            description: there is no avatar with the given ID
          - code: media.not-found
            description: there is no media with the given ID
          - code: media.not-compressed
            description: >
              media attachment is not compressed as the node requires, the parameters of the desired compression are
              returned in <code><a href="#PostingFeatures">PostingFeatures</a></code>
      - url: /postings/{id}
        type: PUT
        function: updatePosting
        params:
          - type: String
            name: id
            description: ID of the posting
        in:
          struct: PostingText
          name: posting
        out:
          struct: PostingInfo
        auth: required or signature
        description: >
          Update the posting, creating a new revision of it. The text is processed just like in the <code>POST</code>
          request.
        errors:
          - code: posting.not-found
            description: there is no posting with the given ID
          - code: posting.not-original
            description: updating a non-original posting is not allowed
          - code: avatar.not-found
            description: there is no avatar with the given ID
          - code: media.not-found
            description: there is no media with the given ID
          - code: media.not-compressed
            description: >
              media attachment is not compressed as the node requires, the parameters of the desired compression are
              returned in <code><a href="#PostingFeatures">PostingFeatures</a></code>
      - url: /postings/{id}
        type: GET
        function: getPosting
        params:
          - type: String
            name: id
            description: ID of the posting
        query:
          - type: String
            name: include
            optional: true
            description:
            flags:
              - name: source
                description: source text of the posting
        out:
          struct: PostingInfo
        auth: optional
        description: Get an individual posting.
        errors:
          - code: posting.not-found
            description: there is no posting with the given ID
      - url: /postings/{id}
        type: DELETE
        function: deletePosting
        params:
          - type: String
            name: id
            description: ID of the posting
        out:
          struct: Result
        auth: optional
        description: >
          Delete the posting. The posting may not be purged from the database immediately, but preserved for some period
          of time to give a chance to restore it.
        errors:
          - code: posting.not-found
            description: there is no posting with the given ID
      - url: /postings/{id}/attached
        type: GET
        function: getPostingsAttachedToPosting
        params:
          - type: String
            name: id
            description: ID of the posting
        out:
          struct: PostingInfo
          array: true
        auth: optional
        description: Get all postings linked to media attached to the given posting.
        errors:
          - code: posting.not-found
            description: there is no posting with the given ID
  - name: Posting Revisions
    description: All revisions of the posting.
    requests:
      - url: /postings/{postingId}/revisions
        type: GET
        function: getPostingRevisions
        params:
          - type: String
            name: postingId
            description: ID of the posting
        query:
          - type: int
            name: limit
            optional: true
            description: maximum number of revisions returned
        out:
          struct: PostingRevisionInfo
          array: true
        auth: optional
        description: >
          Get all revisions of the posting, but not more than <code>limit</code>. The node may decide to return fewer
          revisions than the given <code>limit</code>.
        errors:
          - code: posting.not-found
            description: there is no posting with the given ID
      - url: /postings/{postingId}/revisions/{id}
        type: GET
        function: getPostingRevision
        params:
          - type: String
            name: postingId
            description: ID of the posting
          - type: String
            name: id
            description: ID of the revision
        out:
          struct: PostingRevisionInfo
        auth: optional
        description: Get an individual revision of the posting.
        errors:
          - code: posting.not-found
            description: there is no posting with the given ID
          - code: posting-revision.not-found
            description: there is no revision with the given ID
      - url: /postings/{postingId}/revisions/{id}/restore
        type: POST
        function: restorePostingRevision
        params:
          - type: String
            name: postingId
            description: ID of the posting
          - type: String
            name: id
            description: ID of the revision
        out:
          struct: PostingRevisionInfo
        auth: admin
        description: >
          Restore a revision of the posting. A new revision is created with the same content as in the given revision.
        errors:
          - code: posting.not-found
            description: there is no posting with the given ID
          - code: posting-revision.not-found
            description: there is no revision with the given ID
          - code: posting-revision.already-current
            description: the given revision is already the current one
  - name: Posting Reactions
    description: Reactions ("Likes") - simple textless answers to a posting.
    requests:
      - url: /postings/{postingId}/reactions
        type: POST
        function: createPostingReaction
        params:
          - type: String
            name: postingId
            description: ID of the posting
        in:
          struct: ReactionDescription
          name: reaction
        out:
          struct: ReactionCreated
        auth: required or signature
        description: >
          Add a reaction to the given posting. The reaction owner must authenticate in some way. Only one reaction is
          allowed from each owner to a particular posting. If a reaction from the same owner to this posting already
          exists, it is overwritten. If the reaction is not signed, the reaction will be kept for a limited period of
          time and then erased (the previous reaction of the same owner will be restored, if any).
        errors:
          - code: posting.not-found
            description: there is no posting with the given ID
          - code: posting.not-signed
            description: the posting is not signed, so it is impossible to add reactions to it
          - code: reaction.not-accepted
            description: the reaction is not acceptable
          - code: avatar.not-found
            description: there is no avatar with the given ID
      - url: /postings/{postingId}/reactions
        type: GET
        function: getPostingReactionsSlice
        params:
          - type: String
            name: postingId
            description: ID of the posting
        query:
          - type: boolean
            name: negative
            optional: true
            description: <code>true</code>, to filter negative reactions, <code>false</code>, to filter positive ones
          - type: int
            name: emoji
            optional: true
            description: filter by reaction code, usually interpreted by clients as emoji code point
          - type: long
            name: before
            optional: true
            description: filter reactions created at or before this moment
          - type: int
            name: limit
            optional: true
            description: maximum number of reactions returned
        out:
          struct: ReactionsSliceInfo
        auth: optional
        description: >
          Get a slice of the list of reactions to the given posting, optionally filtered by reaction type, delimited by
          <code>before</code> moment and the given <code>limit</code>. If <code>before</code> is not provided,
          the latest reactions are returned. The node may decide to return fewer reactions than the given
          <code>limit</code>. The reactions are always sorted by moment, descending.
        errors:
          - code: posting.not-found
            description: there is no posting with the given ID
          - code: limit.invalid
            description: <code>limit</code> parameter has an invalid value
      - url: /postings/{postingId}/reactions/{ownerName}
        type: PUT
        function: updatePostingReaction
        params:
          - type: String
            name: postingId
            description: ID of the posting
          - type: String
            name: ownerName
            description: reaction owner node name
        in:
          struct: ReactionOverride
          name: reaction
        out:
          struct: ReactionInfo
        auth: optional
        description: >
          Update the reaction's operations or set operations' overrides.
        errors:
          - code: posting.not-found
            description: there is no posting with the given ID
      - url: /postings/{postingId}/reactions/{ownerName}
        type: GET
        function: getPostingReaction
        params:
          - type: String
            name: postingId
            description: ID of the posting
          - type: String
            name: ownerName
            description: reaction owner node name
        out:
          struct: ReactionInfo
        auth: optional
        description: >
          Get the detailed information about the reaction of the given owner to the given posting. If no reaction with
          such an owner exists, an empty structure with just <code>postingId</code> is returned.
        errors:
          - code: posting.not-found
            description: there is no posting with the given ID
      - url: /postings/{postingId}/reactions
        type: DELETE
        function: deleteAllPostingReactions
        params:
          - type: String
            name: postingId
            description: ID of the posting
        out:
          struct: Result
        auth: optional
        description: Delete all reactions to the given posting.
        errors:
          - code: posting.not-found
            description: there is no posting with the given ID
      - url: /postings/{postingId}/reactions/{ownerName}
        type: DELETE
        function: deletePostingReaction
        params:
          - type: String
            name: postingId
            description: ID of the posting
          - type: String
            name: ownerName
            description: reaction owner node name
        out:
          struct: ReactionTotalsInfo
        auth: optional
        description: Delete the reaction of the given owner to the given posting.
        errors:
          - code: posting.not-found
            description: there is no posting with the given ID
      - url: /postings/reactions/search
        type: POST
        function: searchPostingReactions
        in:
          struct: ReactionsFilter
          name: filter
        out:
          struct: ReactionInfo
          array: true
        auth: optional
        description: >
          Search reactions by criteria provided. Both reaction owner and at least one posting ID should be provided to
          search, otherwise an empty list is returned.
  - name: Posting Reaction Totals
    description: Summary of reactions to a posting.
    requests:
      - url: /postings/{postingId}/reaction-totals
        type: GET
        function: getPostingReactionTotals
        params:
          - type: String
            name: postingId
            description: ID of the posting
        out:
          struct: ReactionTotalsInfo
        auth: optional
        description: Get a summary of reactions to the posting given.
        errors:
          - code: posting.not-found
            description: there is no posting with the given ID
      - url: /postings/reaction-totals/search
        type: POST
        function: searchPostingReactionTotals
        in:
          struct: ReactionTotalsFilter
          name: filter
        out:
          struct: ReactionTotalsInfo
          array: true
        auth: optional
        description: >
          Search summaries of reactions by criteria provided. At least one posting ID should be provided to search,
          otherwise an empty list is returned.
  - name: Profile
    description: The profile - the detailed information about the node's owner, node's purpose etc.
    requests:
      - url: /profile
        type: GET
        function: getProfile
        query:
          - type: String
            name: include
            optional: true
            description:
            flags:
              - name: source
                description: source text of the bio
        out:
          struct: ProfileInfo
        auth: optional
        description: Get the profile.
      - url: /profile
        type: PUT
        function: updateProfile
        in:
          struct: ProfileAttributes
          name: profile
        out:
          struct: ProfileInfo
        auth: admin
        description: >
          Update the profile. Fields that are not set in the request body are left intact. Fields that are set to
          an empty value are reset to their defaults.
        errors:
          - code: avatar.not-found
            description: there is no avatar with the given ID
  - name: Provider
    description: Communication with the provider (owner of the server).
    requests:
      - url: /provider/delete-node
        type: GET
        function: getDeleteNodeRequestStatus
        out:
          struct: DeleteNodeStatus
        auth: admin
        description: Get the current status of the request to delete the node.
      - url: /provider/delete-node
        type: POST
        function: sendDeleteNodeRequest
        in:
          struct: DeleteNodeText
          name: deleteNodeText
        out:
          struct: DeleteNodeStatus
        auth: admin
        description: Send a request to the provider to delete the node.
        errors:
          - code: delete-node.no-email
            description: e-mail is required to be set in the profile to communicate with the provider
      - url: /provider/delete-node
        type: DELETE
        function: cancelDeleteNodeRequest
        out:
          struct: DeleteNodeStatus
        auth: admin
        description: Cancel the request to delete the node.
  - name: Proxy
    description: Proxy, that may be used by web clients to workaround CORS restrictions of browsers
    requests:
      - url: /proxy/media
        type: GET
        function: proxyMedia
        query:
          - type: String
            name: url
        out:
          type: blob
        auth: admin
        description: Open the URL passed in the parameters and pass to the client the media file returned by the server.
        errors:
          - code: proxy.request-failed
            description: HTTP request failed
          - code: proxy.resource-not-found
            description: resource is not found
          - code: proxy.resource-not-media
            description: resource is not a media file
          - code: proxy.error-status
            description: HTTP request returned an error status
          - code: proxy.url.invalid
            description: the URL is not valid
      - url: /proxy/link-preview
        type: GET
        function: proxyLinkPreview
        query:
          - type: String
            name: url
        out:
          struct: LinkPreviewInfo
        auth: admin
        description: >
          Parse the page located at the URL and return the title, the description and the picture that may be used to
          build a preview of the page.
        errors:
          - code: proxy.resource-not-found
            description: resource is not found
  - name: Push Notifications
    description: >
      SSE channels for delivering push notifications from the home node. When a client opens an SSE connection for
      the first time, an individual push notifications channel for this client is created (every client must generate
      a unique random identifier for its channel). After that, push notifications are stacked for this channel and
      the client should poll the channel periodically (or keep it open constantly) to receive them. If the client
      does not poll the channel for a long time, the channel is deleted.
    requests:
      - url: /push/{clientId}
        type: GET
        params:
          - type: String
            name: clientId
            description: ID of the client
        query:
          - type: long
            name: after
            optional: true
            description: >
              moment of the last notification already received by the client (<code>Last-Event-ID</code> header may be
              used instead of this parameter)
        out:
          struct: PushContent
          array: true
        auth: admin
        description: >
          Open the push notifications channel for the connected client or create a new one, if it does not exist. This
          request returns a live SSE stream, where <i>events</i> are notifications in a form of JSON-encoded
          <code><a href="#PushContent">PushContent</a></code> structures and <i>event IDs</i> are the moments, when
          these notifications were generated. When the channel is opened, the node discards all notifications up to
          <code>after</code> (if provided) and delivers the rest of notifications till the current moment. After that,
          the notifications are delivered in real time until the channel is closed. If a client with the same
          <code>clientId</code> opens a channel from another device, this channel is automatically closed by the node.
        errors:
          - code: push.clientId.blank
            description: client ID is not set
          - code: push.clientId.wrong-size
            description: client ID is too long
          - code: push.too-many-clients
            description: too many push clients
      - url: /push/{clientId}
        type: DELETE
        params:
          - type: String
            name: clientId
            description: ID of the client
        out:
          struct: Result
        auth: admin
        description: Delete the channel with all notifications in it.
        errors:
          - code: push.not-found
            description: push client is not found
  - name: Push Relay
    description: >
      Moera network uses dedicated Push Relay servers that accept push messages from nodes and route them to their
      clients. Read more in the <a href="../push-relay-api.html">Push Relay API</a> chapter.
    requests:
      - url: /push-relay
        type: POST
        function: registerAtPushRelay
        in:
          struct: PushRelayClientAttributes
          name: attributes
        out:
          struct: Result
        auth: admin
        description: >
          Register a client at the push relay server to receive messages from this node. The operation is synchronous.
        errors:
          - code: push-relay.error
            description: push relay service returned an error
  - name: Remote Ask
    description: >
      The node may send requests to other nodes asking to subscribe to it, to add it to friends etc.
    requests:
      - url: /nodes/{nodeName}/ask
        type: POST
        function: askRemoteNode
        params:
          - type: String
            name: nodeName
            description: name of the remote node
        in:
          struct: AskDescription
          name: details
        out:
          struct: Result
        auth: admin
        description: Send a request to the remote node.
  - name: Remote Comments
    description: Comments to postings located on other nodes.
    requests:
      - url: /nodes/{nodeName}/postings/{postingId}/comments
        type: POST
        function: createRemoteComment
        params:
          - type: String
            name: nodeName
            description: name of the remote node
          - type: String
            name: postingId
            description: ID of the posting on the remote node
        in:
          struct: CommentSourceText
          name: comment
        out:
          struct: Result
        auth: admin
        description: Add a comment to the posting on the remote node and register it in the registry at the local node.
      - url: /nodes/{nodeName}/postings/{postingId}/comments/{commentId}
        type: PUT
        function: updateRemoteComment
        params:
          - type: String
            name: nodeName
            description: name of the remote node
          - type: String
            name: postingId
            description: ID of the posting on the remote node
          - type: String
            name: commentId
            description: ID of the comment on the remote node
        in:
          struct: CommentSourceText
          name: comment
        out:
          struct: Result
        auth: admin
        description: Update a comment to the posting on the remote node.
      - url: /nodes/{nodeName}/postings/{postingId}/comments/{commentId}
        type: DELETE
        function: deleteRemoteComment
        params:
          - type: String
            name: nodeName
            description: name of the remote node
          - type: String
            name: postingId
            description: ID of the posting on the remote node
          - type: String
            name: commentId
            description: ID of the comment on the remote node
        out:
          struct: Result
        auth: admin
        description: Delete a comment from the registry of all comments at the local node.
      - url: /nodes/{nodeName}/postings/{postingId}/comments/{commentId}/verify
        type: POST
        function: verifyRemoteComment
        params:
          - type: String
            name: nodeName
            description: name of the remote node
          - type: String
            name: postingId
            description: ID of the posting on the remote node
          - type: String
            name: commentId
            description: ID of the comment on the remote node
        out:
          struct: AsyncOperationCreated
        auth: admin
        description: Verify the signature of the given comment to the posting on the remote node.
  - name: Remote Comment Reactions
    description: Reactions to comments located on other nodes.
    requests:
      - url: /nodes/{nodeName}/postings/{postingId}/comments/{commentId}/reactions
        type: POST
        function: createRemoteCommentReaction
        params:
          - type: String
            name: nodeName
            description: name of the remote node
          - type: String
            name: postingId
            description: ID of the posting on the remote node
          - type: String
            name: commentId
            description: ID of the comment on the remote node
        in:
          struct: ReactionAttributes
          name: reaction
        out:
          struct: Result
        auth: admin
        description: Add a reaction to the comment on the remote node and register it in the registry at the local node.
      - url: /nodes/{nodeName}/postings/{postingId}/comments/{commentId}/reactions
        type: DELETE
        function: deleteRemoteCommentReaction
        params:
          - type: String
            name: nodeName
            description: name of the remote node
          - type: String
            name: postingId
            description: ID of the posting on the remote node
          - type: String
            name: commentId
            description: ID of the comment on the remote node
        out:
          struct: Result
        auth: admin
        description: Delete a reaction from the registry of all reactions at the local node.
      - url: /nodes/{nodeName}/postings/{postingId}/comments/{commentId}/reactions/{ownerName}/verify
        type: POST
        function: verifyRemoteCommentReaction
        params:
          - type: String
            name: nodeName
            description: name of the remote node
          - type: String
            name: postingId
            description: ID of the posting on the remote node
          - type: String
            name: commentId
            description: ID of the comment on the remote node
          - type: String
            name: ownerName
            description: reaction owner node name
        out:
          struct: AsyncOperationCreated
        auth: admin
        description: Verify the signature of the reaction of the given owner to the comment on the remote node.
  - name: Remote Postings
    description: Postings located on other nodes.
    requests:
      - url: /nodes/{nodeName}/postings
        type: POST
        function: createRemotePosting
        params:
          - type: String
            name: nodeName
            description: name of the remote node
        in:
          struct: PostingSourceText
          name: posting
        out:
          struct: Result
        auth: admin
        description: Add a posting to the remote node and register it in the registry at the local node.
      - url: /nodes/{nodeName}/postings/{postingId}
        type: PUT
        function: updateRemotePosting
        params:
          - type: String
            name: nodeName
            description: name of the remote node
          - type: String
            name: postingId
            description: ID of the posting on the remote node
        in:
          struct: PostingSourceText
          name: posting
        out:
          struct: Result
        auth: admin
        description: Update a posting on the remote node.
      - url: /nodes/{nodeName}/postings/{postingId}
        type: DELETE
        function: deleteRemotePosting
        params:
          - type: String
            name: nodeName
            description: name of the remote node
          - type: String
            name: postingId
            description: ID of the posting on the remote node
        out:
          struct: Result
        auth: admin
        description: Delete a posting from the registry of all remote postings at the local node.
      - url: /nodes/{nodeName}/postings/{id}/verify
        type: POST
        function: verifyRemotePosting
        params:
          - type: String
            name: nodeName
            description: name of the remote node
          - type: String
            name: id
            description: ID of the posting on the remote node
        out:
          struct: AsyncOperationCreated
        auth: admin
        description: Verify the signature of the given posting.
      - url: /nodes/{nodeName}/postings/{id}/revisions/{revisionId}/verify
        type: POST
        function: verifyRemotePostingRevision
        params:
          - type: String
            name: nodeName
            description: name of the remote node
          - type: String
            name: id
            description: ID of the posting on the remote node
          - type: String
            name: revisionId
            description: ID of the posting revision
        out:
          struct: AsyncOperationCreated
        auth: admin
        description: Verify the signature of the given revision of a posting.
  - name: Remote Posting Reactions
    description: Reactions to postings located on other nodes.
    requests:
      - url: /nodes/{nodeName}/postings/{postingId}/reactions
        type: POST
        function: createRemotePostingReaction
        params:
          - type: String
            name: nodeName
            description: name of the remote node
          - type: String
            name: postingId
            description: ID of the posting on the remote node
        in:
          struct: ReactionAttributes
          name: reaction
        out:
          struct: Result
        auth: admin
        description: Add a reaction to the posting on the remote node and register it in the registry at the local node.
      - url: /nodes/{nodeName}/postings/{postingId}/reactions
        type: DELETE
        function: deleteRemotePostingReaction
        params:
          - type: String
            name: nodeName
            description: name of the remote node
          - type: String
            name: postingId
            description: ID of the posting on the remote node
        out:
          struct: Result
        auth: admin
        description: Delete a reaction from the registry of all reactions at the local node.
      - url: /nodes/{nodeName}/postings/{postingId}/reactions/{ownerName}/verify
        type: POST
        function: verifyRemotePostingReaction
        params:
          - type: String
            name: nodeName
            description: name of the remote node
          - type: String
            name: postingId
            description: ID of the posting on the remote node
          - type: String
            name: ownerName
            description: reaction owner node name
        out:
          struct: AsyncOperationCreated
        auth: admin
        description: Verify the signature of the reaction of the given owner to the posting on the remote node.
  - name: Remote Sheriff Orders
    description: >
      Sheriff API to send orders to remote nodes. Add orders are stored on the sheriff's node and may be requested by
      anybody.
    requests:
      - url: /nodes/{nodeName}/sheriff/orders
        type: POST
        function: createRemoteSheriffOrder
        params:
          - type: String
            name: nodeName
            description: name of the remote node
        in:
          struct: SheriffOrderAttributes
          name: sheriffOrder
        out:
          struct: Result
        auth: admin
        description: Sign and send the order to the remote node and store it in the registry at the local node.
      - url: /nodes/{nodeName}/sheriff/orders/{id}
        type: GET
        function: getRemoteSheriffOrder
        params:
          - type: String
            name: nodeName
            description: name of the remote node
          - type: String
            name: id
            description: ID of the order
        out:
          struct: SheriffOrderInfo
        description: Get the details of the given sheriff's order
        errors:
          - code: sheriff-order.not-found
            description: sheriff's order is not found
          - code: sheriff-order.wrong-node
            description: the sheriff's order is related to a different node
  - name: Search
    description: >
      Search API is implemented by nodes acting as search engines in the Moera network.
    requests:
      - url: /search/nodes
        type: GET
        function: searchNodes
        query:
          - type: String
            name: query
            optional: true
            description: the search query
          - type: int
            name: limit
            optional: true
            description: maximum number of nodes returned
        out:
          struct: SearchNodeInfo
          array: true
        auth: optional
        description: >
          Search for Moera nodes matching the search <code>query</code>. Every space-delimited word in the query must
          match case-insensitively a beginning of the node's name or a beginning of any non-letter-delimited word in
          the node's full name. The order of words is not significant.
          <br><br>
          The search engine may decide to return fewer nodes than the given <code>limit</code>.
          <br><br>
          The returned nodes are sorted by their relevance. The exact definition of this term is left to the search
          engine's implementation.
        errors:
          - code: limit.invalid
            description: <code>limit</code> parameter has an invalid value
  - name: Settings
    description: >
      Settings - the node and client settings. The node settings affect the node behavior. Only those settings are
      accepted that are known by the node, and their values are validated before saving. The node settings metadata can
      be obtained by request. The client settings are saved without validation and their metadata is built into the
      client. All client settings must have names starting with <code>client.</code> to distinguish them from the node
      ones. By convention, the client name is added to the prefix (<code>client.&lt;client name>.</code>) to be able to
      store settings of several different clients at the same time.
    requests:
      - url: /settings
        type: PUT
        function: updateSettings
        in:
          struct: SettingInfo
          array: true
          name: settings
        out:
          struct: Result
        auth: admin or root admin
        description:
          Update the given settings. If the input contains node settings, they are validated and the first validation
          error is returned, if any. The update is always performed as a whole - if there is an error saving any one of
          the settings in the input, none of them are updated.
          <br><br>
          If one of the settings to be updated is privileged, <i>root secret</i> authentication is required. If one of
          the settings to be updated is non-privileged, <i>admin</i> authentication is required.
        errors:
          - code: setting.deserialization-failed
            description: setting value deserialization failed
          - code: setting.cannot-convert
            description: cannot convert value to the setting type
          - code: setting.invalid-value
            description: invalid value for the setting
          - code: setting.internal
            description: cannot set value of an internal setting
          - code: setting.unknown
            description: unknown setting
      - url: /settings/client
        type: GET
        function: getClientSettings
        query:
          - type: String
            name: prefix
            optional: true
            description: >
              filter settings whose names start with the given prefix, case-sensitive (<code>client.</code> prefix
              must be included)
        out:
          struct: SettingInfo
          array: true
        auth: admin
        description: Get all client settings, sorted by name.
      - url: /settings/node
        type: GET
        function: getNodeSettings
        query:
          - type: String
            name: prefix
            optional: true
            description: filter settings whose names start with the given prefix, case-sensitive
        out:
          struct: SettingInfo
          array: true
        auth: admin
        description: >
          Get all node settings, sorted by name. If a setting has not changed its value from the default, it is omitted.
      - url: /settings/node/metadata
        type: GET
        function: getNodeSettingsMetadata
        query:
          - type: String
            name: prefix
            optional: true
            description: filter settings whose names start with the given prefix, case-sensitive
        out:
          struct: SettingMetaInfo
          array: true
        auth: admin
        description: Get all node settings metadata, sorted by name.
      - url: /settings/node/metadata
        type: PUT
        function: updateNodeSettingsMetadata
        in:
          struct: SettingMetaAttributes
          array: true
          name: metadata
        out:
          struct: Result
        auth: root admin
        description: Update node settings metadata, overriding built-in defaults.
        errors:
          - code: setting.deserialization-failed
            description: setting value deserialization failed
          - code: setting.cannot-convert
            description: cannot convert value to the setting type
          - code: setting.invalid-value
            description: invalid value for the setting
          - code: setting.internal
            description: cannot set value of an internal setting
          - code: setting.unknown
            description: unknown setting
          - code: setting.plugin
            description: plugin setting metadata cannot be modified
  - name: Sheriff Complaint Groups
    description: >
      Similar complaints sent to the sheriff are grouped together and the sheriff makes decisions on a group as whole.
      <a href="/overview/supervision.html">Read more</a> about sheriff supervision in the Architecture Overview section.
    requests:
      - url: /sheriff/complaints/groups
        type: GET
        function: getSheriffComplaintGroupsSlice
        query:
          - type: long
            name: after
            optional: true
            description: filter groups created strongly after this moment
          - type: long
            name: before
            optional: true
            description: filter groups created at or before this moment
          - type: int
            name: limit
            optional: true
            description: maximum number of groups returned
          - enum: SheriffComplaintStatus
            name: status
            optional: true
            description: filter groups by status
        out:
          struct: SheriffComplaintGroupsSliceInfo
        description: >
          Get a slice of the list of groups of complaints, optionally filtered by status, delimited by
          the <code>before</code> or <code>after</code> moment and the given <code>limit</code>. If neither
          <code>before</code> nor <code>after</code> are provided, the latest groups are returned. The node may decide
          to return fewer groups than the given <code>limit</code>. The groups are always sorted by moment, descending.
        errors:
          - code: sheriff-complaint-groups.before-after-exclusive
            description: before and after parameters are mutually exclusive
      - url: /sheriff/complaints/groups/{id}
        type: GET
        function: getSheriffComplaintGroup
        params:
          - type: String
            name: id
            description: ID of the group of complaints
        out:
          struct: SheriffComplaintGroupInfo
        description: Get details of the given group of complaints.
        errors:
          - code: sheriff-complaint-group.not-found
            name: the group of complaints is not found
      - url: /sheriff/complaints/groups/{id}/complaints
        type: GET
        function: getSheriffComplaintsByGroup
        params:
          - type: String
            name: id
            description: ID of the group of complaints
        out:
          struct: SheriffComplaintInfo
          array: true
        description: Get complaints included in the given group of complaints.
        errors:
          - code: sheriff-complaint-group.not-found
            name: the group of complaints is not found
      - url: /sheriff/complaints/groups/{id}
        type: PUT
        function: updateSheriffComplaintGroup
        params:
          - type: String
            name: id
            description: ID of the group of complaints
        in:
          struct: SheriffComplaintDecisionText
          name: decision
        out:
          struct: SheriffComplaintGroupInfo
        auth: admin
        description: Make a decision on the given group of complaints.
        errors:
          - code: sheriff-complaint-group.not-found
            name: the group of complaints is not found
  - name: Sheriff Complaints
    description: >
      Complaints are sent to the sheriff via sheriff's node. <a href="/overview/supervision.html">Read more</a> about
      sheriff supervision in the Architecture Overview section.
    requests:
      - url: /sheriff/complaints
        type: POST
        function: createSheriffComplaint
        in:
          struct: SheriffComplaintText
          name: complaint
        out:
          struct: SheriffComplaintInfo
        auth: required
        description: Send a complaint to the sheriff.
  - name: Sheriff Orders
    description: >
      Orders sent by a sheriff to the node. The node must obey the orders if it accepted supervision by the sheriff.
      <a href="/overview/supervision.html">Read more</a> about sheriff supervision in the Architecture Overview section.
    requests:
      - url: /sheriff/orders
        type: POST
        function: createSheriffOrder
        in:
          struct: SheriffOrderDetails
          name: sheriffOrder
        out:
          struct: Result
        auth: signature
        description: Receive and execute the sheriff's order.
        errors:
          - code: sheriff-order.wrong-feed
            description: the posting is not included into the designated feed
          - code: posting.not-found
            description: posting is not found
          - code: posting.not-signed
            description: posting is not signed
          - code: comment.not-found
            description: comment is not found
          - code: comment.wrong-posting
            description: comment is located under a different posting
          - code: avatar.not-found
            description: there is no avatar with the given ID
  - name: Stories
    description: >
      All stories. Each story describes something happening in Moera, stories are building blocks for feeds. All stories
      have the same structure, but the meaning of fields depends on the story type. A story may reference a posting,
      a remote object, etc. Some feeds may not allow some types of stories.
    requests:
      - url: /stories/{id}
        type: GET
        function: getStory
        params:
          - type: String
            name: id
            description: ID of the story
        out:
          struct: StoryInfo
        auth: optional
        description: Get an individual story.
        errors:
          - code: story.not-found
            description: there is no story with the given ID
      - url: /stories/{id}
        type: PUT
        function: updateStory
        params:
          - type: String
            name: id
            description: ID of the story
        in:
          struct: StoryAttributes
          name: story
        out:
          struct: StoryInfo
        auth: admin
        description: >
          Update the story.
        errors:
          - code: story.not-found
            description: there is no story with the given ID
      - url: /stories/{id}
        type: DELETE
        function: deleteStory
        params:
          - type: String
            name: id
            description: ID of the story
        out:
          struct: Result
        auth: admin
        description: >
          Delete the story.
        errors:
          - code: story.not-found
            description: there is no story with the given ID
  - name: Subscribers
    description: >
      All nodes that have subscribed to notifications from this node.
    requests:
      - url: /people/subscribers
        type: GET
        function: getSubscribers
        query:
          - type: String
            name: nodeName
            optional: true
            description: filter by subscribed node name
          - enum: SubscriptionType
            name: type
            optional: true
            description: filter by subscription type
          - type: String
            name: feedName
            optional: true
            description: filter by name of the feed subscribed to
          - type: String
            name: entryId
            optional: true
            description: filter by ID of the entry subscribed to
        out:
          struct: SubscriberInfo
          array: true
        auth: optional
        description: Get the list of all subscribers, optionally filtered by some criteria.
      - url: /people/subscribers
        type: POST
        function: createSubscriber
        in:
          struct: SubscriberDescription
          name: subscriber
        out:
          struct: SubscriberInfo
        auth: required
        description: Subscribe to a particular group of notifications.
        errors:
          - code: feed.not-found
            description: there is no feed with the given name
          - code: posting.not-found
            description: there is no posting with the given ID
          - code: user-list.not-found
            description: there is no list of users with the given name
          - code: subscriber.too-many
            description: there are too many subscribers of this type
      - url: /people/subscribers/{id}
        type: GET
        function: getSubscriber
        params:
          - type: String
            name: id
            description: ID of the subscriber
        out:
          struct: SubscriberInfo
        auth: optional
        description: Get an individual subscriber.
        errors:
          - code: subscriber.not-found
            description: there is no subscriber with the given ID
      - url: /people/subscribers/{id}
        type: PUT
        function: updateSubscriber
        params:
          - type: String
            name: id
            description: ID of the subscriber
        in:
          struct: SubscriberOverride
          name: subscriber
        out:
          struct: SubscriberInfo
        auth: required
        description: >
          Update the subscriber's operations or set operations' overrides.
        errors:
          - code: subscriber.not-found
            description: there is no subscriber with the given ID
      - url: /people/subscribers/{id}
        type: DELETE
        function: deleteSubscriber
        params:
          - type: String
            name: id
            description: ID of the subscriber
        out:
          struct: ContactInfo
        auth: optional
        description: Delete the subscriber and return the updated information about the node that was subscribed.
        errors:
          - code: subscriber.not-found
            description: there is no subscriber with the given ID
  - name: Subscriptions
    description: >
      All nodes that send notifications to this node.
    requests:
      - url: /people/subscriptions
        type: GET
        function: getSubscriptions
        query:
          - type: String
            name: nodeName
            optional: true
            description: filter by node name
          - enum: SubscriptionType
            name: type
            optional: true
            description: filter by subscription type
        out:
          struct: SubscriptionInfo
          array: true
        auth: optional
        description: Get the list of all subscriptions, optionally filtered by some criteria.
      - url: /people/subscriptions
        type: POST
        function: createSubscription
        in:
          struct: SubscriptionDescription
          name: subscription
        out:
          struct: SubscriptionInfo
        auth: admin
        description: Register a subscription to notifications from a particular node.
        errors:
          - code: subscription.already-exists
            description: an identical subscription already exists
          - code: feed.not-found
            description: there is no feed with the given name
      - url: /people/subscriptions/{id}
        type: PUT
        function: updateSubscription
        params:
          - type: String
            name: id
            description: ID of the subscription
        in:
          struct: SubscriptionOverride
          name: subscription
        out:
          struct: SubscriptionInfo
        auth: required
        description: >
          Update the subscription's operations or set operations' overrides.
        errors:
          - code: subscription.not-found
            description: there is no subscription with the given ID
      - url: /people/subscriptions/{id}
        type: DELETE
        function: deleteSubscription
        params:
          - type: String
            name: id
            description: ID of the subscription
        out:
          struct: ContactInfo
        auth: admin
        description: Delete the subscription and return the updated information about the node that was subscribed to.
        errors:
          - code: subscription.not-found
            description: there is no subscription with the given parameters.
      - url: /people/subscriptions/search
        type: POST
        function: searchSubscriptions
        in:
          struct: SubscriptionFilter
          name: filter
        out:
          struct: SubscriptionInfo
          array: true
        auth: optional
        description: Search for subscriptions by the given criteria.
        errors:
          - code: subscription.filter.incomplete
            description: the filter should contain at least one feed or posting
  - name: Tokens
    description: >
      The authentication token. <a href="authentication.html">Read more</a> about token-based authentication.
    requests:
      - url: /tokens
        type: GET
        function: getTokens
        out:
          struct: TokenInfo
          array: true
        auth: admin
        description: Get the list of all existing tokens.
      - url: /tokens
        type: POST
        function: createToken
        in:
          struct: TokenAttributes
          name: token
        out:
          struct: TokenInfo
        description: Sign in and create a token.
        errors:
          - code: credentials.not-created
            description: credentials are not created yet
          - code: credentials.login-incorrect
            description: login or password is incorrect
      - url: /tokens/{id}
        type: GET
        function: getTokenInfo
        params:
          - type: String
            name: id
            description: ID of the token
        out:
          struct: TokenInfo
        auth: admin
        description: Get information about the token.
      - url: /tokens/{id}
        type: PUT
        function: updateToken
        params:
          - type: String
            name: id
            description: ID of the token
        in:
          struct: TokenUpdate
          name: update
        out:
          struct: TokenInfo
        auth: admin
        description: >
          Update the name or permissions of the token. It is not possible to grant token additional permissions with
          this request, but the granted permissions can be revoked.
      - url: /tokens/{id}
        type: DELETE
        function: deleteToken
        params:
          - type: String
            name: id
            description: ID of the token
        out:
          struct: Result
        auth: admin
        description: Delete the token.
  - name: User Lists
    description: >
      Any node may keep lists of users, and all other nodes can read these lists, search in them and subscribe to them
      to receive notifications about changes. The lists may be used, for example, to fight spam or to create
      decentralized communities. The sheriff uses such a list to inform all nodes that some specific user violates
      the rules too often, and because of that all his comments should be marked by the sheriff's mark automatically.
    requests:
      - url: /user-lists/{name}
        type: GET
        function: getUserListGeneral
        params:
          - type: String
            name: name
            description: the name of the list
        out:
          struct: UserListInfo
        description: Get the general information about the user list given.
      - url: /user-lists/{name}/items
        type: GET
        function: getUserListSlice
        params:
          - type: String
            name: name
            description: the name of the list
        query:
          - type: long
            name: after
            optional: true
            description: filter items created strongly after this moment
          - type: long
            name: before
            optional: true
            description: filter items created at or before this moment
          - type: int
            name: limit
            optional: true
            description: maximum number of items returned
        out:
          struct: UserListSliceInfo
        description: >
          Get a slice of the user list, delimited by the <code>before</code> or <code>after</code> moment and the given
          <code>limit</code>. If neither <code>before</code> nor <code>after</code> are provided, the latest items are
          returned. The node may decide to return fewer items than the given <code>limit</code>. The items are always
          sorted by moment, descending.
        errors:
          - code: user-list-items.before-after-exclusive
            description: before and after parameters are mutually exclusive
      - url: /user-lists/{name}/items/{nodeName}
        type: GET
        function: getUserListItem
        params:
          - type: String
            name: name
            description: the name of the list
          - type: String
            name: nodeName
            description: the node name to get information about
        out:
          struct: UserListItemInfo
        description: Get the information from the user list about the node given.
        errors:
          - code: user-list-item.not-found
            description: user list item is not found
      - url: /user-lists/{name}/items
        type: POST
        function: createUserListItem
        params:
          - type: String
            name: name
            description: the name of the list
        in:
          struct: UserListItemAttributes
          name: item
        out:
          struct: UserListItemInfo
        auth: admin
        description: Add a node to the user list.
        errors:
          - code: user-list-item.already-exists
            description: node is in the user list already
      - url: /user-lists/{name}/items/{nodeName}
        type: DELETE
        function: deleteUserListItem
        params:
          - type: String
            name: name
            description: the name of the list
          - type: String
            name: nodeName
            description: the node name to delete
        out:
          struct: Result
        auth: admin
        description: Delete a node from the user list
        errors:
          - code: user-list-item.not-found
            description: user list item is not found
  - name: Who Am I
    description: Brief information about the node.
    requests:
      - url: /whoami
        type: GET
        function: whoAmI
        out:
          struct: WhoAmI
        description: Get brief information about the node.

structures:
  - name: AcceptedReactions
    fields:
      - type: String
        name: positive
        description: >
          comma-separated list of codes of the positive reactions that are accepted; a code may be prefixed by
          <code>0x</code> to designate hexadecimal number and <code>+</code> to designate a recommended reaction
        constraints:
          - length:
              max: 255
              error: accepted-reactions.positive.wrong-size
          - emojilist:
              error: accepted-reactions.positive.invalid
      - type: String
        name: negative
        description: >
          comma-separated list of codes of the negative reactions that are accepted (the format is the same as above)
        constraints:
          - length:
              max: 255
              error: accepted-reactions.negative.wrong-size
          - emojilist:
              error: accepted-reactions.negative.invalid
  - name: ActivityReactionFilter
    fields:
      - struct: RemotePosting
        array: true
        name: postings
        optional: true
        description: include only reactions to remote postings from this list
  - name: ActivityReactionInfo
    fields:
      - type: String
        name: remoteNodeName
        description: name of the remote node
      - type: String
        name: remoteFullName
        optional: true
        description: full name of the remote node
      - struct: AvatarImage
        name: remoteAvatar
        optional: true
        description: avatar of the remote node
      - type: String
        name: remotePostingId
        description: ID of the posting on the remote node
      - type: boolean
        name: negative
        description: <code>true</code>, if the reaction is negative, <code>false</code>, if positive
      - type: int
        name: emoji
        description: reaction code, usually interpreted by clients as emoji code point
      - type: timestamp
        name: createdAt
        description: reaction creation timestamp - the real time when the reaction was created
  - name: AskDescription
    fields:
      - enum: AskSubject
        name: subject
        description: request subject
        constraints:
          - notnull:
              error: ask.subject.missing
      - type: String
        name: friendGroupId
        optional: true
        description: >
          if the request is to add this node to friends, this field contains ID of the corresponding group of friends on
          the remote node
        constraints:
          - length:
              max: 40
              error: ask.friend-group-id.wrong-size
      - type: String
        name: message
        optional: true
        description: message to the node admin
        constraints:
          - length:
              max: 70
              error: ask.message.wrong-size
  - name: AsyncOperationCreated
    fields:
      - type: String
        name: id
        description: ID of the asynchronous operation that was created
  - name: AvatarAttributes
    fields:
      - type: String
        name: mediaId
        description: ID of the public media file used as a source image
        constraints:
          - notblank:
              error: avatar.media-id.blank
      - type: int
        name: clipX
        description: x coordinate of the top-left corner of the clipping square
        constraints:
          - other:
              error: avatar.clip-x.out-of-range
              description: is out of the image bounds
      - type: int
        name: clipY
        description: y coordinate of the top-left corner of the clipping square
        constraints:
          - other:
              error: avatar.clip-y.out-of-range
              description: is out of the image bounds
      - type: int
        name: clipSize
        description: size of the clipping square
        constraints:
          - value:
              min: 100
              error: avatar.clip-size.out-of-range
      - type: int
        name: avatarSize
        description: size of the avatar to be created
        constraints:
          - value:
              min: 200
              error: avatar.avatar-size.out-of-range
      - type: float
        name: rotate
        description: rotation angle of the source image
      - type: String
        name: shape
        optional: true
        description: shape of the avatar
      - type: int
        name: ordinal
        optional: true
        description: ordinal of the avatar
  - name: AvatarDescription
    fields:
      - type: String
        name: mediaId
        description: ID of the public media file used as an avatar image
      - type: String
        name: shape
        description: shape of the avatar
      - type: boolean
        name: optional
        optional: true
        description: >
          if set to <code>true</code>, the node will ignore the absence of the media file referenced in
          <code>mediaId</code> field (empty avatar will be used in this case); if set to <code>false</code> or absent,
          the node will return an error, if the media file referenced in <code>mediaId</code> field is absent
  - name: AvatarImage
    fields:
      - type: String
        name: mediaId
        description: ID of the media file
      - type: String
        name: path
        description: >
          virtual location of the media file, relative to the <code>/media</code>
          <a href="virtual-pages.html">virtual page</a>
      - type: int
        name: width
        optional: true
        description: width of the media in pixels (<code>null</code>, if the media file is not an image/video)
      - type: int
        name: height
        optional: true
        description: height of the media in pixels (<code>null</code>, if the media file is not an image/video)
      - type: String
        name: shape
        optional: true
        description: shape of the avatar
  - name: AvatarInfo
    fields:
      - type: String
        name: id
        description: ID of the avatar
      - type: String
        name: mediaId
        description: ID of the media file
      - type: String
        name: path
        description: >
          virtual location of the media file, relative to the <code>/media</code>
          <a href="virtual-pages.html">virtual page</a>
      - type: int
        name: width
        optional: true
        description: width of the media in pixels (<code>null</code>, if the media file is not an image/video)
      - type: int
        name: height
        optional: true
        description: height of the media in pixels (<code>null</code>, if the media file is not an image/video)
      - type: String
        name: shape
        optional: true
        description: shape of the avatar
      - type: int
        name: ordinal
        description: ordinal of the avatar
  - name: AvatarOrdinal
    fields:
      - type: String
        name: id
        description: ID of the avatar
      - type: int
        name: ordinal
        description: ordinal of the avatar
  - name: AvatarsOrdered
    fields:
      - type: String[]
        name: ids
        description: IDs of avatars
  - name: BlockedByUserFilter
    fields:
      - enum: BlockedOperation
        array: true
        name: blockedOperations
        optional: true
        description: operations that are blocked
      - struct: RemotePostingOrNode
        array: true
        name: postings
        optional: true
        description: the postings or whole nodes, where the node is blocked
      - type: boolean
        name: strict
        optional: true
        description: >
          if set to <code>true</code>, only the blockings that strictly fit the criteria are returned; otherwise global
          blockings are returned even if the search is limited to a particular posting
  - name: BlockedByUserInfo
    fields:
      - type: String
        name: id
      - enum: BlockedOperation
        name: blockedOperation
        description: operation that is blocked
      - struct: ContactInfo
        name: contact
        optional: true
        description: information known about the blocking node
      - type: String
        name: nodeName
        description: name of the blocking node
      - type: String
        name: postingId
        optional: true
        description: >
          ID of the posting, where the node is blocked; <code>null</code> or absent, if the node is blocked globally
      - type: timestamp
        name: createdAt
        description: blocking timestamp - the real time when the node was blocked
      - type: timestamp
        name: deadline
        optional: true
        description: >
          unblocking timestamp - the real time when the node will be unblocked; <code>null</code> or absent, if the node
          is blocked permanently
      - type: String
        name: reason
        optional: true
        description: reason of blocking
  - name: BlockedInstantAttributes
    fields:
      - enum: StoryType
        name: storyType
        description: type of the story
        constraints:
          - notnull:
              error: blocked-instant.story-type.missing
      - type: String
        name: entryId
        optional: true
        description: ID of the local entry the blocked story should be related to
      - type: String
        name: remoteNodeName
        optional: true
        description: node name of the remote posting the blocked story should be related to
      - type: String
        name: remotePostingId
        optional: true
        description: ID of the remote posting the blocked story should be related to
      - type: String
        name: remoteOwnerName
        optional: true
        description: owner name of the remote object the blocked story should be related to
      - type: timestamp
        name: deadline
        optional: true
        description: >
          unblocking timestamp - the real time when the story will be unblocked; <code>null</code> or absent, if
          the story is blocked permanently
  - name: BlockedInstantFilter
    fields:
      - enum: StoryType
        name: storyType
        description: type of the story
      - type: String
        name: entryId
        optional: true
        description: ID of the local entry the blocked story should be related to
      - type: String
        name: remoteNodeName
        optional: true
        description: node name of the remote posting the blocked story should be related to
      - type: String
        name: remotePostingId
        optional: true
        description: ID of the remote posting the blocked story should be related to
      - type: String
        name: remoteOwnerName
        optional: true
        description: owner name of the remote object the blocked story should be related to
  - name: BlockedInstantInfo
    fields:
      - type: String
        name: id
      - enum: StoryType
        name: storyType
        description: type of the story
      - type: String
        name: entryId
        optional: true
        description: ID of the local entry the blocked story should be related to
      - type: String
        name: remoteNodeName
        optional: true
        description: node name of the remote posting the blocked story should be related to
      - type: String
        name: remotePostingId
        optional: true
        description: ID of the remote posting the blocked story should be related to
      - type: String
        name: remoteOwnerName
        optional: true
        description: owner name of the remote object the blocked story should be related to
      - type: timestamp
        name: createdAt
        description: blocking timestamp - the real time when the story was blocked
      - type: timestamp
        name: deadline
        optional: true
        description: >
          unblocking timestamp - the real time when the story will be unblocked; <code>null</code> or absent, if
          the story is blocked permanently
  - name: BlockedPostingInstantInfo
    fields:
      - type: String
        name: id
      - enum: StoryType
        name: storyType
        description: type of the story
      - type: String
        name: remoteOwnerName
        optional: true
        description: owner name of the remote object the blocked story should be related to
      - type: timestamp
        name: deadline
        optional: true
        description: >
          unblocking timestamp - the real time when the story will be unblocked; <code>null</code> or absent, if
          the story is blocked permanently
  - name: BlockedUserAttributes
    fields:
      - enum: BlockedOperation
        name: blockedOperation
        description: operation that is to be blocked
        constraints:
          - notnull:
              error: blocked-user.blocked-operation.missing
      - type: String
        name: nodeName
        description: name of the blocked node
        constraints:
          - notblank:
              error: blocked-user.node-name.blank
      - type: String
        name: entryId
        optional: true
        description: >
          ID of the local entry, where the node is blocked; <code>null</code> or absent, if the node is blocked globally
      - type: String
        name: entryNodeName
        optional: true
        description: >
          node name of the remote posting, where the node is blocked; <code>null</code> or absent, if the node is
          blocked globally
      - type: String
        name: entryPostingId
        optional: true
        description: >
          ID of the remote posting, where the node is blocked; <code>null</code> or absent, if the node is blocked
          globally
      - type: timestamp
        name: deadline
        optional: true
        description: >
          unblocking timestamp - the real time when the node will be unblocked; <code>null</code> or absent, if the node
          is blocked permanently
      - type: String
        name: reasonSrc
        optional: true
        description: source text of the reason of blocking
        constraints:
          - length:
              max: 4096
              error: blocked-user.reason-src.wrong-size
      - enum: SourceFormat
        name: reasonSrcFormat
        optional: true
        description: >
          format of the source text of the reason of blocking, the list of available formats is returned in
          <code><a href="#PostingFeatures">PostingFeatures</a></code>
  - name: BlockedUserFilter
    fields:
      - enum: BlockedOperation
        array: true
        name: blockedOperations
        optional: true
        description: operations that are blocked
      - type: String
        name: nodeName
        optional: true
        description: name of the blocked node
      - type: String
        name: entryId
        optional: true
        description: >
          ID of the local entry, where the node is blocked; <code>null</code> or absent, if the node is blocked globally
      - type: String
        name: entryNodeName
        optional: true
        description: >
          node name of the remote posting, where the node is blocked; <code>null</code> or absent, if the node is
          blocked globally
      - type: String
        name: entryPostingId
        optional: true
        description: >
          ID of the remote posting, where the node is blocked; <code>null</code> or absent, if the node is blocked
          globally
      - type: boolean
        name: strict
        optional: true
        description: >
          if set to <code>true</code>, only the blockings that strictly fit the criteria are returned; otherwise global
          blockings are returned even if the search is limited to a particular posting
  - name: BlockedUserInfo
    fields:
      - type: String
        name: id
      - enum: BlockedOperation
        name: blockedOperation
        description: operation that is blocked
      - type: String
        name: nodeName
        description: name of the blocked node
      - struct: ContactInfo
        name: contact
        optional: true
        description: information known about the blocked node
      - type: String
        name: entryId
        optional: true
        description: >
          ID of the local entry, where the node is blocked; <code>null</code> or absent, if the node is blocked globally
      - type: String
        name: entryNodeName
        optional: true
        description: >
          node name of the remote posting, where the node is blocked; <code>null</code> or absent, if the node is
          blocked globally
      - type: String
        name: entryPostingId
        optional: true
        description: >
          ID of the remote posting, where the node is blocked; <code>null</code> or absent, if the node is blocked
          globally
      - type: timestamp
        name: createdAt
        description: blocking timestamp - the real time when the node was blocked
      - type: timestamp
        name: deadline
        optional: true
        description: >
          unblocking timestamp - the real time when the node will be unblocked; <code>null</code> or absent, if the node
          is blocked permanently
      - type: String
        name: reasonSrc
        optional: true
        description: source text of the reason of blocking
      - enum: SourceFormat
        name: reasonSrcFormat
        optional: true
        description: >
          format of the source text of the reason of blocking, the list of available formats is returned in
          <code><a href="#PostingFeatures">PostingFeatures</a></code>
      - type: String
        name: reason
        optional: true
        description: reason of blocking
  - name: BlockedUsersChecksums
    fields:
      - type: long
        name: visibility
        description: checksum of the list of users that are hidden
  - name: Body
    fields:
      - type: String
        name: subject
        optional: true
        description: the subject (plain text)
      - type: String
        name: text
        optional: true
        description: the text (HTML)
      - struct: LinkPreview
        array: true
        name: linkPreviews
        optional: true
        description: link previews
  - name: CarteAttributes
    fields:
      - enum: Scope
        array: true
        name: clientScope
        optional: true
        description: >
          permissions to be granted to the carte; if not set, all permissions of the carte's owner are granted
      - enum: Scope
        array: true
        name: adminScope
        optional: true
        description: >
          additional administrative permissions (of those granted to the carte's owner by the target node) to be granted
          to the carte
      - type: String
        name: nodeName
        optional: true
        description: if set, the carte is valid for authentication on the specified node only
      - type: int
        name: limit
        optional: true
        description: maximum number of sequential cartes to be returned; the node may decide to return fewer cartes than
          the given limit
  - name: CarteInfo
    fields:
      - type: String
        name: carte
      - type: timestamp
        name: beginning
        description: timestamp of the beginning of the carte's life
      - type: timestamp
        name: deadline
        description: timestamp of the end of the carte's life
      - type: String
        name: nodeName
        optional: true
        description: if set, the carte is valid for authentication on the specified node only
      - enum: Scope
        array: true
        name: clientScope
        optional: true
        description: the list of permissions granted to the carte
      - enum: Scope
        array: true
        name: adminScope
        optional: true
        description: >
          the list of additional administrative permissions (of those granted to the carte's owner by the target node)
          granted to the carte
  - name: CarteSet
    fields:
      - type: String
        name: cartesIp
        optional: true
        description: the client IP address the cartes are bound to
      - struct: CarteInfo
        array: true
        name: cartes
        description: the cartes
      - type: timestamp
        name: createdAt
        description: cartes creation timestamp
  - name: CarteVerificationInfo
    fields:
      - type: boolean
        name: valid
        description: <code>true</code>, if the carte can be accepted for authentication, <code>false</code> otherwise
      - type: String
        name: clientName
        optional: true
        description: name of the node the carte authenticates
      - enum: Scope
        array: true
        name: clientScope
        optional: true
        description: the list of permissions granted to the carte
      - enum: Scope
        array: true
        name: adminScope
        optional: true
        description: >
          the list of additional administrative permissions (of those granted to the carte's owner by the target node)
          granted to the carte
      - type: String
        name: errorCode
        optional: true
        description: error code
      - type: String
        name: errorMessage
        optional: true
        description: human-readable error message
  - name: ClientCarte
    fields:
      - type: String
        name: clientName
        optional: true
        description: the node name the client (carte owner) wants to authenticate under
      - type: String
        name: carte
        description: the carte to verify
        constraints:
          - notblank:
              error: carte.carte.blank
  - name: ClientReactionInfo
    fields:
      - type: boolean
        name: negative
        description: <code>true</code>, if the reaction is negative, <code>false</code>, if positive
      - type: int
        name: emoji
        description: reaction code, usually interpreted by clients as emoji code point
      - type: timestamp
        name: createdAt
        description: reaction creation timestamp - the real time when the reaction was created
      - type: timestamp
        name: deadline
        optional: true
        description: if present, the reaction will be erased at this time
  - name: CommentCreated
    fields:
      - struct: CommentInfo
        name: comment
        description: details of the comment created
      - type: int
        name: total
        description: total number of comments in the posting after the creation
  - name: CommentInfo
    java-interfaces:
      - MediaInfo
    fields:
      - type: String
        name: id
      - type: String
        name: ownerName
        description: node name of the comment's owner
      - type: String
        name: ownerFullName
        optional: true
        description: full name of the comment's owner
      - type: String
        name: ownerGender
        optional: true
        description: gender of the comment's owner
      - struct: AvatarImage
        name: ownerAvatar
        optional: true
        description: avatar of the comment's owner
      - type: String
        name: postingId
        description: ID of the parent posting of the comment
      - type: String
        name: postingRevisionId
        description: ID of the revision of parent posting that was current when the comment was created
      - type: String
        name: revisionId
        description: ID of the current revision of the comment
      - type: int
        name: totalRevisions
        description: total number of revisions the comment has
      - struct: Body
        name: bodyPreview
        optional: true
        description: preview of the comment's body, a string representation of a JSON structure
      - struct: Body
        name: bodySrc
        optional: true
        description: >
          the source text of the comment, a string representation of a JSON structure, may be absent if not requested
      - type: byte[]
        name: bodySrcHash
        description: hash of the source text of the comment
      - enum: SourceFormat
        name: bodySrcFormat
        optional: true
        description: >
          format of the source text of the comment, the list of available formats is returned in
          <code><a href="#PostingFeatures">PostingFeatures</a></code>
      - struct: Body
        name: body
        description: body of the comment, a string representation of a JSON structure
      - enum: BodyFormat
        name: bodyFormat
        optional: true
        description: format of the body of the comment, may have any value meaningful for the client
      - struct: MediaAttachment
        array: true
        name: media
        optional: true
        description: list of the media attached to the comment
      - type: String
        name: heading
        description: heading of the comment
      - struct: RepliedTo
        name: repliedTo
        optional: true
        description: information about the comment this comment is replying to
      - type: long
        name: moment
      - type: timestamp
        name: createdAt
        description: comment creation timestamp - the real time when the comment was created
      - type: timestamp
        name: editedAt
        optional: true
        description: comment editing timestamp - the last time the comment was updated
      - type: timestamp
        name: deletedAt
        optional: true
        description: comment deletion timestamp - the time when the comment was deleted
      - type: timestamp
        name: revisionCreatedAt
        description: creation timestamp of the current revision of the comment
      - type: timestamp
        name: deadline
        optional: true
        description: comment purging timestamp - the time when the deleted comment will be purged from the database
      - type: byte[]
        name: digest
        optional: true
        description: >
          cryptographic digest of the comment (use <code><a href="fingerprints.html#Comment">Comment</a></code>
          fingerprint)
      - type: byte[]
        name: signature
        optional: true
        description: >
          the comment's owner signature (use <code><a href="fingerprints.html#Comment">Comment</a></code>
          fingerprint)
      - type: short
        name: signatureVersion
        optional: true
        description: signature version (i.e. fingerprint version)
      - struct: CommentOperations
        name: operations
        optional: true
        description: the supported operations and the corresponding principals
      - struct: ReactionOperations
        name: reactionOperations
        optional: true
        description: the operations and the corresponding principals that are overridden in reactions to the comment
      - struct: CommentOperations
        name: ownerOperations
        optional: true
        description: the supported operations and the corresponding principals as defined by the comment's owner
      - struct: CommentOperations
        name: seniorOperations
        optional: true
        description: >
          the operations and the corresponding principals that are overridden by the posting's owner ("senior")
      - enum: BlockedEntryOperation
        array: true
        name: blockedOperations
        optional: true
        description: operations on the comment that are blocked for the client
      - struct: SheriffMark
        array: true
        name: sheriffMarks
        optional: true
        description: list of sheriff marks on the comment
      - struct: AcceptedReactions
        name: acceptedReactions
        optional: true
        description: types of reactions that the comment accepts
      - struct: ClientReactionInfo
        name: clientReaction
        optional: true
        description: details of the existing reaction (if any) of the client's owner
      - struct: ClientReactionInfo
        name: seniorReaction
        optional: true
        description: details of the existing reaction (if any) of the posting's owner ("senior") to the comment
      - struct: ReactionTotalsInfo
        name: reactions
        optional: true
        description: summary of reactions to the comment
  - name: CommentMassAttributes
    fields:
      - struct: CommentOperations
        name: seniorOperations
        optional: true
        description: >
          the operations and the corresponding principals that are overridden by the comment's owner ("senior")
        constraints:
          - other:
              error: comment.senior-operations.wrong-principal
              description: contain an incorrect principal
  - name: CommentRevisionInfo
    fields:
      - type: String
        name: id
      - type: String
        name: postingRevisionId
        description: ID of the posting revision that was actual at the moment of creation of this comment revision
      - struct: Body
        name: bodyPreview
        optional: true
        description: preview of the revision's body, a string representation of a JSON structure
      - type: byte[]
        name: bodySrcHash
        description: hash of the source text of the revision
      - enum: SourceFormat
        name: bodySrcFormat
        optional: true
        description: >
          format of the source text of the revision, the list of available formats is returned in
          <code><a href="#PostingFeatures">PostingFeatures</a></code>
      - struct: Body
        name: body
        description: body of the revision, a string representation of a JSON structure
      - enum: BodyFormat
        name: bodyFormat
        optional: true
        description: format of the body of the revision, may have any value meaningful for the client
      - type: String
        name: heading
        description: heading of the revision
      - type: timestamp
        name: createdAt
        description: revision creation timestamp - the real time when the revision was created
      - type: timestamp
        name: deletedAt
        optional: true
        description: revision deletion timestamp - the time when the revision was deleted
      - type: timestamp
        name: deadline
        optional: true
        description: >
          revision deletion timestamp - the time when the revision will be deleted and the previous revision will take
          its place
      - type: byte[]
        name: digest
        optional: true
        description: >
          cryptographic digest of the revision (use <code><a href="fingerprints.html#Comment">Comment</a></code>
          fingerprint)
      - type: byte[]
        name: signature
        optional: true
        description: >
          the comment's owner signature (use <code><a href="fingerprints.html#Comment">Comment</a></code>
          fingerprint)
      - type: short
        name: signatureVersion
        optional: true
        description: signature version (i.e. fingerprint version)
      - struct: ClientReactionInfo
        name: clientReaction
        optional: true
        description: details of the existing reaction (if any) of the client's owner
      - struct: ReactionTotalsInfo
        name: reactions
        optional: true
        description: summary of reactions to the revision
  - name: CommentsSliceInfo
    fields:
      - type: long
        name: before
        description: the slice contains all comments before this moment, inclusive. May be the far future.
      - type: long
        name: after
        description: the slice contains all comments after this moment, exclusive. May be the far past.
      - struct: CommentInfo
        array: true
        name: comments
        description: the comments
      - type: int
        name: total
        description: total number of comments
      - type: int
        name: totalInPast
        description: number of comments before this slice till the far past
      - type: int
        name: totalInFuture
        description: number of comments after this slice till the far future
  - name: CommentSourceText
    fields:
      - struct: AvatarDescription
        name: ownerAvatar
        optional: true
        description: avatar of the comment's owner
      - struct: Body
        name: bodySrc
        optional: true
        description: the source text of the comment, a string representation of a JSON structure
        constraints:
          - notnull:
              error: comment.body-src.blank
          - length:
              max: 65535
              error: comment.body-src.wrong-size
      - enum: SourceFormat
        name: bodySrcFormat
        optional: true
        description: >
          format of the source text of the comment, <code>plain-text</code> by default; the list of available formats is
          returned in <code><a href="#PostingFeatures">PostingFeatures</a></code>
      - struct: MediaWithDigest
        array: true
        name: media
        optional: true
        description: array of IDs and digests of private media to be attached to the comment
      - struct: AcceptedReactions
        name: acceptedReactions
        optional: true
        description: types of reactions that the comment accepts
      - type: String
        name: repliedToId
        optional: true
        description: ID of the comment this comment is replying to
      - struct: CommentOperations
        name: operations
        optional: true
        description: the operations and the corresponding principals
        constraints:
          - other:
              error: comment.operations.wrong-principal
              description: contain an incorrect principal
      - struct: ReactionOperations
        name: reactionOperations
        optional: true
        description: the operations and the corresponding principals that are overridden in reactions to the comment
        constraints:
          - other:
              error: comment.reaction-operations.wrong-principal
              description: contain an incorrect principal
      - struct: CommentOperations
        name: seniorOperations
        optional: true
        description: >
          the operations and the corresponding principals that are overridden by the posting's owner ("senior"); only
          the senior may set this
        constraints:
          - other:
              error: comment.senior-operations.wrong-principal
              description: contain an incorrect principal
  - name: CommentText
    fields:
      - type: String
        name: ownerName
        optional: true
        description: node name of the comment's owner
        constraints:
          - length:
              max: 63
              error: comment.owner-name.wrong-size
      - type: String
        name: ownerFullName
        optional: true
        description: full name of the comment's owner
        constraints:
          - length:
              max: 96
              error: comment.owner-full-name.wrong-size
      - type: String
        name: ownerGender
        optional: true
        description: gender of the comment's owner
        constraints:
          - length:
              max: 31
              error: comment.owner-gender.wrong-size
      - struct: AvatarDescription
        name: ownerAvatar
        optional: true
        description: avatar of the comment's owner
      - struct: Body
        name: bodyPreview
        optional: true
        description: preview of the comment's body, a string representation of a JSON structure
      - struct: Body
        name: bodySrc
        optional: true
        description: the source text of the comment, a string representation of a JSON structure
        constraints:
          - other:
              error: comment.body-src.blank
              description: is empty
          - other:
              error: comment.body-src.wrong-size
              description: is too long
      - enum: SourceFormat
        name: bodySrcFormat
        optional: true
        description: >
          format of the source text of the comment, <code>plain-text</code> by default; the list of available formats is
          returned in <code><a href="#PostingFeatures">PostingFeatures</a></code>
      - struct: Body
        name: body
        optional: true
        description: body of the comment, a string representation of a JSON structure
        constraints:
          - other:
              error: comment.body.blank
              description: is empty
          - other:
              error: comment.body.wrong-size
              description: is too long
      - enum: BodyFormat
        name: bodyFormat
        optional: true
        description: format of the body of the comment, may have any value meaningful for the client
        constraints:
          - other:
              error: comment.body-format.missing
              description: is missing
      - type: String[]
        name: media
        optional: true
        description: array of IDs of private media to be attached to the comment
      - type: timestamp
        name: createdAt
        optional: true
        description: comment creation timestamp - the real time when the comment was created
        constraints:
          - other:
              error: comment.created-at.missing
              description: is missing
          - other:
              error: comment.created-at.out-of-range
              description: is too far from now
      - struct: AcceptedReactions
        name: acceptedReactions
        optional: true
        description: types of reactions that the comment accepts
      - type: String
        name: repliedToId
        optional: true
        description: ID of the comment this comment is replying to
        constraints:
          - other:
              error: comment.replied-to-id.not-found
              description: is not found
      - type: byte[]
        name: signature
        optional: true
        description: >
          the comment's owner signature (use <code><a href="fingerprints.html#Comment">Comment</a></code>
          fingerprint)
      - type: short
        name: signatureVersion
        optional: true
        description: signature version (i.e. fingerprint version)
      - struct: CommentOperations
        name: operations
        optional: true
        description: the operations and the corresponding principals
        constraints:
          - other:
              error: comment.operations.wrong-principal
              description: contain an incorrect principal
      - struct: ReactionOperations
        name: reactionOperations
        optional: true
        description: the operations and the corresponding principals that are overridden in reactions to the comment
        constraints:
          - other:
              error: comment.reaction-operations.wrong-principal
              description: contain an incorrect principal
      - struct: CommentOperations
        name: seniorOperations
        optional: true
        description: >
          the operations and the corresponding principals that are overridden by the posting's owner ("senior"); only
          the senior may set this
        constraints:
          - other:
              error: comment.senior-operations.wrong-principal
              description: contain an incorrect principal
  - name: CommentTotalInfo
    fields:
      - type: int
        name: total
        description: total number of comments in the posting after the operation
  - name: ContactInfo
    fields:
      - type: String
        name: nodeName
      - type: String
        name: fullName
        optional: true
      - type: String
        name: gender
        optional: true
      - struct: AvatarImage
        name: avatar
        optional: true
      - type: float
        name: distance
        description: >
          social distance between the contact and the node, which depends on subscription and friendship status and
          the number recent reactions and comments
      - type: boolean
        name: hasFeedSubscriber
        optional: true
        description: the contact is subscribed to at least one of the node's feeds
      - type: boolean
        name: hasFeedSubscription
        optional: true
        description: the node is subscribed to at least one of the contact's feeds
      - type: boolean
        name: hasFriend
        optional: true
        description: the contact is a friend of the node
      - type: boolean
        name: hasFriendOf
        optional: true
        description: the node is a friend of the contact
      - type: boolean
        name: hasBlock
        optional: true
        description: the contact is blocked by the node
      - type: boolean
        name: hasBlockBy
        optional: true
        description: the node is blocked by the contact
      - struct: ContactOperations
        name: operations
        optional: true
        description: the supported operations and the corresponding principals
      - struct: ContactOperations
        name: ownerOperations
        optional: true
        description: the supported operations and the corresponding principals as defined by the contact's owner
      - struct: ContactOperations
        name: adminOperations
        optional: true
        description: the operations and the corresponding principals that are overridden by the node administrator
  - name: Credentials
    fields:
      - type: String
        name: login
        constraints:
          - notblank:
              error: credentials.login.blank
      - type: String
        name: password
        constraints:
          - notblank:
              error: credentials.password.blank
  - name: CredentialsChange
    fields:
      - type: String
        name: token
        optional: true
        description: credentials reset token
      - type: String
        name: oldPassword
        optional: true
        description: the current password
      - type: String
        name: login
        constraints:
          - notblank:
              error: credentials.login.blank
      - type: String
        name: password
        constraints:
          - notblank:
              error: credentials.password.blank
  - name: CredentialsCreated
    fields:
      - type: boolean
        name: created
        description: <code>true</code> if the credentials are initialized already, <code>false</code> otherwise
  - name: DeleteNodeStatus
    fields:
      - type: boolean
        name: requested
        description: <code>true</code> if the request is sent, <code>false</code> otherwise
  - name: DeleteNodeText
    fields:
      - type: String
        name: message
        optional: true
        description: text message for the provider
        constraints:
          - length:
              max: 1024
              error: delete-node.message.wrong-size
  - name: DomainAttributes
    fields:
      - type: String
        name: name
        optional: true
        description: domain's hostname or <code>_default_</code> for the default domain
        constraints:
          - domainname:
              error: domain.name.invalid-domain
      - type: UUID
        name: nodeId
        optional: true
        description: domain's node ID
  - name: DomainAvailable
    fields:
      - type: String
        name: name
        description: fully-qualified domain name
  - name: DomainInfo
    fields:
      - type: String
        name: name
        description: domain's hostname or <code>_default_</code> for the default domain
      - type: UUID
        name: nodeId
        description: domain's node ID
      - type: timestamp
        name: createdAt
        description: domain creation timestamp
  - name: DraftInfo
    fields:
      - type: String
        name: id
      - enum: DraftType
        name: draftType
        description: type of the draft
      - type: String
        name: receiverName
        description: name of the node the draft is related to
      - type: String
        name: receiverPostingId
        optional: true
        description: ID of the posting, set for all types, except <code>new-posting</code>
      - type: String
        name: receiverCommentId
        optional: true
        description: ID of the comment, set for <code>comment-update</code> type
      - type: String
        name: repliedToId
        optional: true
        description: ID of the comment replied to, set for comment drafts, if needed
      - type: timestamp
        name: createdAt
        description: draft creation timestamp - the real time when the draft was created
      - type: timestamp
        name: editedAt
        optional: true
        description: draft editing timestamp - the last time the draft was updated
      - type: timestamp
        name: deadline
        optional: true
        description: draft purging timestamp - the time when the draft will be purged from the database, if not updated
      - type: String
        name: ownerFullName
        optional: true
        description: full name of the posting's/comment's owner
      - struct: AvatarImage
        name: ownerAvatar
        optional: true
        description: avatar of the posting's/comment's owner
      - struct: AcceptedReactions
        name: acceptedReactions
        optional: true
        description: types of reactions that the posting accepts
      - struct: Body
        name: bodySrc
        optional: true
        description: the source text of the draft, a string representation of a JSON structure
      - enum: SourceFormat
        name: bodySrcFormat
        optional: true
        description: >
          format of the source text of the draft, <code>plain-text</code> by default; the list of available formats is
          returned in <code><a href="#PostingFeatures">PostingFeatures</a></code>
      - struct: Body
        name: body
        description: body of the draft, a string representation of a JSON structure
      - enum: BodyFormat
        name: bodyFormat
        optional: true
        description: format of the body of the draft
      - struct: MediaAttachment
        array: true
        name: media
        optional: true
        description: list of the media attached to the draft
      - type: String
        name: heading
        description: heading of the draft
      - type: timestamp
        name: publishAt
        optional: true
        description: story publication timestamp - the time the story must be published under in the feed
      - struct: UpdateInfo
        name: updateInfo
        optional: true
        description: description of the update
      - struct: PostingOperations
        name: operations
        optional: true
        description: draft of the list of operations and the corresponding principals
      - struct: CommentOperations
        name: commentOperations
        optional: true
        description: >
          draft of the list of operations and the corresponding principals that are overridden in the posting's
          comments, set for posting drafts, if needed
  - name: DraftText
    fields:
      - enum: DraftType
        name: draftType
        description: type of the draft
      - type: String
        name: receiverName
        description: name of the node the draft is related to
        constraints:
          - notblank:
              error: draft.receiver-name.blank
          - length:
              max: 63
              error: draft.receiver-name.wrong-size
      - type: String
        name: receiverPostingId
        optional: true
        description: ID of the posting, mandatory for all types, except <code>new-posting</code>
        constraints:
          - other:
              error: draft.receiver-posting-id.blank
              description: is empty
          - length:
              max: 40
              error: draft.receiver-posting-id.wrong-size
      - type: String
        name: receiverCommentId
        optional: true
        description: ID of the comment, mandatory for <code>comment-update</code> type
        constraints:
          - other:
              error: draft.receiver-comment-id.blank
              description: is empty
          - length:
              max: 40
              error: draft.receiver-comment-id.wrong-size
      - type: String
        name: repliedToId
        optional: true
        description: ID of the comment replied to
        constraints:
          - length:
              max: 40
              error: draft.replied-to-id.wrong-size
      - type: String
        name: ownerFullName
        optional: true
        description: full name of the posting's/comment's owner
        constraints:
          - length:
              max: 96
              error: draft.owner-full-name.wrong-size
      - struct: AvatarDescription
        name: ownerAvatar
        optional: true
        description: avatar of the posting's/comment's owner
      - struct: AcceptedReactions
        name: acceptedReactions
        optional: true
        description: types of reactions that the posting accepts
      - struct: Body
        name: bodySrc
        optional: true
        description: the source text of the draft, a string representation of a JSON structure
        constraints:
          - other:
              error: draft.body-src.wrong-size
              description: is too large
      - enum: SourceFormat
        name: bodySrcFormat
        optional: true
        description: >
          format of the source text of the draft, <code>plain-text</code> by default; the list of available formats is
          returned in <code><a href="#PostingFeatures">PostingFeatures</a></code>
      - struct: RemoteMedia
        array: true
        name: media
        optional: true
        description: list of the media attached to the draft, the media may be located on another node
      - type: timestamp
        name: publishAt
        optional: true
        description: story publication timestamp - the time the story must be published under in the feed
      - struct: UpdateInfo
        name: updateInfo
        optional: true
        description: description of the update
      - struct: PostingOperations
        name: operations
        optional: true
        description: draft of the list of operations and the corresponding principals
      - struct: CommentOperations
        name: commentOperations
        optional: true
        description: >
          draft of the list of operations and the corresponding principals that are overridden in the posting's
          comments
  - name: EmailHint
    fields:
      - type: String
        name: emailHint
        description: >
          a masked E-mail address that should help user to understand which E-mail address was used without revealing it
  - name: EntryInfo
    fields:
      - struct: PostingInfo
        name: posting
        optional: true
        description: posting details, set if the entry is a posting
      - struct: CommentInfo
        name: comment
        optional: true
        description: comment details, set if the entry is a comment
  - name: Features
    fields:
      - struct: PostingFeatures
        name: posting
        description: features of a posting
      - type: String[]
        name: plugins
        optional: true
        description: list of names of plugins enabled for the node
      - type: int
        name: feedWidth
        description: width of the feed in pixels
      - struct: FriendGroupsFeatures
        name: friendGroups
        optional: true
        description: features of groups of friends
      - enum: AskSubject
        array: true
        name: ask
        optional: true
        description: list of requests to the node owner that are accepted by the node
      - type: boolean
        name: subscribed
        optional: true
        description: <code>true</code>, if the node is subscribed to the client, <code>false</code> otherwise
  - name: FeedInfo
    fields:
      - type: String
        name: feedName
        description: name of the feed
      - type: String
        name: title
        optional: true
        description: title of the feed
      - type: int
        name: total
        description: total number of stories in the feed
      - type: timestamp
        name: firstCreatedAt
        optional: true
        description: creation timestamp of the earliest story in the feed
      - type: timestamp
        name: lastCreatedAt
        optional: true
        description: creation timestamp of the latest story in the feed
      - struct: FeedOperations
        name: operations
        optional: true
        description: the supported operations and the corresponding principals
      - type: String[]
        name: sheriffs
        optional: true
        description: list of sheriffs supervising the feed
      - struct: SheriffMark
        array: true
        name: sheriffMarks
        optional: true
        description: list of sheriff marks on the feed
  - name: FeedReference
    fields:
      - type: String
        name: feedName
        description: name of the feed
      - type: timestamp
        name: publishedAt
        description: story publication timestamp - the time the story is published under in the feed
      - type: boolean
        name: pinned
        optional: true
        description: >
          <code>true</code>, if the story is pinned (should appear before any non-pinned story in the feed),
          <code>false</code> otherwise
      - type: long
        name: moment
      - type: String
        name: storyId
        description: ID of the story
      - struct: StoryOperations
        name: operations
        optional: true
        description: the supported operations and the corresponding principals for the story in the feed
  - name: FeedSliceInfo
    fields:
      - type: long
        name: before
        description: the slice contains all stories before this moment, inclusive. May be the far future.
      - type: long
        name: after
        description: the slice contains all stories after this moment, exclusive. May be the far past.
      - struct: StoryInfo
        array: true
        name: stories
        description: the stories
      - type: int
        name: totalInPast
        description: total number of stories in the feed before this slice
      - type: int
        name: totalInFuture
        description: total number of stories in the feed after this slice
  - name: FeedStatus
    fields:
      - type: int
        name: total
        description: total number of stories
      - type: int
        name: totalPinned
        description: total number of pinned stories
      - type: long
        name: lastMoment
        optional: true
        description: moment of the most recent story
      - type: int
        name: notViewed
        optional: true
        description: number of stories that have not been viewed yet, admin only
      - type: int
        name: notRead
        optional: true
        description: number of stories that have not been read yet, admin only
      - type: long
        name: notViewedMoment
        optional: true
        description: moment of the oldest non-viewed story, admin only
      - type: long
        name: notReadMoment
        optional: true
        description: moment of the oldest non-read story, admin only
  - name: FeedStatusChange
    fields:
      - type: boolean
        name: viewed
        optional: true
        description: new value of the <code>viewed</code> flag (<code>null</code>, if the flag is not changed)
      - type: boolean
        name: read
        optional: true
        description: new value of the <code>read</code> flag (<code>null</code>, if the flag is not changed)
      - type: long
        name: before
        description: change flags for all stories before this moment, inclusive
  - name: FeedWithStatus
    fields:
      - type: String
        name: feedName
        description: name of the feed
      - type: int
        name: notViewed
        description: number of stories in the feed that have not been viewed yet
      - type: int
        name: notRead
        description: number of stories in the feed that have not been read yet
      - type: long
        name: notViewedMoment
        optional: true
        description: moment of the oldest non-viewed story
      - type: long
        name: notReadMoment
        optional: true
        description: moment of the oldest non-read story
  - name: FriendDescription
    fields:
      - type: String
        name: nodeName
        description: name of the node
        constraints:
          - notblank:
              error: friend.node-name.blank
          - length:
              max: 63
              error: friend.node-name.wrong-size
      - struct: FriendGroupAssignment
        array: true
        name: groups
        optional: true
        description: groups of friends the node is to be included into
  - name: FriendGroupAssignment
    fields:
      - type: String
        name: id
        description: ID of the group of friends
      - struct: FriendOperations
        name: operations
        optional: true
        description: the operations and the corresponding principals
        constraints:
          - other:
              error: friend.operations.wrong-principal
              description: contain an incorrect principal
  - name: FriendGroupDescription
    fields:
      - type: String
        name: title
        description: title of the group of friends
        constraints:
          - notblank:
              error: friend-group.title.blank
          - length:
              max: 63
              error: friend-group.title.wrong-size
      - struct: FriendGroupOperations
        name: operations
        optional: true
        description: the operations and the corresponding principals
        constraints:
          - other:
              error: friend-group.operations.wrong-principal
              description: contain an incorrect principal
  - name: FriendGroupDetails
    fields:
      - type: String
        name: id
        description: ID of the group of friends
      - type: String
        name: title
        optional: true
        description: title of the group of friends
      - type: timestamp
        name: addedAt
        description: the friendship timestamp - the real time when the node was added to the group of friends
      - struct: FriendOperations
        name: operations
        optional: true
        description: list of the supported operations and the corresponding principals
  - name: FriendGroupInfo
    fields:
      - type: String
        name: id
      - type: String
        name: title
        optional: true
        description: title of the group of friends
      - type: timestamp
        name: createdAt
        description: the group creation timestamp - the real time when the group of friends was created
      - struct: FriendGroupOperations
        name: operations
        optional: true
        description: list of the supported operations and the corresponding principals
  - name: FriendGroupsFeatures
    fields:
      - struct: FriendGroupInfo
        array: true
        name: available
        description: list of groups of friends existing on the node
      - struct: FriendGroupDetails
        array: true
        name: memberOf
        optional: true
        description: list of groups of friends the client is member of
  - name: FriendInfo
    fields:
      - type: String
        name: nodeName
        description: name of the node
      - struct: ContactInfo
        name: contact
        optional: true
        description: information about the node
      - struct: FriendGroupDetails
        array: true
        name: groups
        optional: true
        description: groups of friends the node belongs to
  - name: FriendOfInfo
    fields:
      - type: String
        name: remoteNodeName
        description: name of the remote node
      - struct: ContactInfo
        name: contact
        optional: true
        description: information about the remote node
      - struct: FriendGroupDetails
        array: true
        name: groups
        optional: true
        description: groups of friends on the remote node this node was added to
  - name: FundraiserInfo
    fields:
      - type: String
        name: title
        description: fundraiser title
      - type: String
        name: qrCode
        optional: true
        description: text or URI to be encoded and displayed as QR-code
      - type: String
        name: text
        optional: true
        description: arbitrary text to be displayed
      - type: String
        name: href
        optional: true
        description: link to the fundraiser
      - type: any
        name: any
        description: any other fields understood by Moera clients
  - name: GrantChange
    fields:
      - enum: Scope
        array: true
        name: scope
        description: a set of permissions to be granted or revoked
      - type: boolean
        name: revoke
        description: >
          <code>true</code> if the permissions must be revoked, <code>false</code> if the permissions must be granted
  - name: GrantInfo
    fields:
      - type: String
        name: nodeName
        description: name of the node the permissions are granted to
      - enum: Scope
        array: true
        name: scope
        description: the set of administrative permissions granted to the node
  - name: KeyMnemonic
    fields:
      - type: String[]
        name: mnemonic
        description: the words
        constraints:
          - notnull:
              error: node-name.mnemonic.missing
  - name: LinkPreview
    fields:
      - type: String
        name: siteName
        optional: true
        description: name of the site
      - type: String
        name: url
        optional: true
        description: canonical URL of the page
      - type: String
        name: title
        optional: true
        description: title of the page
      - type: String
        name: description
        optional: true
        description: description of the page
      - type: String
        name: imageHash
        optional: true
        description: hash of the image presenting the page
  - name: LinkPreviewInfo
    fields:
      - type: String
        name: siteName
        optional: true
        description: name of the site
      - type: String
        name: url
        optional: true
        description: canonical URL of the page
      - type: String
        name: title
        optional: true
        description: title of the page
      - type: String
        name: description
        optional: true
        description: description of the page
      - type: String
        name: imageUrl
        optional: true
        description: URL of the image presenting the page
  - name: MediaAttachment
    fields:
      - struct: PrivateMediaFileInfo
        name: media
        optional: true
        description: details of the attached media, may be absent if the media is not located on the node
      - struct: RemoteMediaInfo
        name: remoteMedia
        optional: true
        description: details of the media, if it is located on another node
      - type: boolean
        name: embedded
        description: >
            <code>true</code> if the media is used in the body of the posting/comment, <code>false</code> otherwise
  - name: MediaFilePreviewInfo
    fields:
      - type: int
        name: targetWidth
        description: the width the preview was prepared for viewing at
      - type: String
        name: directPath
        optional: true
        description: >
          location of the media file, relative to the <code>/media</code>; points to a static image served directly from
          a filesystem; static images do not accept any query parameters including authentication parameters
      - type: int
        name: width
        description: actual width of the preview in pixels
      - type: int
        name: height
        description: actual height of the preview in pixels
      - type: boolean
        name: original
        optional: true
        description: <code>true</code> if the preview is identical to the original media, <code>false</code> otherwise
  - name: MediaWithDigest
    fields:
      - type: String
        name: id
        description: ID of the media file
      - type: String
        name: digest
        optional: true
        description: cryptographic digest of the media file
  - name: NameToRegister
    fields:
      - type: String
        name: name
        constraints:
          - notblank:
              error: node-name.name.blank
          - other:
              error: node-name.name.invalid
              description: is reserved, too long or contains invalid characters
  - name: NotificationPacket
    fields:
      - type: String
        name: id
        description: ID of the notification packet on the sending node (used to filter out duplicates)
      - type: String
        name: nodeName
        description: name of the sending node
        constraints:
          - notblank:
              error: notification.node-name.blank
          - length:
              max: 63
              error: notification.node-name.wrong-size
      - type: String
        name: fullName
        optional: true
        description: full name of the sending node
        constraints:
          - length:
              max: 96
              error: notification.full-name.wrong-size
      - type: String
        name: gender
        optional: true
        description: gender of the sending node
        constraints:
          - length:
              max: 31
              error: notification.gender.wrong-size
      - struct: AvatarImage
        name: avatar
        optional: true
        description: avatar of the sending node
      - type: timestamp
        name: createdAt
        description: notification packet creation timestamp
        constraints:
          - other:
              error: notification.created-at.too-old
              description: is too far in the past
      - type: String
        name: type
        description: notification type
        constraints:
          - notblank:
              error: notification.type.blank
          - other:
              error: notification.type.unknown
              description: is unknown
      - type: String
        name: notification
        description: >
          the notification, a string representation of a JSON structure (see
          <a href="notifications.html">Notifications</a> page for details)
        constraints:
          - notblank:
              error: notification.notification.blank
          - other:
              error: notification.notification.invalid
              description: has invalid structure
      - type: byte[]
        name: signature
        description: >
          the notification packet sender signature (use
          <code><a href="fingerprints.html#NotificationPacket">NotificationPacket</a></code> fingerprint)
      - type: short
        name: signatureVersion
        description: signature version (i.e. fingerprint version)
  - name: NodeNameInfo
    fields:
      - type: String
        name: name
        optional: true
      - enum: OperationStatus
        name: operationStatus
        optional: true
        description: status of the latest operation with the node name
      - type: timestamp
        name: operationStatusUpdated
        optional: true
        description: the last time the operation status was updated
      - type: String
        name: operationErrorCode
        optional: true
        description: if the operation with the node name was failed, the code of the failure
      - type: String
        name: operationErrorMessage
        optional: true
        description: if the operation with the node name was failed, the human-readable description of the failure
      - type: boolean
        name: storedMnemonic
        optional: true
        description: >
          <code>true</code>, if updating key mnemonic is being stored on the node, <code>false</code> otherwise
      - struct: NodeNameOperations
        name: operations
        optional: true
        description: the supported operations and the corresponding principals
  - name: PeopleGeneralInfo
    fields:
      - type: int
        name: feedSubscribersTotal
        optional: true
        description: total number of subscribers of the node
      - type: int
        name: feedSubscriptionsTotal
        optional: true
        description: total number of subscriptions of the node
      - type: String -> int
        name: friendsTotal
        optional: true
        description: total number of friends in every group
      - type: int
        name: friendOfsTotal
        optional: true
        description: total number of nodes that added this node to their friends
      - type: int
        name: blockedTotal
        optional: true
        description: total number of blocked nodes
      - type: int
        name: blockedByTotal
        optional: true
        description: total number of nodes that blocked this node
      - struct: PeopleOperations
        name: operations
        optional: true
        description: the supported operations and the corresponding principals
  - name: PluginContext
    fields:
      - type: boolean
        name: rootAdmin
        description: <code>true</code>, if the client has authenticated as root admin, <code>false</code> otherwise
      - type: boolean
        name: admin
        description: <code>true</code>, if the client has authenticated as node admin, <code>false</code> otherwise
      - type: String[]
        name: authCategories
        description: >
          the list of permissions granted to the client, if it has authenticated as node admin; see
          <code><a href="#TokenInfo">TokenInfo</a>.permissions</code> for the list of possible values
      - type: String
        name: clientName
        description: node name of the client
      - type: String
        name: remoteAddress
        description: IP address of the client
      - type: String
        name: userAgent
        description: user agent (browser) used by the client
      - type: String
        name: userAgentOs
        description: operating system used by the client
      - type: String
        name: nodeId
        description: ID of the current node
      - type: String
        name: nodeName
        description: node name of the current node
      - type: String
        name: domainName
        description: domain name of the current node
      - type: String
        name: originUrl
        description: full URL of the request
  - name: PluginDescription
    fields:
      - type: String
        name: name
        description: a unique plugin name; can contain only small latin letters, digits or hyphen
        constraints:
          - notblank:
              error: plugin.name.blank
          - length:
              max: 48
              error: plugin.name.wrong-size
          - other:
              error: plugin.name.invalid
              description: has incorrect format
      - type: String
        name: title
        optional: true
        description: user-readable title of the plugin
        constraints:
          - length:
              max: 80
              error: plugin.title.wrong-size
      - type: String
        name: description
        optional: true
        description: user-readable description of the purpose of the plugin
        constraints:
          - length:
              max: 256
              error: plugin.description.wrong-size
      - type: String
        name: location
        optional: true
        description: URL of the plugin; used by the node to call the plugin API
      - type: String[]
        name: acceptedEvents
        optional: true
        description: >
          list of types of internal events the plugin wants to receive; <a href="#internal-events">Read more about
          internal events.</a>
      - struct: SettingDescriptor
        array: true
        name: options
        optional: true
        description: >
          plugin settings to be added to the list of node settings, the settings appear in the list with a prefix
          <code>plugin.&lt;plugin name>.</code>
        constraints:
          - other:
              error: plugin.options.unknown-type
              description: contain an option of an unknown type
  - name: PluginInfo
    fields:
      - type: String
        name: nodeId
        description: ID of the node this plugin is connected to
      - type: boolean
        name: local
        description: >
          <code>true</code> if the plugin is enabled for a particular node only, <code>false</code>, if it is enabled
          for the whole server
      - type: String
        name: name
        description: a unique plugin name
      - type: String
        name: title
        optional: true
        description: user-readable title of the plugin
      - type: String
        name: description
        optional: true
        description: user-readable description of the purpose of the plugin
      - type: String
        name: location
        optional: true
        description: URL of the plugin; used by the node to call the plugin API
      - type: String[]
        name: acceptedEvents
        optional: true
        description: >
          list of types of internal events the plugin wants to receive; <a href="#internal-events">Read more about
          internal events.</a>
      - struct: SettingMetaInfo
        array: true
        name: settings
        optional: true
        description: plugin settings to be added to the list of node settings
      - type: String
        name: tokenId
        optional: true
        description: ID of the token used to authenticate the plugin
  - name: PostingFeatures
    fields:
      - type: boolean
        name: post
        optional: true
        description: <code>true</code> if the client is allowed to create postings, <code>false</code> otherwise
      - type: boolean
        name: subjectPresent
        description: <code>true</code> if new postings are recommended to have a subject, <code>false</code> otherwise
      - enum: SourceFormat
        array: true
        name: sourceFormats
        description: list of source text formats the node understands
      - type: int
        name: mediaMaxSize
        description: maximal size of a media attachment in a post
      - type: int
        name: imageRecommendedSize
        description: maximal size of a compressed image in a post
      - type: int
        name: imageRecommendedPixels
        description: maximal resolution of a compressed image in a post (in pixels)
      - type: String[]
        name: imageFormats
        description: list of image formats (in MIME type form) the node understands
  - name: PostingInfo
    java-interfaces:
      - MediaInfo
    fields:
      - type: String
        name: id
      - type: String
        name: revisionId
        description: ID of the current revision of the posting
      - type: String
        name: receiverRevisionId
        optional: true
        description: ID of the current revision of the original posting (for cached copies of remote postings only)
      - type: int
        name: totalRevisions
        description: total number of revisions the posting has
      - type: String
        name: receiverName
        optional: true
        description: name of the node where the posting was published (for cached copies of remote postings only)
      - type: String
        name: receiverFullName
        optional: true
        description: full name of the node where the posting was published (for cached copies of remote postings only)
      - type: String
        name: receiverGender
        optional: true
        description: gender of the node where the posting was published (for cached copies of remote postings only)
      - struct: AvatarImage
        name: receiverAvatar
        optional: true
        description: avatar of the node where the posting was published (for cached copies of remote postings only)
      - type: String
        name: receiverPostingId
        optional: true
        description: ID of the original posting (for cached copies of remote postings only)
      - type: String
        name: parentMediaId
        optional: true
        description: ID of the media the posting is linked to, if any
      - type: String
        name: ownerName
        description: node name of the posting's owner
      - type: String
        name: ownerFullName
        optional: true
        description: full name of the posting's owner
      - type: String
        name: ownerGender
        optional: true
        description: gender of the posting's owner
      - struct: AvatarImage
        name: ownerAvatar
        optional: true
        description: avatar of the posting's owner
      - struct: Body
        name: bodyPreview
        optional: true
        description: preview of the posting's body, a string representation of a JSON structure
      - struct: Body
        name: bodySrc
        optional: true
        description: >
          the source text of the posting, a string representation of a JSON structure, may be absent if not requested
      - type: byte[]
        name: bodySrcHash
        description: hash of the source text of the posting
      - enum: SourceFormat
        name: bodySrcFormat
        optional: true
        description: >
          format of the source text of the posting, the list of available formats is returned in
          <code><a href="#PostingFeatures">PostingFeatures</a></code>
      - struct: Body
        name: body
        description: body of the posting, a string representation of a JSON structure
      - enum: BodyFormat
        name: bodyFormat
        optional: true
        description: format of the body of the posting, may have any value meaningful for the client
      - struct: MediaAttachment
        array: true
        name: media
        optional: true
        description: list of the media attached to the posting
      - type: String
        name: heading
        description: heading of the posting
      - struct: UpdateInfo
        name: updateInfo
        optional: true
        description: description of the latest update
      - type: timestamp
        name: createdAt
        description: posting creation timestamp - the real time when the posting was created
      - type: timestamp
        name: editedAt
        optional: true
        description: posting editing timestamp - the last time the posting was updated
      - type: timestamp
        name: deletedAt
        optional: true
        description: posting deletion timestamp - the time when the posting was deleted
      - type: timestamp
        name: receiverCreatedAt
        optional: true
        description: original posting creation timestamp (for cached copies of remote postings only)
      - type: timestamp
        name: receiverEditedAt
        optional: true
        description: original posting editing timestamp (for cached copies of remote postings only)
      - type: timestamp
        name: receiverDeletedAt
        optional: true
        description: original posting deletion timestamp (for cached copies of remote postings only)
      - type: timestamp
        name: revisionCreatedAt
        description: creation timestamp of the current revision of the posting
      - type: timestamp
        name: receiverRevisionCreatedAt
        optional: true
        description: >
          creation timestamp of the current revision of the original posting (for cached copies of remote postings only)
      - type: timestamp
        name: deadline
        optional: true
        description: >
          posting purging timestamp - the time when the deleted posting will be purged from the database
      - type: byte[]
        name: digest
        optional: true
        description: >
          cryptographic digest of the posting (use <code><a href="fingerprints.html#Posting">Posting</a></code>
          fingerprint)
      - type: byte[]
        name: signature
        optional: true
        description: >
          the posting's owner signature (use <code><a href="fingerprints.html#Posting">Posting</a></code>
          fingerprint)
      - type: short
        name: signatureVersion
        optional: true
        description: signature version (i.e. fingerprint version)
      - struct: FeedReference
        array: true
        name: feedReferences
        optional: true
        description: array of references to the posting from stories in feeds
      - struct: BlockedPostingInstantInfo
        array: true
        name: blockedInstants
        optional: true
        description: instants related to the posting that are blocked (for admin only)
      - struct: PostingOperations
        name: operations
        optional: true
        description: the supported operations and the corresponding principals
      - struct: PostingOperations
        name: receiverOperations
        optional: true
        description: >
          the supported operations for the original posting and the corresponding principals (for cached copies of
          remote postings only)
      - struct: CommentOperations
        name: commentOperations
        optional: true
        description: the operations and the corresponding principals that are overridden in the posting's comments
      - struct: ReactionOperations
        name: reactionOperations
        optional: true
        description: the operations and the corresponding principals that are overridden in reactions to the posting
      - struct: ReactionOperations
        name: commentReactionOperations
        optional: true
        description: >
          the operations and the corresponding principals that are overridden in reactions to the posting's comments
      - enum: BlockedEntryOperation
        array: true
        name: blockedOperations
        optional: true
        description: operations on the posting that are blocked for the client
      - enum: BlockedEntryOperation
        array: true
        name: blockedCommentOperations
        optional: true
        description: operations on the posting's comments that are blocked for the client
      - type: String[]
        name: sheriffs
        optional: true
        description: list of sheriffs supervising the posting
      - struct: SheriffMark
        array: true
        optional: true
        name: sheriffMarks
        description: list of sheriff marks on the posting
      - struct: AcceptedReactions
        name: acceptedReactions
        optional: true
        description: types of reactions that the posting accepts
      - struct: ClientReactionInfo
        name: clientReaction
        optional: true
        description: details of the existing reaction (if any) of the client's owner
      - struct: ReactionTotalsInfo
        name: reactions
        optional: true
        description: reactions summary of the posting
      - struct: PostingSourceInfo
        array: true
        name: sources
        optional: true
        description: details of the sources the posting was received from (for cached copies of remote postings only)
      - type: int
        name: totalComments
        optional: true
        description: total number of comments to the posting
  - name: PostingRevisionInfo
    fields:
      - type: String
        name: id
      - type: String
        name: receiverId
        optional: true
        description: ID of the original revision (for cached copies of remote postings only)
      - struct: Body
        name: bodyPreview
        optional: true
        description: preview of the revision's body, a string representation of a JSON structure
      - type: byte[]
        name: bodySrcHash
        description: hash of the source text of the revision
      - enum: SourceFormat
        name: bodySrcFormat
        optional: true
        description: >
          format of the source text of the revision, the list of available formats is returned in
          <code><a href="#PostingFeatures">PostingFeatures</a></code>
      - struct: Body
        name: body
        description: body of the revision, a string representation of a JSON structure
      - enum: BodyFormat
        name: bodyFormat
        optional: true
        description: format of the body of the revision
      - struct: MediaAttachment
        array: true
        name: media
        optional: true
        description: list of the media attached to the revision
      - type: String
        name: heading
        description: heading of the revision
      - struct: UpdateInfo
        name: updateInfo
        optional: true
        description: description of the latest update
      - type: timestamp
        name: createdAt
        description: revision creation timestamp - the real time when the revision was created
      - type: timestamp
        name: deletedAt
        optional: true
        description: revision deletion timestamp - the time when the revision was deleted
      - type: timestamp
        name: receiverCreatedAt
        optional: true
        description: original revision creation timestamp (for cached copies of remote postings only)
      - type: timestamp
        name: receiverDeletedAt
        optional: true
        description: original revision deletion timestamp (for cached copies of remote postings only)
      - type: byte[]
        name: digest
        optional: true
        description: >
          cryptographic digest of the revision (use <code><a href="fingerprints.html#Posting">Posting</a></code>
          fingerprint)
      - type: byte[]
        name: signature
        optional: true
        description: >
          the revision's owner signature (use <code><a href="fingerprints.html#Posting">Posting</a></code>
          fingerprint)
      - type: short
        name: signatureVersion
        optional: true
        description: signature version (i.e. fingerprint version)
      - struct: ClientReactionInfo
        name: clientReaction
        optional: true
        description: details of the existing reaction (if any) of the client's owner
      - struct: ReactionTotalsInfo
        name: reactions
        optional: true
        description: reactions summary of the posting revision
  - name: PostingSourceInfo
    fields:
      - type: String
        name: nodeName
        description: name of the remote node
      - type: String
        name: fullName
        optional: true
        description: full name of the remote node
      - struct: AvatarImage
        name: avatar
        optional: true
        description: avatar of the remote node
      - type: String
        name: feedName
        description: name of the feed on the remote node
      - type: String
        name: postingId
        description: ID of the posting on the remote node
      - type: timestamp
        name: createdAt
        description: timestamp when the posting was received from this source
  - name: PostingSourceText
    fields:
      - struct: AvatarDescription
        name: ownerAvatar
        optional: true
        description: avatar of the posting's owner
      - struct: Body
        name: bodySrc
        optional: true
        description: the source text of the posting, a string representation of a JSON structure
        constraints:
          - notnull:
              error: posting.body-src.blank
          - length:
              max: 65535
              error: posting.body-src.wrong-size
      - enum: SourceFormat
        name: bodySrcFormat
        optional: true
        description: >
          format of the source text of the posting, <code>plain-text</code> by default; the list of available formats is
          returned in <code><a href="#PostingFeatures">PostingFeatures</a></code>
      - struct: MediaWithDigest
        array: true
        name: media
        optional: true
        description: array of IDs and digests of private media to be attached to the posting
      - struct: AcceptedReactions
        name: acceptedReactions
        optional: true
        description: types of reactions that the posting accepts
      - struct: PostingOperations
        name: operations
        optional: true
        description: the operations and the corresponding principals
        constraints:
          - other:
              error: posting.operations.wrong-principal
              description: contain an incorrect principal
      - struct: CommentOperations
        name: commentOperations
        optional: true
        description: the operations and the corresponding principals that are overridden in the posting's comments
        constraints:
          - other:
              error: posting.comment-operations.wrong-principal
              description: contain an incorrect principal
      - struct: ReactionOperations
        name: reactionOperations
        optional: true
        description: the operations and the corresponding principals that are overridden in reactions to the posting
        constraints:
          - other:
              error: posting.reaction-operations.wrong-principal
              description: contain an incorrect principal
      - struct: ReactionOperations
        name: commentReactionOperations
        optional: true
        description: >
          the operations and the corresponding principals that are overridden in reactions to the posting's comments
        constraints:
          - other:
              error: posting.comment-reaction-operations.wrong-principal
              description: contain an incorrect principal
  - name: PostingText
    fields:
      - type: String
        name: ownerName
        optional: true
        description: node name of the posting's owner
        constraints:
          - length:
              max: 63
              error: posting.owner-name.wrong-size
      - type: String
        name: ownerFullName
        optional: true
        description: full name of the posting's owner
        constraints:
          - length:
              max: 96
              error: posting.owner-full-name.wrong-size
      - type: String
        name: ownerGender
        optional: true
        description: gender of the posting's owner
        constraints:
          - length:
              max: 31
              error: posting.owner-gender.wrong-size
      - struct: AvatarDescription
        name: ownerAvatar
        optional: true
        description: avatar of the posting's owner
      - struct: Body
        name: bodyPreview
        optional: true
        description: preview of the posting's body, a string representation of a JSON structure
      - struct: Body
        name: bodySrc
        optional: true
        description: the source text of the posting, a string representation of a JSON structure
        constraints:
          - other:
              error: posting.body-src.blank
              description: is empty
          - other:
              error: posting.body-src.wrong-size
              description: is too long
      - enum: SourceFormat
        name: bodySrcFormat
        optional: true
        description: >
          format of the source text of the posting, <code>plain-text</code> by default; the list of available formats is
          returned in <code><a href="#PostingFeatures">PostingFeatures</a></code>
      - struct: Body
        name: body
        optional: true
        description: body of the posting, a string representation of a JSON structure
        constraints:
          - other:
              error: posting.body.blank
              description: is empty
          - other:
              error: posting.body.wrong-size
              description: is too long
      - enum: BodyFormat
        name: bodyFormat
        optional: true
        description: format of the body of the posting, may have any value meaningful for the client
        constraints:
          - other:
              error: posting.body-format.missing
              description: is missing
      - type: String[]
        name: media
        optional: true
        description: array of IDs of private media to be attached to the posting
      - type: timestamp
        name: createdAt
        optional: true
        description: posting creation timestamp - the real time when the posting was created
        constraints:
          - other:
              error: posting.created-at.missing
              description: is missing
          - other:
              error: posting.created-at.out-of-range
              description: is too far from now
      - struct: AcceptedReactions
        name: acceptedReactions
        optional: true
        description: types of reactions that the posting accepts
      - struct: StoryAttributes
        array: true
        name: publications
        optional: true
        description: list of publications in feeds that must be made after creating the posting (for new postings only)
        constraints:
          - other:
              error: posting.publications.cannot-modify
              description: cannot be modified
      - struct: UpdateInfo
        name: updateInfo
        optional: true
        description: description of the update
      - type: byte[]
        name: signature
        optional: true
        description: >
          the posting's owner signature (use <code><a href="fingerprints.html#Posting">Posting</a></code>
          fingerprint)
      - type: short
        name: signatureVersion
        optional: true
        description: signature version (i.e. fingerprint version)
      - struct: PostingOperations
        name: operations
        optional: true
        description: the operations and the corresponding principals
        constraints:
          - other:
              error: posting.operations.wrong-principal
              description: contain an incorrect principal
      - struct: CommentOperations
        name: commentOperations
        optional: true
        description: the operations and the corresponding principals that are overridden in the posting's comments
        constraints:
          - other:
              error: posting.comment-operations.wrong-principal
              description: contain an incorrect principal
      - struct: ReactionOperations
        name: reactionOperations
        optional: true
        description: the operations and the corresponding principals that are overridden in reactions to the posting
        constraints:
          - other:
              error: posting.reaction-operations.wrong-principal
              description: contain an incorrect principal
      - struct: ReactionOperations
        name: commentReactionOperations
        optional: true
        description: >
          the operations and the corresponding principals that are overridden in reactions to the posting's comments
        constraints:
          - other:
              error: posting.comment-reaction-operations.wrong-principal
              description: contain an incorrect principal
  - name: PrivateMediaFileInfo
    fields:
      - type: String
        name: id
        description: ID of the media file
      - type: String
        name: hash
        description: SHA-1 hash of the media file
      - type: String
        name: path
        description: >
          virtual location of the media file, relative to the <code>/media</code>
          <a href="virtual-pages.html">virtual page</a>
      - type: String
        name: directPath
        optional: true
        description: >
          location of the media file, relative to the <code>/media</code>; points to a static image served directly from
          a filesystem; static images do not accept any query parameters including authentication parameters
      - type: String
        name: mimeType
        description: MIME type of the media
      - type: int
        name: width
        optional: true
        js-default: "0"
        description: width of the media in pixels (<code>null</code>, if the media file is not an image or video)
      - type: int
        name: height
        optional: true
        js-default: "0"
        description: height of the media in pixels (<code>null</code>, if the media file is not an image or video)
      - type: short
        name: orientation
        optional: true
        js-default: "1"
        description: >
          media orientation, the value should be interpreted like
          <a href="https://jdhao.github.io/2019/07/31/image_rotation_exif_info/">the orientation value present in JPEG
          EXIF data</a> (<code>null</code>, if the media file is not an image or video)
      - type: long
        name: size
        description: size of the media file in bytes
      - type: String
        name: postingId
        optional: true
        description: ID of the posting linked to the media
      - struct: MediaFilePreviewInfo
        array: true
        name: previews
        optional: true
        description: list of media previews - downscaled versions of the media
      - struct: PrivateMediaFileOperations
        name: operations
        optional: true
        description: the supported operations and the corresponding principals
  - name: ProfileAttributes
    fields:
      - type: String
        name: fullName
        optional: true
        description: node owner's full name
        constraints:
          - length:
              max: 96
              error: profile.full-name.wrong-size
      - type: String
        name: gender
        optional: true
        description: node owner's gender
        constraints:
          - length:
              max: 31
              error: profile.gender.wrong-size
      - type: String
        name: email
        optional: true
        description: node owner's E-mail address
        constraints:
          - length:
              max: 63
              error: profile.email.wrong-size
          - email:
              error: profile.email.invalid
      - type: String
        name: title
        optional: true
        description: node title
        constraints:
          - length:
              max: 120
              error: profile.title.wrong-size
      - type: String
        name: bioSrc
        optional: true
        description: the source text of node owner's bio (arbitrary text)
        constraints:
          - length:
              max: 4096
              error: profile.bio-src.wrong-size
      - enum: SourceFormat
        name: bioSrcFormat
        optional: true
        description: >
          format of the source text of node owner's bio, <code>markdown</code> by default; the list of available formats
          is returned in <code><a href="#PostingFeatures">PostingFeatures</a></code>
      - type: String
        name: avatarId
        optional: true
        description: node owner's avatar ID
      - struct: FundraiserInfo
        array: true
        name: fundraisers
        optional: true
        description: list of fundraisers - methods of giving a donation to the node owner
      - struct: ProfileOperations
        name: operations
        optional: true
        description: the operations and the corresponding principals
        constraints:
          - other:
              error: profile.operations.wrong-principal
              description: contain an incorrect principal
  - name: ProfileInfo
    fields:
      - type: String
        name: fullName
        optional: true
        description: node owner's full name
      - type: String
        name: gender
        optional: true
        description: node owner's gender
      - type: String
        name: email
        optional: true
        description: node owner's E-mail address
      - type: String
        name: title
        optional: true
        description: node title
      - type: String
        name: bioSrc
        optional: true
        description: the source text of node owner's bio (arbitrary text), may be absent if not requested
      - enum: SourceFormat
        name: bioSrcFormat
        optional: true
        description: >
          format of the source text of node owner's bio, <code>markdown</code> by default, may be absent if not
          requested; the list of available formats is returned in
          <code><a href="#PostingFeatures">PostingFeatures</a></code>
      - type: String
        name: bioHtml
        optional: true
        description: HTML representation of node owner's bio
      - struct: AvatarInfo
        name: avatar
        optional: true
        description: node owner's avatar
      - struct: FundraiserInfo
        array: true
        name: fundraisers
        optional: true
        description: list of fundraisers - methods of giving a donation to the node owner
      - struct: ProfileOperations
        name: operations
        optional: true
        description: the supported operations and the corresponding principals
  - name: PublicMediaFileInfo
    fields:
      - type: String
        name: id
        description: ID of the media file
      - type: String
        name: path
        description: >
          virtual location of the media file, relative to the <code>/media</code>
          <a href="virtual-pages.html">virtual page</a>
      - type: int
        name: width
        optional: true
        js-default: "0"
        description: width of the media in pixels (<code>null</code>, if the media file is not an image or video)
      - type: int
        name: height
        optional: true
        js-default: "0"
        description: height of the media in pixels (<code>null</code>, if the media file is not an image or video)
      - type: short
        name: orientation
        optional: true
        js-default: "1"
        description: >
          media orientation, the value should be interpreted like
          <a href="https://jdhao.github.io/2019/07/31/image_rotation_exif_info/">the orientation value present in JPEG
          EXIF data</a> (<code>null</code>, if the media file is not an image or video)
      - type: long
        name: size
        description: size of the media file in bytes
  - name: PushContent
    fields:
      - enum: PushContentType
        name: type
        description: type of the notification
      - type: String
        name: id
        optional: true
        description: ID of the story (<code>story-deleted</code> notifications only)
      - struct: StoryInfo
        name: story
        optional: true
        description: the story (<code>story-added</code> notifications only)
      - struct: FeedWithStatus
        name: feedStatus
        optional: true
        description: status of the feed (<code>feed-updated</code> notifications only)
  - name: PushRelayClientAttributes
    fields:
      - enum: PushRelayType
        name: type
        description: type of the relay
        constraints:
          - notnull:
              error: push-relay.type.missing
          - other:
              error: push-relay.type.unknown
              description: is unknown
      - type: String
        name: clientId
        description: ID/token of the client
        constraints:
          - notblank:
              error: push-relay.client-id.blank
      - type: String
        name: lang
        optional: true
        description: language of the messages
  - name: ReactionAttributes
    fields:
      - type: boolean
        name: negative
        description: <code>true</code>, if the reaction is negative, <code>false</code>, if positive
      - type: int
        name: emoji
        description: reaction code, usually interpreted by clients as emoji code point
      - struct: ReactionOperations
        name: operations
        optional: true
        description: the operations and the corresponding principals
  - name: ReactionCreated
    fields:
      - struct: ReactionInfo
        name: reaction
        optional: true
        description: details of the reaction created
      - struct: ReactionTotalsInfo
        name: totals
        description: summary of reactions after the creation
  - name: ReactionDescription
    fields:
      - type: String
        name: ownerName
        optional: true
        description: reaction owner's node name
      - type: String
        name: ownerFullName
        optional: true
        description: reaction owner's full name
      - type: String
        name: ownerGender
        optional: true
        description: reaction owner's gender
      - struct: AvatarDescription
        name: ownerAvatar
        optional: true
        description: reaction owner's avatar
      - type: boolean
        name: negative
        description: <code>true</code>, if the reaction is negative, <code>false</code>, if positive
      - type: int
        name: emoji
        description: reaction code, usually interpreted by clients as emoji code point
      - type: byte[]
        name: signature
        optional: true
        description: >
          the reaction owner signature (use <code><a href="fingerprints.html#Reaction">Reaction</a></code>
          fingerprint)
      - type: short
        name: signatureVersion
        optional: true
        description: signature version (i.e. fingerprint version)
      - struct: ReactionOperations
        name: operations
        optional: true
        description: the operations and the corresponding principals
        constraints:
          - other:
              error: reaction.operations.wrong-principal
              description: contain an incorrect principal
  - name: ReactionsFilter
    fields:
      - type: String
        name: ownerName
        optional: true
        description: reaction owner's name
      - type: String[]
        name: postings
        optional: true
        description: list of IDs of postings
  - name: ReactionInfo
    fields:
      - type: String
        name: ownerName
        optional: true
        description: reaction owner's node name
      - type: String
        name: ownerFullName
        optional: true
        description: reaction owner's full name
      - type: String
        name: ownerGender
        optional: true
        description: reaction owner's gender
      - struct: AvatarImage
        name: ownerAvatar
        optional: true
        description: reaction owner's avatar
      - type: String
        name: postingId
        optional: true
        description: ID of the posting
      - type: String
        name: postingRevisionId
        optional: true
        description: ID of the posting revision, if relevant
      - type: String
        name: commentId
        optional: true
        description: ID of the comment, if relevant
      - type: String
        name: commentRevisionId
        optional: true
        description: ID of the comment revision, if relevant
      - type: boolean
        name: negative
        optional: true
        description: <code>true</code>, if the reaction is negative, <code>false</code>, if positive
      - type: int
        name: emoji
        optional: true
        description: reaction code, usually interpreted by clients as emoji code point
      - type: long
        name: moment
        optional: true
      - type: timestamp
        name: createdAt
        optional: true
        description: reaction creation timestamp - the real time when the reaction was created
      - type: timestamp
        name: deadline
        optional: true
        description: if present, the reaction will be erased at this time
      - type: byte[]
        name: signature
        optional: true
        description: >
          the reaction owner signature (use <code><a href="fingerprints.html#Reaction">Reaction</a></code>
          fingerprint)
      - type: short
        name: signatureVersion
        optional: true
        description: signature version (i.e. fingerprint version)
      - struct: ReactionOperations
        name: operations
        optional: true
        description: the supported operations and the corresponding principals
      - struct: ReactionOperations
        name: ownerOperations
        optional: true
        description: the supported operations and the corresponding principals as defined by the reaction's owner
      - struct: ReactionOperations
        name: seniorOperations
        optional: true
        description: >
          the operations and the corresponding principals that are overridden by the reaction's "senior": the posting's
          owner in the case of reaction to a posting or the comment's owner in the case of reaction to a comment
      - struct: ReactionOperations
        name: majorOperations
        optional: true
        description: >
          the operations and the corresponding principals that are overridden by the posting's owner ("major") in
          the case of reaction to a comment; not set in the case of reaction to a posting
  - name: ReactionsSliceInfo
    fields:
      - type: long
        name: before
        description: the slice contains all reactions before this moment, inclusive. May be the far future.
      - type: long
        name: after
        description: the slice contains all reactions after this moment, exclusive. May be the far past.
      - type: int
        name: total
        description: total number of reactions in the whole list
      - struct: ReactionInfo
        array: true
        name: reactions
        description: the reactions
  - name: ReactionTotalInfo
    fields:
      - type: int
        name: emoji
        description: reaction code, usually interpreted by clients as emoji code point
      - type: int
        name: total
        optional: true
        description: total number of reactions with the given code
      - type: float
        name: share
        optional: true
        constraints:
          - value:
              min: 0
              max: 1
              error: reaction-total.share.out-of-range
        description: >
          share the reactions with the given code stand from the total number of reactions (may be absent, if
          <code>total</code> is present)
  - name: ReactionTotalsFilter
    fields:
      - type: String[]
        name: postings
        description: list of IDs of postings
  - name: ReactionTotalsInfo
    fields:
      - type: String
        name: entryId
        description: ID of the entry
      - struct: ReactionTotalInfo
        array: true
        name: positive
        optional: true
        js-default: "[]"
        description: summary of positive reactions
      - struct: ReactionTotalInfo
        array: true
        name: negative
        optional: true
        js-default: "[]"
        description: summary of negative reactions
  - name: ReactionOverride
    fields:
      - struct: ReactionOperations
        name: operations
        optional: true
        description: the supported operations and the corresponding principals
        constraints:
          - other:
              error: reaction.operations.wrong-principal
              description: contain an incorrect principal
      - struct: ReactionOperations
        name: seniorOperations
        optional: true
        description: >
          the operations and the corresponding principals that are overridden by the reaction's "senior": the posting's
          owner in the case of reaction to a posting or the comment's owner in the case of reaction to a comment
        constraints:
          - other:
              error: reaction.senior-operations.wrong-principal
              description: contain an incorrect principal
      - struct: ReactionOperations
        name: majorOperations
        optional: true
        description: >
          the operations and the corresponding principals that are overridden by the posting's owner ("major") in
          the case of reaction to a comment; not set in the case of reaction to a posting
        constraints:
          - other:
              error: reaction.major-operations.wrong-principal
              description: contain an incorrect principal
  - name: RegisteredNameSecret
    fields:
      - type: String
        name: name
      - type: String[]
        name: mnemonic
        optional: true
        constraints:
          - items:
              min: 24
              max: 24
              error: node-name.secret.wrong-number
        description: human-friendly mnemonic of the updating key
      - type: String
        name: secret
        optional: true
        description: base64-encoded secret of the updating key
  - name: RemoteFeed
    fields:
      - type: String
        name: nodeName
        description: name of the node
      - type: String
        name: feedName
        description: name of the feed on the node
    java-equals: true
  - name: RemoteMedia
    fields:
      - type: String
        name: id
        description: ID of the media file
      - type: String
        name: hash
        optional: true
        description: SHA-1 hash of the media file
      - type: String
        name: digest
        optional: true
        description: cryptographic digest of the media file
  - name: RemoteMediaInfo
    fields:
      - type: String
        name: id
        description: ID of the media file
      - type: String
        name: hash
        optional: true
        description: SHA-1 hash of the media file
      - type: String
        name: digest
        optional: true
        description: cryptographic digest of the media file
  - name: RemotePosting
    fields:
      - type: String
        name: nodeName
        description: name of the node
      - type: String
        name: postingId
        description: ID of the posting on the node
    java-equals: true
  - name: RemotePostingOrNode
    fields:
      - type: String
        name: nodeName
        description: name of the node
      - type: String
        name: postingId
        optional: true
        description: ID of the posting on the node
    java-equals: true
  - name: RemotePostingVerificationInfo
    fields:
      - type: String
        name: id
        description: asynchronous operation ID
      - type: String
        name: nodeName
      - type: String
        name: postingId
      - type: String
        name: revisionId
        optional: true
      - enum: VerificationStatus
        name: status
        optional: true
        description: status of the operation
      - type: String
        name: errorCode
        optional: true
        description: error code
      - type: String
        name: errorMessage
        optional: true
        description: human-readable error message
  - name: RemoteReactionVerificationInfo
    fields:
      - type: String
        name: id
        description: asynchronous operation ID
      - type: String
        name: nodeName
      - type: String
        name: postingId
      - type: String
        name: reactionOwnerName
        description: node name of the reaction's owner
      - enum: VerificationStatus
        name: status
        optional: true
        description: status of the operation
      - type: String
        name: errorCode
        optional: true
        description: error code
      - type: String
        name: errorMessage
        optional: true
        description: human-readable error message
  - name: RepliedTo
    fields:
      - type: String
        name: id
        description: ID of the comment
      - type: String
        name: revisionId
        optional: true
        description: ID of the comment revision
      - type: String
        name: name
        description: node name of the comment's owner
      - type: String
        name: fullName
        optional: true
        description: full name of the comment's owner
      - type: String
        name: gender
        optional: true
        description: gender of the comment's owner
      - struct: AvatarImage
        name: avatar
        optional: true
        description: avatar of the comment's owner
      - type: String
        name: heading
        optional: true
        description: heading of the comment
      - type: byte[]
        name: digest
        description: >
          cryptographic digest of the comment (use <code><a href="fingerprints.html#Comment">Comment</a></code>
          fingerprint)
  - name: Result
    fields:
      - type: String
        name: errorCode
        description: error code
      - type: String
        name: message
        optional: true
        js-default: '""'
        description: human-readable error message
  - name: SheriffMark
    fields:
      - type: String
        name: sheriffName
        description: name of the sheriff that added the mark
  - name: SearchNodeInfo
    fields:
      - type: String
        name: nodeName
      - type: String
        name: fullName
        optional: true
        description: node owner's full name
      - type: String
        name: title
        optional: true
        description: node title
      - struct: AvatarImage
        name: avatar
        optional: true
        description: node owner's avatar
      - type: float
        name: distance
        description: social distance between the node and the client
  - name: SettingInfo
    fields:
      - type: String
        name: name
        description: name of the setting
      - type: String
        name: value
        optional: true
        description: value of the setting
  - name: SettingMetaAttributes
    fields:
      - type: String
        name: name
        description: name of the setting
      - type: String
        name: defaultValue
        optional: true
        description: >
          default value of the setting (if absent or <code>null</code>, the built-in default value will be used)
      - type: boolean
        name: privileged
        optional: true
        description: >
          the setting should be privileged (if absent or <code>null</code>, the built-in value of the flag will be used)
  - name: SettingDescriptor
    fields:
      - type: String
        name: name
        description: name of the setting
      - enum: SettingType
        name: type
        description: type of the setting
      - type: String
        name: defaultValue
        optional: true
        description: default value of the setting
      - type: boolean
        name: internal
        optional: true
        description: the setting is internal - not displayed to the user
      - type: boolean
        name: privileged
        optional: true
        description: the setting is privileged - may be changed by server owner only
      - type: boolean
        name: encrypted
        optional: true
        description: the setting is stored in the database in encrypted form
      - type: String
        name: title
        optional: true
        description: human-friendly description of the setting
      - struct: SettingTypeModifiers
        name: modifiers
        optional: true
        description: >
          additional modifiers that may help to choose a proper UI component for the setting value and to validate the
          input; the meaning of the modifiers depends on the setting type
  - name: SettingMetaInfo
    fields:
      - type: String
        name: name
        description: name of the setting
      - enum: SettingType
        name: type
        description: type of the setting
      - type: String
        name: defaultValue
        optional: true
        description: default value of the setting
      - type: boolean
        name: privileged
        optional: true
        description: the setting is privileged - may be changed by server owner only
      - type: String
        name: title
        description: human-friendly description of the setting
      - struct: SettingTypeModifiers
        name: modifiers
        optional: true
        description: >
          additional modifiers that may help to choose a proper UI component for the setting value and to validate the
          input; the meaning of the modifiers depends on the setting type
  - name: SettingTypeModifiers
    fields:
      - type: String
        name: format
        optional: true
        description: >
          preferred format of displaying the value<br>
          (<code>int</code>)
          <ul>
            <li><code>size</code> - data size in bytes/kilobytes/megabytes etc.</li>
          </ul>
      - type: String
        name: min
        optional: true
        description: (<code>int</code>, <code>Duration</code>) minimal value
      - type: String
        name: max
        optional: true
        description: (<code>int</code>, <code>Duration</code>) maximal value
      - type: boolean
        name: multiline
        optional: true
        description: (<code>string</code>) <code>true</code>, if the value is a multiline text
      - type: boolean
        name: never
        optional: true
        description: (<code>Duration</code>) <code>true</code>, if value <code>never</code> is allowed
      - type: boolean
        name: always
        optional: true
        description: (<code>Duration</code>) <code>true</code>, if value <code>always</code> is allowed
      - enum: PrincipalFlag
        array: true
        name: principals
        optional: true
        description: (<code>Principal</code>) list of allowed principals
  - name: SheriffComplaintDecisionText
    fields:
      - type: boolean
        name: reject
        description: <code>true</code>, if the complaints in the group are to be rejected, <code>false</code> otherwise
      - enum: SheriffOrderReason
        name: decisionCode
        optional: true
        description: the decision
        constraints:
          - other:
              error: sheriff-complaint-decision.decision-code.missing
              description: is missing
      - type: String
        name: decisionDetails
        optional: true
        description: detailed explanation of the decision in user-readable form
        constraints:
          - length:
              max: 4096
              error: sheriff-complaint-decision.decision-details.wrong-size
      - type: boolean
        name: anonymous
        optional: true
        description: >
          <code>true</code>, if the complaints' owners' names are not to be published, <code>false</code> otherwise
  - name: SheriffComplaintGroupInfo
    fields:
      - type: String
        name: id
      - type: String
        name: remoteNodeName
        description: name of the node the complaints are related to
      - type: String
        name: remoteNodeFullName
        optional: true
        description: full name of the node the complaints are related to
      - type: String
        name: remoteFeedName
        description: name of the feed the complaints are related to
      - type: String
        name: remotePostingId
        optional: true
        description: ID of the posting the complaints are related to
      - type: String
        name: remotePostingRevisionId
        optional: true
        description: ID of the posting's revision the complaints are related to
      - type: String
        name: remotePostingOwnerName
        optional: true
        description: posting owner's node name
      - type: String
        name: remotePostingOwnerFullName
        optional: true
        description: posting owner's full name
      - type: String
        name: remotePostingOwnerGender
        optional: true
        description: posting owner's gender
      - type: String
        name: remotePostingHeading
        optional: true
        description: heading of the posting
      - type: String
        name: remoteCommentId
        optional: true
        description: ID of the comment the complaints are related to
      - type: String
        name: remoteCommentRevisionId
        optional: true
        description: ID of the comment's revision the complaints are related to
      - type: String
        name: remoteCommentOwnerName
        optional: true
        description: comment owner's node name
      - type: String
        name: remoteCommentOwnerFullName
        optional: true
        description: comment owner's full name
      - type: String
        name: remoteCommentOwnerGender
        optional: true
        description: comment owner's gender
      - type: String
        name: remoteCommentHeading
        optional: true
        description: heading of the comment
      - type: timestamp
        name: createdAt
        description: the group of complaints creation timestamp - the real time when the group was created
      - type: long
        name: moment
        description: moment of the group of complaints
      - enum: SheriffComplaintStatus
        name: status
        description: status of the group of complaints
      - enum: SheriffOrderReason
        name: decisionCode
        optional: true
        description: sheriff's decision
      - type: String
        name: decisionDetails
        optional: true
        description: detailed explanation of sheriff's decision in user-readable form
      - type: timestamp
        name: decidedAt
        optional: true
        description: sheriff's decision timestamp - the real time when the decision was made
      - type: boolean
        name: anonymous
        optional: true
        description: >
          <code>true</code>, if the complaints' owners' names are not published, <code>false</code> otherwise
  - name: SheriffComplaintGroupsSliceInfo
    fields:
      - type: long
        name: before
        description: the slice contains all groups before this moment, inclusive. May be the far future.
      - type: long
        name: after
        description: the slice contains all groups after this moment, exclusive. May be the far past.
      - struct: SheriffComplaintGroupInfo
        array: true
        name: groups
        description: the groups
      - type: int
        name: total
        description: total number of groups
      - type: int
        name: totalInPast
        description: number of groups before this slice till the far past
      - type: int
        name: totalInFuture
        description: number of groups after this slice till the far future
  - name: SheriffComplaintInfo
    fields:
      - type: String
        name: id
      - type: String
        name: ownerName
        description: complaint owner's node name
      - type: String
        name: ownerFullName
        optional: true
        description: complaint owner's full name
      - type: String
        name: ownerGender
        optional: true
        description: complaint owner's gender
      - struct: SheriffComplaintGroupInfo
        name: group
        optional: true
        description: the group of complaints this complaint belongs to
      - enum: SheriffOrderReason
        name: reasonCode
        description: reason of the complaint
      - type: String
        name: reasonDetails
        optional: true
        description: detailed explanation of reason of the complaint in user-readable form
      - type: boolean
        name: anonymousRequested
        optional: true
        description: >
          <code>true</code>, if the complaint's owner wants his name not to be published, <code>false</code> otherwise
      - type: timestamp
        name: createdAt
        description: complaint creation timestamp - the real time when the order was created
  - name: SheriffComplaintText
    fields:
      - type: String
        name: ownerFullName
        optional: true
        description: complaint owner's full name
        constraints:
          - length:
              max: 96
              error: sheriff-complaint.owner-full-name.wrong-size
      - type: String
        name: ownerGender
        optional: true
        description: complaint owner's gender
        constraints:
          - length:
              max: 31
              error: sheriff-complaint.owner-gender.wrong-size
      - type: String
        name: nodeName
        description: name of the node the complaint is related to
        constraints:
          - notblank:
              error: sheriff-complaint.node-name.blank
          - length:
              max: 63
              error: sheriff-complaint.node-name.wrong-size
      - type: String
        name: fullName
        optional: true
        description: full name of the node the complaint is related to
        constraints:
          - length:
              max: 96
              error: sheriff-complaint.full-name.wrong-size
      - type: String
        name: feedName
        description: name of the feed the complaint is related to
        constraints:
          - notblank:
              error: sheriff-complaint.feed-name.blank
          - length:
              max: 63
              error: sheriff-complaint.feed-name.wrong-size
      - type: String
        name: postingId
        optional: true
        description: ID of the posting the complaint is related to
        constraints:
          - length:
              max: 40
              error: sheriff-complaint.posting-id.wrong-size
      - type: String
        name: postingOwnerName
        optional: true
        description: posting owner's node name
        constraints:
         - length:
             max: 63
             error: sheriff-complaint.posting-owner-name.wrong-size
      - type: String
        name: postingOwnerFullName
        optional: true
        description: posting owner's full name
        constraints:
          - length:
              max: 96
              error: sheriff-complaint.posting-owner-full-name.wrong-size
      - type: String
        name: postingOwnerGender
        optional: true
        description: posting owner's gender
        constraints:
          - length:
              max: 31
              error: sheriff-complaint.posting-owner-gender.wrong-size
      - type: String
        name: postingHeading
        optional: true
        description: heading of the posting
        constraints:
          - length:
              max: 255
              error: sheriff-complaint.posting-heading.wrong-size
      - type: String
        name: commentId
        optional: true
        description: ID of the comment the complaint is related to
        constraints:
          - length:
              max: 40
              error: sheriff-complaint.comment-id.wrong-size
      - type: String
        name: commentOwnerName
        optional: true
        description: comment owner's node name
        constraints:
          - length:
              max: 63
              error: sheriff-complaint.comment-owner-name.wrong-size
      - type: String
        name: commentOwnerFullName
        optional: true
        description: comment owner's full name
        constraints:
          - length:
              max: 96
              error: sheriff-complaint.comment-owner-full-name.wrong-size
      - type: String
        name: commentOwnerGender
        optional: true
        description: comment owner's gender
        constraints:
          - length:
              max: 31
              error: sheriff-complaint.comment-owner-gender.wrong-size
      - type: String
        name: commentHeading
        optional: true
        description: heading of the comment
        constraints:
          - length:
              max: 255
              error: sheriff-complaint.comment-heading.wrong-size
      - enum: SheriffOrderReason
        name: reasonCode
        optional: true
        description: reason of the complaint
      - type: String
        name: reasonDetails
        optional: true
        description: detailed explanation of reason of the complaint in user-readable form
        constraints:
          - length:
              max: 4096
              error: sheriff-complaint.reason-details.wrong-size
      - type: boolean
        name: anonymous
        optional: true
        description: >
          <code>true</code>, if the complaint's owner wants his name not to be published, <code>false</code> otherwise
  - name: SheriffOrderAttributes
    fields:
      - type: boolean
        name: delete
        optional: true
        description: >
          <code>true</code>, if the order is to cancel the previous order of this type, <code>false</code> otherwise
      - type: String
        name: feedName
        description: name of the feed the order is related to
        constraints:
          - notblank:
              error: sheriff-order.feed-name.blank
          - length:
              max: 63
              error: sheriff-order.feed-name.wrong-size
      - type: String
        name: postingId
        optional: true
        description: ID of the posting the order is related to
      - type: String
        name: commentId
        optional: true
        description: ID of the comment the order is related to
      - enum: SheriffOrderCategory
        name: category
        description: category of the order
      - enum: SheriffOrderReason
        name: reasonCode
        optional: true
        description: reason of the order
      - type: String
        name: reasonDetails
        optional: true
        description: detailed explanation of reason of the order in user-readable form
        constraints:
          - length:
              max: 4096
              error: sheriff-order.reason-details.wrong-size
  - name: SheriffOrderDetails
    fields:
      - type: String
        name: id
        constraints:
          - notblank:
              error: sheriff-order.id.blank
          - length:
              max: 40
              error: sheriff-order.id.wrong-size
      - type: boolean
        name: delete
        optional: true
        description: >
          <code>true</code>, if the order is to cancel the previous order of this type, <code>false</code> otherwise
      - type: String
        name: sheriffName
        description: node name of the sheriff
        constraints:
          - notblank:
              error: sheriff-order.sheriff-name.blank
          - length:
              max: 63
              error: sheriff-order.sheriff-name.wrong-size
      - struct: AvatarDescription
        name: sheriffAvatar
        optional: true
        description: sheriff's avatar
      - type: String
        name: feedName
        description: name of the feed the order is related to
        constraints:
          - notblank:
              error: sheriff-order.feed-name.blank
          - length:
              max: 63
              error: sheriff-order.feed-name.wrong-size
      - type: String
        name: postingId
        optional: true
        description: ID of the posting the order is related to
      - type: String
        name: commentId
        optional: true
        description: ID of the comment the order is related to
      - enum: SheriffOrderCategory
        name: category
        description: category of the order
      - enum: SheriffOrderReason
        name: reasonCode
        optional: true
        description: reason of the order
      - type: String
        name: reasonDetails
        optional: true
        description: detailed explanation of reason of the order in user-readable form
        constraints:
          - length:
              max: 4096
              error: sheriff-order.reason-details.wrong-size
      - type: timestamp
        name: createdAt
        description: order creation timestamp - the real time when the order was created
        constraints:
          - other:
              error: sheriff-order.created-at.out-of-range
              description: is too far from now
      - type: byte[]
        name: signature
        description: >
          the sheriff's signature (use <code><a href="fingerprints.html#SheriffOrder">SheriffOrder</a></code>
          fingerprint)
      - type: short
        name: signatureVersion
        description: signature version (i.e. fingerprint version)
  - name: SheriffOrderInfo
    fields:
      - type: String
        name: id
      - type: boolean
        name: delete
        optional: true
        description: >
          <code>true</code>, if the order is to cancel the previous order of this type, <code>false</code> otherwise
      - type: String
        name: sheriffName
        description: node name of the sheriff
      - type: String
        name: nodeName
        description: name of the node the order was sent to
      - type: String
        name: nodeFullName
        optional: true
        description: full name of the node the order was sent to
      - type: String
        name: feedName
        description: name of the feed the order is related to
      - type: String
        name: postingId
        optional: true
        description: ID of the posting the order is related to
      - type: String
        name: postingRevisionId
        optional: true
        description: ID of the posting's revision the order is related to
      - type: String
        name: postingOwnerName
        optional: true
        description: posting owner's node name
      - type: String
        name: postingOwnerFullName
        optional: true
        description: posting owner's full name
      - type: String
        name: postingOwnerGender
        optional: true
        description: posting owner's gender
      - type: String
        name: postingHeading
        optional: true
        description: heading of the posting
      - type: String
        name: commentId
        optional: true
        description: ID of the comment the order is related to
      - type: String
        name: commentRevisionId
        optional: true
        description: ID of the comment's revision the order is related to
      - type: String
        name: commentOwnerName
        optional: true
        description: comment owner's node name
      - type: String
        name: commentOwnerFullName
        optional: true
        description: comment owner's full name
      - type: String
        name: commentOwnerGender
        optional: true
        description: comment owner's gender
      - type: String
        name: commentHeading
        optional: true
        description: heading of the comment
      - enum: SheriffOrderCategory
        name: category
        description: category of the order
      - enum: SheriffOrderReason
        name: reasonCode
        optional: true
        description: reason of the order
      - type: String
        name: reasonDetails
        optional: true
        description: detailed explanation of reason of the order in user-readable form
      - type: timestamp
        name: createdAt
        description: order creation timestamp - the real time when the order was created
      - type: byte[]
        name: signature
        description: >
          the sheriff's signature (use <code><a href="fingerprints.html#SheriffOrder">SheriffOrder</a></code>
          fingerprint)
      - type: short
        name: signatureVersion
        description: signature version (i.e. fingerprint version)
      - type: String
        name: complaintGroupId
        optional: true
        description: ID of the groups of complaints that were the cause of the order
  - name: StoryAttributes
    fields:
      - type: String
        name: feedName
        optional: true
        description: name of the feed
      - type: timestamp
        name: publishAt
        optional: true
        description: story publication timestamp - the time the story must be published under in the feed
      - type: boolean
        name: pinned
        optional: true
        description: >
          <code>true</code>, if the story is pinned (should appear before any non-pinned story in the feed),
          <code>false</code> otherwise
      - type: boolean
        name: viewed
        optional: true
        description: value of the <code>viewed</code> flag (<code>null</code>, if the flag is not changed)
      - type: boolean
        name: read
        optional: true
        description: value of the <code>read</code> flag (<code>null</code>, if the flag is not changed)
      - type: boolean
        name: satisfied
        optional: true
        description: value of the <code>satisfied</code> flag (<code>null</code>, if the flag is not changed)
  - name: StoryInfo
    fields:
      - type: String
        name: id
      - type: String
        name: feedName
        description: name of the feed
      - enum: StoryType
        name: storyType
        description: type of the story
      - type: timestamp
        name: createdAt
        description: story creation timestamp - the real time when the story was created
      - type: timestamp
        name: publishedAt
        description: story publication timestamp - the time the story is published under in the feed
      - type: boolean
        name: pinned
        optional: true
        description: >
          <code>true</code>, if the story is pinned (should appear before any non-pinned story in the feed),
          <code>false</code> otherwise
      - type: long
        name: moment
      - type: boolean
        name: viewed
        optional: true
        description: <code>true</code>, if the story has been viewed by node owner, <code>false</code> otherwise
      - type: boolean
        name: read
        optional: true
        description: <code>true</code>, if the story has been read by node owner, <code>false</code> otherwise
      - type: boolean
        name: satisfied
        optional: true
        description: >
          if the story is associated with a user action (for example, it contains a form that should be submitted), this
          flag is set to <code>true</code> if the action is done already, and <code>false</code> otherwise
      - type: String
        name: summaryNodeName
        optional: true
        description: name of the node related to the summary of the story
      - type: String
        name: summaryFullName
        optional: true
        description: full name of the node related to the summary of the story
      - struct: AvatarImage
        name: summaryAvatar
        optional: true
        description: avatar of the summary of the story
      - type: String
        name: summary
        optional: true
        description: >
          user-readable summary of the story - this field is <b>deprecated</b> in favor of <code>summaryData</code>
      - struct: StorySummaryData
        name: summaryData
        optional: true
        description: details of the story; they are used by the client to build a user-readable summary of the story
      - struct: PostingInfo
        name: posting
        optional: true
        description: the posting this story is about
      - type: String
        name: postingId
        optional: true
        description: ID of the posting this story is about, used if the whole posting is not returned
      - struct: CommentInfo
        name: comment
        optional: true
        description: the comment this story is about
      - type: String
        name: commentId
        optional: true
        description: ID of the comment this story is about, used if the whole posting is not returned
      - type: String
        name: remoteNodeName
        optional: true
        description: name of the node this story is about
      - type: String
        name: remoteFullName
        optional: true
        description: full name of the node this story is about
      - type: String
        name: remotePostingId
        optional: true
        description: ID of the posting at remote node this story is about
      - type: String
        name: remoteCommentId
        optional: true
        description: ID of the comment at remote node this story is about
      - type: String
        name: remoteMediaId
        optional: true
        description: ID of the media at remote node this story is about
      - struct: StoryOperations
        name: operations
        optional: true
        description: the supported operations and the corresponding principals
  - name: StorySummaryData
    fields:
      - struct: StorySummaryNode
        name: node
        optional: true
        description: a node
      - struct: StorySummaryEntry
        name: posting
        optional: true
        description: a posting
      - struct: StorySummaryEntry
        name: comment
        optional: true
        description: a comment
      - struct: StorySummaryEntry
        array: true
        name: comments
        optional: true
        description: list of comments
      - type: int
        name: totalComments
        optional: true
        description: total number of comments
      - struct: StorySummaryEntry
        name: repliedTo
        optional: true
        description: the comment replied to
      - struct: StorySummaryEntry
        name: parentPosting
        optional: true
        description: the parent posting of the media
      - struct: StorySummaryReaction
        name: reaction
        optional: true
        description: a reaction
      - struct: StorySummaryReaction
        array: true
        name: reactions
        optional: true
        description: list of reactions
      - type: int
        name: totalReactions
        optional: true
        description: total number of reactions
      - type: String
        name: feedName
        optional: true
        description: name of a feed
      - enum: SubscriptionReason
        name: subscriptionReason
        optional: true
        description: subscription reason
      - struct: StorySummaryFriendGroup
        name: friendGroup
        optional: true
        description: a group of friends
      - struct: StorySummaryBlocked
        name: blocked
        optional: true
        description: summary of blocking a user
      - struct: StorySummarySheriff
        name: sheriff
        optional: true
        description: summary of an action of a sheriff
      - type: String
        name: description
        optional: true
        description: additional descriptive text
      - struct: StorySummaryPageClicks
        array: true
        name: clicks
        optional: true
        description: list of pages with number of clicks on each of them
  - name: StorySummaryBlocked
    fields:
      - enum: BlockedOperation
        array: true
        name: operations
        description: list of the operations blocked
      - type: long
        name: period
        optional: true
        description: the period of blocking in seconds
  - name: StorySummaryFriendGroup
    fields:
      - type: String
        name: id
        optional: true
        description: ID of the group of friends
      - type: String
        name: title
        optional: true
        description: title of the group of friends
  - name: StorySummaryEntry
    fields:
      - type: String
        name: ownerName
        optional: true
        description: entry owner's name
      - type: String
        name: ownerFullName
        optional: true
        description: entry owner's full name
      - type: String
        name: ownerGender
        optional: true
        description: entry owner's gender
      - type: String
        name: heading
        optional: true
        description: entry heading
      - type: String[]
        name: sheriffs
        optional: true
        description: list of sheriffs supervising the entry
      - struct: SheriffMark
        array: true
        name: sheriffMarks
        optional: true
        description: list of sheriff marks on the entry
  - name: StorySummaryNode
    fields:
      - type: String
        name: ownerName
        optional: true
        description: node owner's name
      - type: String
        name: ownerFullName
        optional: true
        description: node owner's full name
      - type: String
        name: ownerGender
        optional: true
        description: node owner's gender
  - name: StorySummaryPageClicks
    fields:
      - type: String
        name: heading
        optional: true
        description: page heading, <code>null</code> for the blog itself
      - type: String
        name: href
        description: page URL
      - type: int
        name: clicks
        description: number of clicks on the page
  - name: StorySummaryReaction
    fields:
      - type: String
        name: ownerName
        optional: true
        description: reaction owner's name
      - type: String
        name: ownerFullName
        optional: true
        description: reaction owner's full name
      - type: String
        name: ownerGender
        optional: true
        description: reaction owner's gender
      - type: int
        name: emoji
        optional: true
        description: reaction code
  - name: StorySummarySheriff
    fields:
      - type: String
        name: sheriffName
        description: name of the sheriff
      - type: String
        name: orderId
        optional: true
        description: ID of the sheriff's order
      - type: String
        name: complaintId
        optional: true
        description: ID of the complaint, if any
  - name: SubscriberDescription
    fields:
      - enum: SubscriptionType
        name: type
        description: subscription type
        constraints:
          - notnull:
              error: subscriber.type.missing
      - type: String
        name: feedName
        optional: true
        description: feed name, if the subscription type requires one
        constraints:
          - other:
              error: subscriber.feed-name.blank
              description: is empty
          - length:
              max: 63
              error: subscriber.feed-name.wrong-size
      - type: String
        name: postingId
        optional: true
        description: posting ID, if the subscription type requires one
        constraints:
          - other:
              error: subscriber.posting-id.blank
              description: is empty
      - type: timestamp
        name: lastUpdatedAt
        optional: true
        description: timestamp of the latest known state of the object
      - struct: SubscriberOperations
        name: operations
        optional: true
        description: the operations and the corresponding principals
        constraints:
          - other:
              error: subscriber.operations.wrong-principal
              description: contain an incorrect principal
  - name: SubscriberInfo
    fields:
      - type: String
        name: id
        description: subscriber ID
      - enum: SubscriptionType
        name: type
        description: subscription type
      - type: String
        name: feedName
        optional: true
        description: feed name, if the subscription type requires one
      - type: String
        name: postingId
        optional: true
        description: posting ID, if the subscription type requires one
      - type: String
        name: nodeName
        description: name of the subscribed node
      - struct: ContactInfo
        name: contact
        optional: true
        description: information known about the subscribed node
      - type: timestamp
        name: createdAt
        description: subscription creation timestamp
      - struct: SubscriberOperations
        name: operations
        optional: true
        description: the supported operations and the corresponding principals
      - struct: SubscriberOperations
        name: ownerOperations
        optional: true
        description: the supported operations and the corresponding principals as defined by the subscriber
      - struct: SubscriberOperations
        name: adminOperations
        optional: true
        description: the operations and the corresponding principals that are overridden by the node administrator
  - name: SubscriberOverride
    fields:
      - struct: SubscriberOperations
        name: operations
        optional: true
        description: the supported operations and the corresponding principals
        constraints:
          - other:
              error: subscriber.operations.wrong-principal
              description: contain an incorrect principal
      - struct: SubscriberOperations
        name: adminOperations
        optional: true
        description: the operations and the corresponding principals that are overridden by the node administrator
        constraints:
          - other:
              error: subscriber.admin-operations.wrong-principal
              description: contain an incorrect principal
  - name: SubscriptionDescription
    fields:
      - enum: SubscriptionType
        name: type
        description: subscription type
        constraints:
          - notnull:
              error: subscription.type.missing
      - type: String
        name: feedName
        optional: true
        description: the name of the feed on this node that receives notifications
        constraints:
          - other:
              error: subscription.feed-name.blank
              description: is empty
          - length:
              max: 63
              error: subscription.feed-name.wrong-size
      - type: String
        name: remoteNodeName
        description: the name of the node this node is subscribed to
        constraints:
          - notblank:
              error: subscription.remote-node-name.blank
          - length:
              max: 63
              error: subscription.remote-node-name.wrong-size
      - type: String
        name: remoteFeedName
        optional: true
        description: the name of the feed on the remote node, if the subscription type requires one
        constraints:
          - length:
              max: 63
              error: subscription.remote-feed-name.wrong-size
      - type: String
        name: remotePostingId
        optional: true
        description: posting ID on the remote node, if the subscription type requires one
        constraints:
          - length:
              max: 40
              error: subscription.remote-posting-id.wrong-size
      - enum: SubscriptionReason
        name: reason
        optional: true
        description: subscription reason
      - struct: SubscriptionOperations
        name: operations
        optional: true
        description: the operations and the corresponding principals
        constraints:
          - other:
              error: subscription.operations.wrong-principal
              description: contain an incorrect principal
  - name: SubscriptionFilter
    fields:
      - enum: SubscriptionType
        name: type
        optional: true
        description: subscription type
      - struct: RemoteFeed
        array: true
        name: feeds
        optional: true
        description: list of feeds
      - struct: RemotePosting
        array: true
        name: postings
        optional: true
        description: list of postings
  - name: SubscriptionInfo
    fields:
      - type: String
        name: id
        description: subscription ID
      - enum: SubscriptionType
        name: type
        description: subscription type
      - type: String
        name: feedName
        optional: true
        description: feed name on this node that receives notifications
      - type: String
        name: remoteNodeName
        description: name of the node this node is subscribed to
      - struct: ContactInfo
        name: contact
        optional: true
        description: information known about the remote node
      - type: String
        name: remoteFeedName
        optional: true
        description: feed name on the remote node, if the subscription type requires one
      - type: String
        name: remotePostingId
        optional: true
        description: posting ID on the remote node, if the subscription type requires one
      - type: timestamp
        name: createdAt
        description: subscription creation timestamp
      - enum: SubscriptionReason
        name: reason
        description: subscription reason
      - struct: SubscriptionOperations
        name: operations
        optional: true
        description: the supported operations and the corresponding principals
  - name: SubscriptionOverride
    fields:
      - struct: SubscriptionOperations
        name: operations
        optional: true
        description: the supported operations and the corresponding principals
        constraints:
          - other:
              error: subscription.operations.wrong-principal
              description: contain an incorrect principal
  - name: TokenAttributes
    fields:
      - type: String
        name: login
        constraints:
          - notblank:
              error: credentials.login.blank
      - type: String
        name: password
        constraints:
          - notblank:
              error: credentials.password.blank
      - enum: Scope
        array: true
        name: permissions
        optional: true
        description: >
          a bit mask describing which permissions should be granted to the token; if not set, all permissions of
          the administrator are granted.
      - type: String
        name: name
        optional: true
        description: a user-readable name of the token
  - name: TokenInfo
    fields:
      - type: String
        name: id
        description: token ID (this is not the token, just an ID)
      - type: String
        name: token
        description: the token
      - type: String
        name: name
        optional: true
        description: a user-readable name of the token
      - enum: Scope
        array: true
        name: permissions
        optional: true
        js-default: '[]'
        description: the list of permissions granted to the token
      - type: String
        name: pluginName
        optional: true
        description: a plugin the token belongs to; if set, only this plugin may use the token
      - type: timestamp
        name: createdAt
        description: token creation timestamp
      - type: timestamp
        name: deadline
        optional: true
        description: timestamp of the end of the token's life
      - type: timestamp
        name: lastUsedAt
        optional: true
        description: timestamp of the last time the token was used
      - type: String
        name: lastUsedBrowser
        optional: true
        description: name of the browser used by the latest user of the token
      - type: String
        name: lastUsedIp
        optional: true
        description: IP address of the latest user of the token
  - name: TokenUpdate
    fields:
      - type: String
        name: name
        optional: true
        description: a user-readable name of the token
      - enum: Scope
        array: true
        name: permissions
        optional: true
        description: >
          a bit mask describing which permissions should be granted to the token; if not set, the token permissions are
          left untouched
  - name: UpdateInfo
    fields:
      - type: boolean
        name: important
        optional: true
        description: <code>true</code>, if the update is important, <code>false</code> (the default) otherwise
      - type: String
        name: description
        optional: true
        description: description of the update
        constraints:
          - length:
              max: 128
              error: update.description.wrong-size
  - name: UserListInfo
    fields:
      - type: String
        name: name
        description: name of the user list
      - type: int
        name: total
        description: number of items in the user list
  - name: UserListItemAttributes
    fields:
      - type: String
        name: nodeName
        description: the name of the node
        constraints:
          - notblank:
              error: user-list-item.node-name.blank
          - length:
              max: 63
              error: user-list-item.node-name.wrong-size
  - name: UserListItemInfo
    fields:
      - type: String
        name: nodeName
        description: the name of the node
      - type: timestamp
        name: createdAt
        description: the node addition timestamp - the real time when the node was added to the list
      - type: long
        name: moment
        description: moment of the node
  - name: UserListSliceInfo
    fields:
      - type: String
        name: listName
        description: the name of the list
      - type: long
        name: before
        description: the slice contains all items before this moment, inclusive. May be the far future.
      - type: long
        name: after
        description: the slice contains all items after this moment, exclusive. May be the far past.
      - struct: UserListItemInfo
        array: true
        name: items
        description: the items
      - type: int
        name: total
        description: total number of items
      - type: int
        name: totalInPast
        description: number of items before this slice till the far past
      - type: int
        name: totalInFuture
        description: number of items after this slice till the far future
  - name: WhoAmI
    fields:
      - type: String
        name: nodeName
        optional: true
      - type: boolean
        name: nodeNameChanging
        optional: true
        description: <code>true</code> if node name is about to be changed
      - type: String
        name: fullName
        optional: true
        description: node owner's full name
      - type: String
        name: gender
        optional: true
        description: node owner's gender
      - type: String
        name: title
        optional: true
        description: node title
      - struct: AvatarImage
        name: avatar
        optional: true
        description: node owner's avatar
      - type: boolean
        name: frozen
        optional: true
        description: >
          <code>true</code> if the node is frozen due to inactivity, <code>false</code> (the default) otherwise

operations:
  - name: CommentOperations
    fields:
      - name: view
        default: public
        description: view the comment
      - name: edit
        default: owner
        description: edit the comment
      - name: delete
        default: private
        description: delete the comment
      - name: viewReactions
        default: public
        description: view the comment's reactions
      - name: viewNegativeReactions
        default: public
        description: view the comment's negative reactions
      - name: viewReactionTotals
        default: public
        description: view the number of the comment's reactions
      - name: viewNegativeReactionTotals
        default: public
        description: view the number of the comment's negative reactions
      - name: viewReactionRatios
        default: public
        description: view the relative number of different types of the comment's reactions
      - name: viewNegativeReactionRatios
        default: public
        description: view the relative number of different types of the comment's negative reactions
      - name: addReaction
        default: signed
        description: add a reaction to the comment
      - name: addNegativeReaction
        default: signed
        description: add a negative reaction to the comment
      - name: overrideReaction
        default: owner
        description: override the permissions of the comment's reactions
  - name: ContactOperations
    fields:
      - name: viewFeedSubscriber
        default: public
        description: see the subscriber information
      - name: viewFeedSubscription
        default: public
        description: see the subscription information
      - name: viewFriend
        default: public
        description: see the friend information
      - name: viewFriendOf
        default: public
        description: see the friend-of information (this operation can be modified by admin only)
      - name: viewBlock
        default: public
        description: see the blocking information (this operation can be modified by admin only)
      - name: viewBlockBy
        default: public
        description: see the blocked-by information (this operation can be modified by admin only)
  - name: FeedOperations
    fields:
      - name: add
        default:
        description: add stories to the feed
  - name: FriendOperations
    fields:
      - name: view
        default: public
        description: view the membership of the node in the group of friends
  - name: FriendGroupOperations
    fields:
      - name: view
        default: public
        description: view the group of friends
  - name: NodeNameOperations
    fields:
      - name: manage
        default:
        description: any modification of the node name, prolonging it etc.
  - name: PeopleOperations
    fields:
      - name: viewSubscribers
        default: public
        description: view the list of subscribers
      - name: viewSubscriptions
        default: public
        description: view the list of subscriptions
      - name: viewFriends
        default: public
        description: view the list of friends
      - name: viewFriendOfs
        default: public
        description: view the list of those who added this node to friends
      - name: viewBlocked
        default: public
        description: view the list of blocked nodes
      - name: viewBlockedBy
        default: admin
        description: view the list of those who blocked this node
      - name: viewSubscribersTotal
        default: public
        description: view the number of subscribers
      - name: viewSubscriptionsTotal
        default: public
        description: view the number of subscriptions
      - name: viewFriendsTotal
        default: public
        description: view the number of friends
      - name: viewFriendOfsTotal
        default: public
        description: view the number of those who added this node to friends
  - name: PostingOperations
    fields:
      - name: view
        default: public
        description: view the posting
      - name: edit
        default: owner
        description: edit the posting
      - name: delete
        default: private
        description: delete the posting
      - name: viewComments
        default: public
        description: view the posting's comments
      - name: addComment
        default: signed
        description: add a comment to the posting
      - name: overrideComment
        default: owner
        description: override the permissions of the posting's comments
      - name: viewReactions
        default: public
        description: view the posting's reactions
      - name: viewNegativeReactions
        default: public
        description: view the posting's negative reactions
      - name: viewReactionTotals
        default: public
        description: view the number of the posting's reactions
      - name: viewNegativeReactionTotals
        default: public
        description: view the number of the posting's negative reactions
      - name: viewReactionRatios
        default: public
        description: view the relative number of different types of the posting's reactions
      - name: viewNegativeReactionRatios
        default: public
        description: view the relative number of different types of the posting's negative reactions
      - name: addReaction
        default: signed
        description: add a reaction to the posting
      - name: addNegativeReaction
        default: signed
        description: add a negative reaction to the posting
      - name: overrideReaction
        default: owner
        description: override the permissions of the posting's reactions
      - name: overrideCommentReaction
        default: owner
        description: override the permissions of the posting's comment's reactions
  - name: PrivateMediaFileOperations
    fields:
      - name: view
        default: public
        description: view the media file
  - name: ProfileOperations
    fields:
      - name: edit
        default: admin
        description: change the profile
      - name: viewEmail
        default: admin
        description: view the e-mail address in the profile
  - name: ReactionOperations
    fields:
      - name: view
        default: public
        description: view the reaction
      - name: delete
        default: private
        description: delete the reaction
  - name: StoryOperations
    fields:
      - name: edit
        default: admin
        description: update the story
      - name: delete
        default: admin
        description: delete the story
  - name: SubscriberOperations
    fields:
      - name: view
        default: public
        description: see the subscriber
      - name: delete
        default: private
        description: delete the subscriber (this operation cannot be modified or overridden)
  - name: SubscriptionOperations
    fields:
      - name: view
        default: public
        description: see the subscription
      - name: delete
        default: admin
        description: delete the subscription (this operation cannot be modified or overridden)

enums:
  - name: AskSubject
    values:
      - name: subscribe
        description: >
          "subscribe to me" - asking remote node to subscribe to this node
      - name: friend
        description: >
          "add me to your friends" - asking remote node to add this node to friends
  - name: BlockedEntryOperation
    values:
      - name: addComment
        description: add a comment
      - name: addReaction
        description: add a reaction
  - name: BlockedOperation
    values:
      - name: reaction
        description: add reactions to entries on the node
      - name: comment
        description: add comments to postings on the node
      - name: posting
        description: add postings to the node
      - name: visibility
        description: be visible to the node
      - name: instant
        description: be visible in stories added to the instants feed of the node
  - name: BodyFormat
    values:
      - name: message
        description: <code><a href="#Body">Body</a></code> structure
      - name: application
        description: an application-specific structure
  - name: DraftType
    values:
      - name: new-posting
        description: draft of a new posting
      - name: posting-update
        description: draft of an update to a posting
      - name: new-comment
        description: draft of a new comment
      - name: comment-update
        description: draft of an update to a comment
  - name: OperationStatus
    values:
      - name: waiting
        description: the operation is waiting to be sent to the naming server
      - name: added
        description: the operation was accepted by the naming server
      - name: started
        description: the naming server started to proceed the operation
      - name: succeeded
        description: the operation completed successfully
      - name: failed
        description: the operation failed
      - name: unknown
        description: the operation status is unknown
  - name: PrincipalFlag
    values:
      - name: none
        description:
      - name: private
        description:
      - name: admin
        description:
      - name: owner
        description:
      - name: secret
        description:
      - name: senior
        description:
      - name: enigma
        description:
      - name: major
        description:
      - name: signed
        description:
      - name: subscribed
        description:
      - name: public
        description:
      - name: friends
        description:
      - name: unset
        description:
  - name: PushContentType
    values:
      - name: story-added
        description: a story was added to a feed
      - name: story-deleted
        description: a story was deleted from a feed
      - name: feed-updated
        description: feed status was updated
  - name: PushRelayType
    values:
      - name: fcm
        description: Google Firebase Cloud Messaging (FCM) relay
  - name: Scope
    values:
      - name: none
        description: no permissions
        value: "0x00000000"
      - name: identify
        description: allow identifying under the corresponding node name
        value: "0x00000000"
      - name: other
        description: other permissions
        value: "0x00000001"
      - name: view-media
        description: view any media file
        value: "0x00000002"
      - name: view-content
        description: view any content (posts, comments, reactions), except media files
        value: "0x00000004"
      - name: add-post
        description: create posts owned by the node
        value: "0x00000008"
      - name: update-post
        description: modify posts owned by the node
        value: "0x00000010"
      - name: add-comment
        description: create comments owned by the node
        value: "0x00000020"
      - name: update-comment
        description: modify comments owned by the node
        value: "0x00000040"
      - name: react
        description: create and delete reactions owned by the node
        value: "0x00000080"
      - name: delete-own-content
        description: delete any content owned by the node
        value: "0x00000100"
      - name: delete-others-content
        description: delete any content not owned by the node, but stored on it
        value: "0x00000200"
      - name: view-people
        description: view all contacts of the node
        value: "0x00000400"
      - name: block
        description: block and unblock people
        value: "0x00000800"
      - name: friend
        description: add and remove friends and friend groups
        value: "0x00001000"
      - name: remote-identify
        description: create cartes for authentication on other nodes
        value: "0x00002000"
      - name: drafts
        description: use drafts
        value: "0x00004000"
      - name: view-feeds
        description: view all feeds and status of stories in them
        value: "0x00008000"
      - name: update-feeds
        description: add and modify stories in feeds
        value: "0x00010000"
      - name: name
        description: update the name of the node
        value: "0x00020000"
      - name: plugins
        description: administrate plugins
        value: "0x00040000"
      - name: view-profile
        description: view all fields of the profile
        value: "0x00080000"
      - name: update-profile
        description: change the profile
        value: "0x00100000"
      - name: sheriff
        description: use sheriff's powers
        value: "0x00200000"
      - name: view-settings
        description: view the node settings
        value: "0x00400000"
      - name: update-settings
        description: modify the node settings
        value: "0x00800000"
      - name: subscribe
        description: subscribe and unsubscribe to the feeds
        value: "0x01000000"
      - name: tokens
        description: manage authentication tokens
        value: "0x02000000"
      - name: user-lists
        description: modify lists of users
        value: "0x04000000"
      - name: grant
        description: grant administrative permission on this node to other nodes
        value: "0x08000000"
      - name: upload-public-media
        description: upload a public media file
        value: "0x10000000"
      - name: upload-private-media
        description: upload a private media file
        value: "0x20000000"
      - name: view-all
        description: all view-only permissions
        value: "0x00088406"
      - name: all
        description: all permissions
        value: "0x3fffffff"
  - name: SearchContentUpdateType
    values:
      - name: block
        description: the node was blocked
      - name: friend
        description: the node was added to the list of friends
      - name: profile
        description: the profile was updated
      - name: subscribe
        description: subscribed to the node
      - name: unblock
        description: the node was unblocked
      - name: unfriend
        description: the node was removed from the list of friends
      - name: unsubscribe
        description: unsubscribed from the node
  - name: SearchEngine
    values:
      - name: google
        description: Google
  - name: SettingType
    values:
      - name: bool
        description: boolean, may have value <code>true</code> or <code>false</code>
      - name: int
        description: integer
      - name: string
        description: string
      - name: json
        description: string representation of a JSON structure
      - name: Duration
        description: >
          period of time, an non-negative integer followed by a single character
          designating a measurement unit:
          <ul>
            <li><code>s</code> - seconds;</li>
            <li><code>m</code> - minutes;</li>
            <li><code>h</code> - hours;</li>
            <li><code>d</code> - days.</li>
          </ul>
      - name: PrivateKey
        description: a private cryptographic key
      - name: PublicKey
        description: a public cryptographic key
      - name: Timestamp
        description: timestamp
      - name: UUID
        description: UUID
      - name: Principal
        description: <a href="access-controls.html#principals">principal</a>
  - name: SheriffComplaintStatus
    values:
      - name: posted
        description: the group is just added
      - name: prepared
        description: automatic preprocessing is done
      - name: prepare-failed
        description: automatic preprocessing is failed
      - name: not-found
        description: the entry the group is related to is not found
      - name: invalid-target
        description: the entry the group is related to is specified incorrectly
      - name: not-original
        description: the posting the group is related to is a copy of the original posting
      - name: not-sheriff
        description: the entry the group is related to is not under supervision of the sheriff
      - name: approved
        description: the group is approved by the sheriff
      - name: rejected
        description: the group is rejected by the sheriff
  - name: SheriffOrderCategory
    values:
      - name: visibility
        description: hide the feed or the entry
  - name: SheriffOrderReason
    values:
      - name: unlawful
        description: violation of a law
        ordinal: 1
      - name: defamatory
        description: defamatory content
        ordinal: 2
      - name: threat
        description: contains a threat against a person
        ordinal: 3
      - name: spam
        description: spam
        ordinal: 4
      - name: scam
        description: fraudulent content
        ordinal: 5
      - name: malware
        description: distribution of malware
        ordinal: 6
      - name: copyright
        description: copyright infringement
        ordinal: 7
      - name: impersonating
        description: the author pretends to be someone else
        ordinal: 8
      - name: privacy
        description: violation of someone's privacy
        ordinal: 9
      - name: other
        description: any other reason
        ordinal: 0
  - name: SourceFormat
    values:
      - name: plain-text
        description: plain text with newlines and paragraphs delimited by empty line
        ordinal: 0
      - name: html
        description: HTML-formatted text, the node may allow only limited set of tags
        ordinal: 1
      - name: markdown
        description: text in Markdown format
        ordinal: 2
      - name: html/visual
        description: HTML-formatted text, WYSIWYG editor
        ordinal: 4
      - name: application
        description: application-specific format
        ordinal: 3
  - name: StoryType
    values:
      - name: asked-to-friend
        description: a remote node asked to add it to friends
        ordinal: 30
      - name: asked-to-subscribe
        description: a remote node asked to subscribe to it
        ordinal: 29
      - name: blocked-user
        description: a remote node has blocked the user globally
        ordinal: 31
      - name: blocked-user-in-posting
        description: a remote node has blocked the user in a posting
        ordinal: 33
      - name: comment-added
        description: a comment was added under the user's posting
        ordinal: 6
      - name: comment-media-reaction-added-negative
        description: a positive reaction was added to a media attached to a comment
        ordinal: 20
      - name: comment-media-reaction-added-positive
        description: a positive reaction was added to a media attached to a comment
        ordinal: 19
      - name: comment-media-reaction-failed
        description: a failed attempt to add a reaction to a media attached to a comment
        ordinal: 22
      - name: comment-post-task-failed
        description: a failed attempt to post a comment
        ordinal: 12
      - name: comment-reaction-added-negative
        description: a negative reaction was added to the user's comment
        ordinal: 10
      - name: comment-reaction-added-positive
        description: a positive reaction was added to the user's comment
        ordinal: 9
      - name: comment-reaction-task-failed
        description: a failed attempt to post a reaction to a comment
        ordinal: 25
      - name: comment-update-task-failed
        description: a failed attempt to update a comment
        ordinal: 13
      - name: defrosting
        description: the node's owner has connected to it after long inactivity and the node is leaving the frozen state
        ordinal: 39
      - name: friend-added
        description: a remote node has added the user to friends
        ordinal: 26
      - name: friend-deleted
        description: a remote node has removed the user from friends
        ordinal: 27
      - name: friend-group-deleted
        description: a remote group of friends, the user was a member of, has been deleted
        ordinal: 28
      - name: mention-comment
        description: the user was mentioned in a comment
        ordinal: 7
      - name: mention-posting
        description: the user was mentioned in a posting on another node
        ordinal: 3
      - name: posting-added
        description: a posting was added; <b>stories of this type are used for feeds containing postings</b>
        ordinal: 0
      - name: posting-media-reaction-added-negative
        description: a negative reaction was added to a media attached to a posting
        ordinal: 18
      - name: posting-media-reaction-added-positive
        description: a positive reaction was added to a media attached to a posting
        ordinal: 17
      - name: posting-media-reaction-failed
        description: a failed attempt to add a reaction to a media attached to a posting
        ordinal: 21
      - name: posting-post-task-failed
        description: a failed attempt to create a posting
        ordinal: 15
      - name: posting-reaction-task-failed
        description: a failed attempt to post a reaction to a posting
        ordinal: 24
      - name: posting-subscribe-task-failed
        description: a failed attempt to subscribe to a posting
        ordinal: 23
      - name: posting-update-task-failed
        description: a failed attempt to update a posting
        ordinal: 16
      - name: posting-updated
        description: a posting was updated
        ordinal: 14
      - name: reaction-added-negative
        description: a negative reaction was added to the user's posting
        ordinal: 2
      - name: reaction-added-positive
        description: a positive reaction was added to the user's posting
        ordinal: 1
      - name: reminder-avatar
        description: reminder for the user to set an avatar
        ordinal: 42
      - name: reminder-email
        description: reminder for the user to set an email
        ordinal: 43
      - name: reminder-full-name
        description: reminder for the user to set a full name
        ordinal: 41
      - name: reminder-sheriff-allow
        description: reminder for the user to allow access for Google Play sheriff
        ordinal: 44
      - name: remote-comment-added
        description: a comment was added under a posting the user is subscribed to
        ordinal: 11
      - name: reply-comment
        description: a reply was added to the user's comment
        ordinal: 8
      - name: search-report
        description: visits from search engines report
        ordinal: 40
      - name: sheriff-complaint-added
        description: a new complaint was received
        ordinal: 37
      - name: sheriff-complaint-decided
        description: a decision was made on the user's complaint
        ordinal: 38
      - name: sheriff-marked
        description: user's entry was marked by a sheriff
        ordinal: 35
      - name: sheriff-unmarked
        description: user's entry was unmarked by a sheriff
        ordinal: 36
      - name: subscriber-added
        description: another node subscribed to user's feed
        ordinal: 4
      - name: subscriber-deleted
        description: another node unsubscribed from user's feed
        ordinal: 5
      - name: unblocked-user
        description: a remote node has unblocked the user globally
        ordinal: 32
      - name: unblocked-user-in-posting
        description: a remote node has unblocked the user in a posting
        ordinal: 34
  - name: SubscriptionReason
    values:
      - name: user
        description: node owner asked to subscribe
      - name: mention
        description: node name was mentioned
      - name: comment
        description: node owner commented the posting
      - name: auto
        description: node was subscribed automatically according to the settings
  - name: SubscriptionType
    values:
      - name: feed
        description: subscribe to new stories in the feed
        ordinal: 0
      - name: posting
        description: subscribe to updates to the posting
        ordinal: 1
      - name: posting-comments
        description: subscribe to new comments to the posting
        ordinal: 2
      - name: profile
        description: subscribe to updates to the node profile
        ordinal: 3
      - name: search
        description: subscribe to updates to all content that may be indexed by a search engine
        ordinal: 5
      - name: user-list
        description: subscribe to updates to the user list (its name is passed in <code>feedName</code> field)
        ordinal: 4
  - name: VerificationStatus
    values:
      - name: running
        description: the verification is pending
      - name: correct
        description: the signature is correct
      - name: incorrect
        description: the signature is incorrect
      - name: error
        description: the verification cannot be performed due to an error

http-codes:
  - code: 200
    description: No error.
  - code: 201
    description: Object created successfully. The object location is provided in <code>Location:</code> header.
  - code: 400
    description: Validation of the request body failed.
  - code: 401
    description: Invalid authentication token or root secret.
  - code: 403
    description: Authentication required, but not provided.
  - code: 404
    description: Unrecognized request or object not found.
  - code: 405
    description: Method not allowed.
  - code: 409
    description: Operation failed.
  - code: 500
    description: The node configured incorrectly or a bug in the node software; naming service not available.
