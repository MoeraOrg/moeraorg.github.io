enums:
- name: AskSubject
  values:
  - description: '"subscribe to me" - asking remote node to subscribe to this node

      '
    name: subscribe
  - description: '"add me to your friends" - asking remote node to add this node to
      friends

      '
    name: friend
- name: BlockedEntryOperation
  values:
  - description: add a comment
    name: addComment
  - description: add a reaction
    name: addReaction
- name: BlockedOperation
  values:
  - description: add reactions to entries on the node
    name: reaction
  - description: add comments to postings on the node
    name: comment
  - description: add postings to the node
    name: posting
  - description: be visible to the node
    name: visibility
  - description: be visible in stories added to the instants feed of the node
    name: instant
- name: BodyFormat
  values:
  - description: <code><a href="#Body">Body</a></code> structure
    name: message
  - description: an application-specific structure
    name: application
- name: DraftType
  values:
  - description: draft of a new posting
    name: new-posting
  - description: draft of an update to a posting
    name: posting-update
  - description: draft of a new comment
    name: new-comment
  - description: draft of an update to a comment
    name: comment-update
- name: OperationStatus
  values:
  - description: the operation is waiting to be sent to the naming server
    name: waiting
  - description: the operation was accepted by the naming server
    name: added
  - description: the naming server started to proceed the operation
    name: started
  - description: the operation completed successfully
    name: succeeded
  - description: the operation failed
    name: failed
  - description: the operation status is unknown
    name: unknown
- name: PrincipalFlag
  values:
  - description: null
    name: none
  - description: null
    name: private
  - description: null
    name: admin
  - description: null
    name: owner
  - description: null
    name: secret
  - description: null
    name: senior
  - description: null
    name: enigma
  - description: null
    name: major
  - description: null
    name: signed
  - description: null
    name: subscribed
  - description: null
    name: public
  - description: null
    name: friends
  - description: null
    name: unset
- name: PushContentType
  values:
  - description: a story was added to a feed
    name: story-added
  - description: a story was deleted from a feed
    name: story-deleted
  - description: feed status was updated
    name: feed-updated
- name: PushRelayType
  values:
  - description: Google Firebase Cloud Messaging (FCM) relay
    name: fcm
- name: Scope
  values:
  - description: no permissions
    name: none
    value: '0x00000000'
  - description: allow identifying under the corresponding node name
    name: identify
    value: '0x00000000'
  - description: other permissions
    name: other
    value: '0x00000001'
  - description: view any media file
    name: view-media
    value: '0x00000002'
  - description: view any content (posts, comments, reactions), except media files
    name: view-content
    value: '0x00000004'
  - description: create posts owned by the node
    name: add-post
    value: '0x00000008'
  - description: modify posts owned by the node
    name: update-post
    value: '0x00000010'
  - description: create comments owned by the node
    name: add-comment
    value: '0x00000020'
  - description: modify comments owned by the node
    name: update-comment
    value: '0x00000040'
  - description: create and delete reactions owned by the node
    name: react
    value: '0x00000080'
  - description: delete any content owned by the node
    name: delete-own-content
    value: '0x00000100'
  - description: delete any content not owned by the node, but stored on it
    name: delete-others-content
    value: '0x00000200'
  - description: view all contacts of the node
    name: view-people
    value: '0x00000400'
  - description: block and unblock people
    name: block
    value: '0x00000800'
  - description: add and remove friends and friend groups
    name: friend
    value: '0x00001000'
  - description: create cartes for authentication on other nodes
    name: remote-identify
    value: '0x00002000'
  - description: use drafts
    name: drafts
    value: '0x00004000'
  - description: view all feeds and status of stories in them
    name: view-feeds
    value: '0x00008000'
  - description: add and modify stories in feeds
    name: update-feeds
    value: '0x00010000'
  - description: update the name of the node
    name: name
    value: '0x00020000'
  - description: administrate plugins
    name: plugins
    value: '0x00040000'
  - description: view all fields of the profile
    name: view-profile
    value: '0x00080000'
  - description: change the profile
    name: update-profile
    value: '0x00100000'
  - description: use sheriff's powers
    name: sheriff
    value: '0x00200000'
  - description: view the node settings
    name: view-settings
    value: '0x00400000'
  - description: modify the node settings
    name: update-settings
    value: '0x00800000'
  - description: subscribe and unsubscribe to the feeds
    name: subscribe
    value: '0x01000000'
  - description: manage authentication tokens
    name: tokens
    value: '0x02000000'
  - description: modify lists of users
    name: user-lists
    value: '0x04000000'
  - description: grant administrative permission on this node to other nodes
    name: grant
    value: '0x08000000'
  - description: upload a public media file
    name: upload-public-media
    value: '0x10000000'
  - description: upload a private media file
    name: upload-private-media
    value: '0x20000000'
  - description: all view-only permissions
    name: view-all
    value: '0x00088406'
  - description: all permissions
    name: all
    value: '0x3fffffff'
- name: SearchContentUpdateType
  values:
  - description: the node was blocked
    name: block
  - description: a comment was added
    name: comment-add
  - description: a comment was updated
    name: comment-update
  - description: a comment's heading was updated
    name: comment-update-heading
  - description: text content of a media attached to a comment was updated
    name: comment-update-media-text
  - description: a comment was deleted
    name: comment-delete
  - description: the node was added to the list of friends
    name: friend
  - description: the profile was updated
    name: profile
  - description: a posting was added
    name: posting-add
  - description: a posting was updated; sent by the original node only
    name: posting-update
  - description: a posting's heading was updated; sent by the original node only
    name: posting-update-heading
  - description: text content of a media attached to a posting was updated; sent by
      the original node only
    name: posting-update-media-text
  - description: a posting was deleted
    name: posting-delete
  - description: a reaction was added
    name: reaction-add
  - description: a reaction was deleted
    name: reaction-delete
  - description: all reaction were deleted
    name: reactions-delete-all
  - description: subscribed to the node
    name: subscribe
  - description: the node was unblocked
    name: unblock
  - description: the node was removed from the list of friends
    name: unfriend
  - description: unsubscribed from the node
    name: unsubscribe
- name: SearchEngine
  values:
  - description: Google
    name: google
- name: SearchEntryType
  values:
  - description: any type of an entry
    name: all
  - description: only postings
    name: posting
  - description: only comments
    name: comment
- name: SettingType
  values:
  - description: boolean, may have value <code>true</code> or <code>false</code>
    name: bool
  - description: integer
    name: int
  - description: string
    name: string
  - description: string representation of a JSON structure
    name: json
  - description: "period of time, an non-negative integer followed by a single character\
      \ designating a measurement unit: <ul>\n  <li><code>s</code> - seconds;</li>\n\
      \  <li><code>m</code> - minutes;</li>\n  <li><code>h</code> - hours;</li>\n\
      \  <li><code>d</code> - days.</li>\n</ul>\n"
    name: Duration
  - description: a private cryptographic key
    name: PrivateKey
  - description: a public cryptographic key
    name: PublicKey
  - description: timestamp
    name: Timestamp
  - description: UUID
    name: UUID
  - description: <a href="access-controls.html#principals">principal</a>
    name: Principal
- name: SheriffComplaintStatus
  values:
  - description: the group is just added
    name: posted
  - description: automatic preprocessing is done
    name: prepared
  - description: automatic preprocessing is failed
    name: prepare-failed
  - description: the entry the group is related to is not found
    name: not-found
  - description: the entry the group is related to is specified incorrectly
    name: invalid-target
  - description: the posting the group is related to is a copy of the original posting
    name: not-original
  - description: the entry the group is related to is not under supervision of the
      sheriff
    name: not-sheriff
  - description: the group is approved by the sheriff
    name: approved
  - description: the group is rejected by the sheriff
    name: rejected
- name: SheriffOrderCategory
  values:
  - description: hide the feed or the entry
    name: visibility
- name: SheriffOrderReason
  values:
  - description: violation of a law
    name: unlawful
    ordinal: 1
  - description: defamatory content
    name: defamatory
    ordinal: 2
  - description: contains a threat against a person
    name: threat
    ordinal: 3
  - description: spam
    name: spam
    ordinal: 4
  - description: fraudulent content
    name: scam
    ordinal: 5
  - description: distribution of malware
    name: malware
    ordinal: 6
  - description: copyright infringement
    name: copyright
    ordinal: 7
  - description: the author pretends to be someone else
    name: impersonating
    ordinal: 8
  - description: violation of someone's privacy
    name: privacy
    ordinal: 9
  - description: any other reason
    name: other
    ordinal: 0
- name: SourceFormat
  values:
  - description: plain text with newlines and paragraphs delimited by empty line
    name: plain-text
    ordinal: 0
  - description: HTML-formatted text, the node may allow only limited set of tags
    name: html
    ordinal: 1
  - description: text in Markdown format
    name: markdown
    ordinal: 2
  - description: HTML-formatted text, WYSIWYG editor
    name: html/visual
    ordinal: 4
  - description: application-specific format
    name: application
    ordinal: 3
- name: StoryType
  values:
  - description: a remote node asked to add it to friends
    name: asked-to-friend
    ordinal: 30
  - description: a remote node asked to subscribe to it
    name: asked-to-subscribe
    ordinal: 29
  - description: a remote node has blocked the user globally
    name: blocked-user
    ordinal: 31
  - description: a remote node has blocked the user in a posting
    name: blocked-user-in-posting
    ordinal: 33
  - description: a comment was added under the user's posting
    name: comment-added
    ordinal: 6
  - description: a positive reaction was added to a media attached to a comment
    name: comment-media-reaction-added-negative
    ordinal: 20
  - description: a positive reaction was added to a media attached to a comment
    name: comment-media-reaction-added-positive
    ordinal: 19
  - description: a failed attempt to add a reaction to a media attached to a comment
    name: comment-media-reaction-failed
    ordinal: 22
  - description: a failed attempt to post a comment
    name: comment-post-task-failed
    ordinal: 12
  - description: a negative reaction was added to the user's comment
    name: comment-reaction-added-negative
    ordinal: 10
  - description: a positive reaction was added to the user's comment
    name: comment-reaction-added-positive
    ordinal: 9
  - description: a failed attempt to post a reaction to a comment
    name: comment-reaction-task-failed
    ordinal: 25
  - description: a failed attempt to update a comment
    name: comment-update-task-failed
    ordinal: 13
  - description: the node's owner has connected to it after long inactivity and the
      node is leaving the frozen state
    name: defrosting
    ordinal: 39
  - description: a remote node has added the user to friends
    name: friend-added
    ordinal: 26
  - description: a remote node has removed the user from friends
    name: friend-deleted
    ordinal: 27
  - description: a remote group of friends, the user was a member of, has been deleted
    name: friend-group-deleted
    ordinal: 28
  - description: the user was mentioned in a comment
    name: mention-comment
    ordinal: 7
  - description: the user was mentioned in a posting on another node
    name: mention-posting
    ordinal: 3
  - description: a posting was added; <b>stories of this type are used for feeds containing
      postings</b>
    name: posting-added
    ordinal: 0
  - description: a negative reaction was added to a media attached to a posting
    name: posting-media-reaction-added-negative
    ordinal: 18
  - description: a positive reaction was added to a media attached to a posting
    name: posting-media-reaction-added-positive
    ordinal: 17
  - description: a failed attempt to add a reaction to a media attached to a posting
    name: posting-media-reaction-failed
    ordinal: 21
  - description: a failed attempt to create a posting
    name: posting-post-task-failed
    ordinal: 15
  - description: a failed attempt to post a reaction to a posting
    name: posting-reaction-task-failed
    ordinal: 24
  - description: a failed attempt to subscribe to a posting
    name: posting-subscribe-task-failed
    ordinal: 23
  - description: a failed attempt to update a posting
    name: posting-update-task-failed
    ordinal: 16
  - description: a posting was updated
    name: posting-updated
    ordinal: 14
  - description: a negative reaction was added to the user's posting
    name: reaction-added-negative
    ordinal: 2
  - description: a positive reaction was added to the user's posting
    name: reaction-added-positive
    ordinal: 1
  - description: reminder for the user to set an avatar
    name: reminder-avatar
    ordinal: 42
  - description: reminder for the user to set an email
    name: reminder-email
    ordinal: 43
  - description: reminder for the user to set a full name
    name: reminder-full-name
    ordinal: 41
  - description: reminder for the user to allow access for Google Play sheriff
    name: reminder-sheriff-allow
    ordinal: 44
  - description: a comment was added under a posting the user is subscribed to
    name: remote-comment-added
    ordinal: 11
  - description: a reply was added to the user's comment
    name: reply-comment
    ordinal: 8
  - description: visits from search engines report
    name: search-report
    ordinal: 40
  - description: a new complaint was received
    name: sheriff-complaint-added
    ordinal: 37
  - description: a decision was made on the user's complaint
    name: sheriff-complaint-decided
    ordinal: 38
  - description: user's entry was marked by a sheriff
    name: sheriff-marked
    ordinal: 35
  - description: user's entry was unmarked by a sheriff
    name: sheriff-unmarked
    ordinal: 36
  - description: another node subscribed to user's feed
    name: subscriber-added
    ordinal: 4
  - description: another node unsubscribed from user's feed
    name: subscriber-deleted
    ordinal: 5
  - description: a remote node has unblocked the user globally
    name: unblocked-user
    ordinal: 32
  - description: a remote node has unblocked the user in a posting
    name: unblocked-user-in-posting
    ordinal: 34
- name: SubscriptionReason
  values:
  - description: node owner asked to subscribe
    name: user
  - description: node name was mentioned
    name: mention
  - description: node owner commented the posting
    name: comment
  - description: node was subscribed automatically according to the settings
    name: auto
- name: SubscriptionType
  values:
  - description: subscribe to new stories in the feed
    name: feed
    ordinal: 0
  - description: subscribe to updates to the posting
    name: posting
    ordinal: 1
  - description: subscribe to new comments to the posting
    name: posting-comments
    ordinal: 2
  - description: subscribe to updates to the node profile
    name: profile
    ordinal: 3
  - description: subscribe to updates to all content that may be indexed by a search
      engine
    name: search
    ordinal: 5
  - description: subscribe to updates to the user list (its name is passed in <code>feedName</code>
      field)
    name: user-list
    ordinal: 4
- name: VerificationStatus
  values:
  - description: the verification is pending
    name: running
  - description: the signature is correct
    name: correct
  - description: the signature is incorrect
    name: incorrect
  - description: the verification cannot be performed due to an error
    name: error
objects:
- description: General-purpose methods.
  name: General
  requests:
  - auth: irrelevant
    description: Set node URL.
    function: nodeUrl(url)
    params:
    - name: url
      type: string
  - auth: irrelevant
    description: Generic method for making node API requests.
    function: 'call(name, location, {params=null, method=''GET'', body=null, contentType=null,
      auth=true, schema, bodies=false, srcBodies=false})

      '
    out:
      description: the decoded response
      type: any
    params:
    - description: request name (for error messages)
      name: name
      type: string
    - description: request path
      name: location
      type: string
    - description: query parameters, mapping name to value, None values are skipped
      name: params
      optional: true
      type: Partial&lt;Record&lt;string, string | number | boolean | null>> | null
    - description: 'request method (one of <code>''GET''</code>, <code>''POST''</code>,
        <code>''PUT''</code>, <code>''DELETE''</code>)

        '
      name: method
      optional: true
      type: string
    - description: request body
      name: body
      optional: true
      type: Partial&lt;Record&lt;string, any>> | Partial&lt;Record&lt;string, any>>[]
        | Buffer | null
    - description: content-type of the request body, when read from a file
      name: contentType
      optional: true
      type: string | null
    - description: <code>true</code> to authenticate the request, <code>false</code>
        otherwise
      name: auth
      optional: true
      type: boolean
    - description: 'JSON schema name to validate the response, or <code>"blob"</code>
        if the result is <code>Buffer</code>

        '
      name: schema
      type: string
    - description: '<code>true</code> to decode <code>Body</code> structures in the
        response, <code>false</code> otherwise

        '
      name: bodies
      optional: true
      type: boolean
    - description: '<code>true</code> to encode <code>Body</code> structures in the
        request, <code>false</code> otherwise

        '
      name: srcBodies
      optional: true
      type: boolean
- description: Methods related to authentication.
  name: Authentication
  requests:
  - auth: irrelevant
    description: Set root secret for authentication.
    function: rootSecret(secret)
    params:
    - name: secret
      type: string
  - auth: irrelevant
    description: Set admin token for authentication.
    function: token(token)
    params:
    - name: token
      type: string
  - auth: irrelevant
    description: Set carte for authentication.
    function: carte(carte)
    params:
    - name: carte
      type: string
  - auth: irrelevant
    description: Set a source of cartes for authentication.
    function: carteSource(carteSource)
    params:
    - class: CarteSource
      name: carteSource
  - auth: irrelevant
    description: Select authentication method for the following requests.
    function: authMethod(authMethod)
    params:
    - class: NodeAuth
      name: authMethod
  - auth: irrelevant
    description: Switch off authentication for the following requests.
    function: noAuth()
  - auth: irrelevant
    description: Select carte authentication for the following requests.
    function: auth()
  - auth: irrelevant
    description: Select admin token authentication for the following requests.
    function: authAdmin()
  - auth: irrelevant
    description: Select root admin secret authentication for the following requests.
    function: authRootAdmin()
- description: Local registry of all activity in the form of reactions performed by
    the node.
  name: Activity Reactions
  requests:
  - auth: admin
    description: Get the list of all reactions performed by the node, filtered by
      some criteria.
    function: searchActivityReactions(filter)
    out:
      array: true
      struct: ActivityReactionInfo
    params:
    - name: filter
      struct: ActivityReactionFilter
- description: Local registry of historical search queries.
  name: Activity Search
  requests:
  - auth: admin
    description: 'Get a list of previously executed search queries, optionally filtered
      by the given <code>prefix</code> and limited by the given <code>limit</code>.
      The node may decide to return fewer queries than the given <code>limit</code>.
      The queries are always sorted by creation timestamp, descending.

      '
    errors:
    - code: limit.invalid
      description: <code>limit</code> parameter has an invalid value
    function: getSearchHistory(prefix=null, limit=null)
    out:
      array: true
      struct: SearchHistoryInfo
    params:
    - description: find queries with the specified prefix (case-insensitive)
      name: prefix
      optional: true
      type: string
    - description: maximum number of queries returned
      name: limit
      optional: true
      type: number
  - auth: admin
    description: Save a search query in the registry.
    function: saveToSearchHistory(historyText)
    out:
      struct: SearchHistoryInfo
    params:
    - name: historyText
      struct: SearchHistoryText
  - auth: admin
    description: Delete a search query from the registry.
    errors:
    - code: search-history.query.blank
      description: the query is empty
    function: deleteFromSearchHistory(query)
    out:
      struct: Result
    params:
    - description: the query to be deleted
      name: query
      type: string
- description: Sheriff's registry of all orders sent to any nodes.
  name: Activity Sheriff Orders
  requests:
  - description: 'Get a slice of the list of all orders sent by the sheriff, delimited
      by the <code>before</code> or <code>after</code> moment and the given <code>limit</code>.
      If neither <code>before</code> nor <code>after</code> are provided, the latest
      orders are returned. The node may decide to return fewer orders than the given
      <code>limit</code>. The orders are always sorted by moment, descending.

      '
    errors:
    - code: sheriff-orders.before-after-exclusive
      description: before and after parameters are mutually exclusive
    - code: limit.invalid
      description: <code>limit</code> parameter has an invalid value
    function: getRemoteSheriffOrdersSlice(after=null, before=null, limit=null)
    out:
      struct: SheriffOrdersSliceInfo
    params:
    - description: filter orders posted strongly after this moment
      name: after
      optional: true
      type: number
    - description: filter orders posted at or before this moment
      name: before
      optional: true
      type: number
    - description: maximum number of orders returned
      name: limit
      optional: true
      type: number
- description: Asynchronous operations pending or just finished on the node.
  name: Asynchronous Operations
  requests:
  - auth: admin
    description: 'Get the status of the asynchronous operation that performs verification
      of a remote posting signature.

      '
    errors:
    - code: async-operation.not-found
      description: async operation with the given ID is not found
    function: getRemotePostingVerificationStatus(id)
    out:
      struct: RemotePostingVerificationInfo
    params:
    - description: asynchronous operation ID
      name: id
      type: string
  - auth: admin
    description: 'Get the status of the asynchronous operation that performs verification
      of the signature of a reaction to a remote posting.

      '
    errors:
    - code: async-operation.not-found
      description: async operation with the given ID is not found
    function: getRemoteReactionVerificationStatus(id)
    out:
      struct: RemoteReactionVerificationInfo
    params:
    - description: asynchronous operation ID
      name: id
      type: string
- description: 'Avatars of the node''s owner. The list of avatars is ordered using
    ordinals that every avatar has. <br><br> Every avatar has a shape. It is stored
    and returned solely for client''s interpretation. The shape has no meaning for
    the node and does not affect the avatar image stored at the node.

    '
  name: Avatars
  requests:
  - description: Get the list of avatars in the ascending order of their ordinals.
    function: getAvatars()
    out:
      array: true
      struct: AvatarInfo
    params: []
  - auth: admin
    description: 'Create a new avatar from a public media file that exists on the
      node. A new public media file is created for the avatar. If the avatar''s ordinal
      is not provided in the input, the avatar is assigned an ordinal that is greater
      than ordinals of all existing avatars.

      '
    errors:
    - code: media.storage-error
      description: media file cannot be stored
    - code: avatar.media-unsupported
      description: the type of the source media file is not supported for avatars
    function: createAvatar(avatar)
    out:
      struct: AvatarInfo
    params:
    - name: avatar
      struct: AvatarAttributes
  - description: Get an individual avatar.
    errors:
    - code: avatar.not-found
      description: avatar is not found
    function: getAvatar(id)
    out:
      struct: AvatarInfo
    params:
    - description: avatar ID
      name: id
      type: string
  - auth: admin
    description: Delete an avatar.
    errors:
    - code: avatar.not-found
      description: avatar is not found
    function: deleteAvatar(id)
    out:
      struct: Result
    params:
    - description: avatar ID
      name: id
      type: string
  - auth: admin
    description: 'Reorder avatars. Every avatar mentioned in the input is assigned
      an ordinal in ascending order as they appear in the input. Ordinals of avatars
      not mentioned in the input are not touched.

      '
    errors:
    - code: avatar.not-found
      description: avatar is not found
    function: reorderAvatars(order)
    out:
      array: true
      struct: AvatarOrdinal
    params:
    - name: order
      struct: AvatarsOrdered
- description: It is possible to block creation of some types of stories in the instants
    feed.
  name: Blocked Instants
  requests:
  - auth: admin
    description: 'Blocks creation of instants of the given story type, related to
      the given entry, optionally unblocking at the given time in the future.

      '
    errors:
    - code: entry.not-found
      description: entry is not found
    function: blockInstant(instant)
    out:
      struct: BlockedInstantInfo
    params:
    - name: instant
      struct: BlockedInstantAttributes
  - auth: admin
    description: Get details about the given blocked instant.
    errors:
    - code: blocked-instant.not-found
      description: blocked instant is not found
    function: getBlockedInstant(id)
    out:
      struct: BlockedInstantInfo
    params:
    - description: ID of the blocked instant
      name: id
      type: string
  - auth: admin
    description: Unblock the given instant.
    errors:
    - code: blocked-instant.not-found
      description: blocked instant is not found
    function: unblockInstant(id)
    out:
      struct: Result
    params:
    - description: ID of the blocked instant
      name: id
      type: string
  - auth: admin
    description: Search blocked instants by the given criteria.
    function: searchBlockedInstants(filter)
    out:
      array: true
      struct: BlockedInstantInfo
    params:
    - name: filter
      struct: BlockedInstantFilter
- description: 'It is possible to block particular nodes from performing some operations
    on this node, even if they are otherwise permitted to do so. It is also possible
    to mark some nodes to be invisible (in discussions, for example), the client should
    fetch the list of invisible nodes to perform filtering on the client side.

    '
  name: Blocked Users
  requests:
  - auth: admin
    description: 'Blocks the given node from performing the given operations, in a
      particular posting or globally, optionally unblocking at the given time in the
      future.

      '
    errors:
    - code: entry.not-found
      description: entry is not found
    function: blockUser(user)
    out:
      struct: BlockedUserInfo
    params:
    - name: user
      struct: BlockedUserAttributes
  - auth: optional
    description: Get details about the given blocked user.
    errors:
    - code: blocked-user.not-found
      description: blocked user is not found
    function: getBlockedUser(id)
    out:
      struct: BlockedUserInfo
    params:
    - description: ID of the blocked user
      name: id
      type: string
  - auth: admin
    description: Unblock the given user.
    errors:
    - code: blocked-user.not-found
      description: blocked user is not found
    function: unblockUser(id)
    out:
      struct: Result
    params:
    - description: ID of the blocked user
      name: id
      type: string
  - auth: optional
    description: Search blocked users by the given criteria.
    function: searchBlockedUsers(filter)
    out:
      array: true
      struct: BlockedUserInfo
    params:
    - name: filter
      struct: BlockedUserFilter
  - auth: admin
    description: 'Get checksums of the information about the blocked users. This request
      may be used to quickly detect the changes in the blocked users list to update
      the cache on the client side.

      '
    function: getBlockedUsersChecksums()
    out:
      struct: BlockedUsersChecksums
    params: []
- description: 'The node receives notifications from nodes that blocked it. This information
    is stored on the node and can be requested.

    '
  name: Blocked-by Users
  requests:
  - auth: optional
    description: Get details about the given node that blocked this node.
    errors:
    - code: blocked-by-user.not-found
      description: blocked-by user is not found
    function: getBlockedByUser(id)
    out:
      struct: BlockedByUserInfo
    params:
    - description: ID of the blocked-by user
      name: id
      type: string
  - auth: optional
    description: Search nodes that blocked this node, by the given criteria.
    function: searchBlockedByUsers(filter)
    out:
      array: true
      struct: BlockedByUserInfo
    params:
    - name: filter
      struct: BlockedByUserFilter
- description: '<a href="authentication.html#carte">Cartes</a> - cryptographic tokens
    used to authenticate on any node.

    '
  name: Cartes
  requests:
  - auth: admin
    description: 'Create a set of cartes with the given attributes. Cartes in the
      sequence correspond to successive periods of time.

      '
    function: createCartes(attributes)
    out:
      struct: CarteSet
    params:
    - name: attributes
      struct: CarteAttributes
  - auth: admin
    description: 'Verify if the given carte may be used for authentication on this
      node. Additionally, if <code>clientName</code> is provided, it is compared to
      the carte owner''s name.

      '
    errors:
    - code: carte.wrong-client
      description: carte authenticates a different node name
    function: verifyCarte(clientCarte)
    out:
      struct: CarteVerificationInfo
    params:
    - name: clientCarte
      struct: ClientCarte
- description: Comments to a posting.
  name: Comments
  requests:
  - auth: optional
    description: 'Get a slice of the list of comments, delimited by <code>before</code>
      or <code>after</code> moments (but not both) and the given <code>limit</code>.
      If neither <code>before</code> nor <code>after</code> are provided, the latest
      comments are returned. The node may decide to return fewer comments than the
      given <code>limit</code>. The stories are always sorted by moment, ascending.

      '
    errors:
    - code: posting.not-found
      description: there is no posting with the given ID
    - code: comments.before-after-exclusive
      description: <code>before</code> and <code>after</code> parameters are not allowed
        together
    - code: limit.invalid
      description: <code>limit</code> parameter has an invalid value
    function: getCommentsSlice(postingId, after=null, before=null, limit=null)
    out:
      struct: CommentsSliceInfo
    params:
    - description: ID of the posting
      name: postingId
      type: string
    - description: filter comments posted strongly after this moment
      name: after
      optional: true
      type: number
    - description: filter comments posted at or before this moment
      name: before
      optional: true
      type: number
    - description: maximum number of comments returned
      name: limit
      optional: true
      type: number
  - auth: required or signature
    description: 'Create a comment from the given text and add it to the given posting.
      The comment owner must authenticate in some way. If the comment is not signed,
      it will be kept for a limited period of time and then erased. If authenticated
      as admin, the node signs the comment.

      '
    errors:
    - code: posting.not-found
      description: there is no posting with the given ID
    - code: posting.not-signed
      description: the posting is not signed, so it is impossible to add comments
        to it
    - code: avatar.not-found
      description: there is no avatar with the given ID
    - code: media.not-found
      description: there is no media with the given ID
    - code: media.not-compressed
      description: 'media attachment is not compressed as the node requires, the parameters
        of the desired compression are returned in <code><a href="#PostingFeatures">PostingFeatures</a></code>

        '
    function: createComment(postingId, comment)
    out:
      struct: CommentCreated
    params:
    - description: ID of the posting
      name: postingId
      type: string
    - name: comment
      struct: CommentText
  - auth: optional
    description: Get an individual comment.
    errors:
    - code: posting.not-found
      description: there is no posting with the given ID
    - code: comment.not-found
      description: there is no comment with the given ID
    - code: comment.wrong-posting
      description: the comment is not related to the given posting
    function: getComment(postingId, commentId, withSource=null)
    out:
      struct: CommentInfo
    params:
    - description: ID of the posting
      name: postingId
      type: string
    - description: ID of the comment
      name: commentId
      type: string
    - description: include source text of the comment
      name: withSource
      optional: true
      type: boolean
  - auth: optional
    description: 'Update operation overrides for all comments in the posting.

      '
    errors:
    - code: posting.not-found
      description: there is no posting with the given ID
    function: updateAllComments(postingId, attributes)
    out:
      struct: Result
    params:
    - description: ID of the posting
      name: postingId
      type: string
    - name: attributes
      struct: CommentMassAttributes
  - auth: required or signature
    description: 'Update the comment, creating a new revision of it. The text is processed
      just like in the <code>POST</code> request.

      '
    errors:
    - code: posting.not-found
      description: there is no posting with the given ID
    - code: comment.not-found
      description: there is no comment with the given ID
    - code: comment.wrong-posting
      description: the comment is not related to the given posting
    - code: avatar.not-found
      description: there is no avatar with the given ID
    - code: media.not-found
      description: there is no media with the given ID
    - code: media.not-compressed
      description: 'media attachment is not compressed as the node requires, the parameters
        of the desired compression are returned in <code><a href="#PostingFeatures">PostingFeatures</a></code>

        '
    function: updateComment(postingId, commentId, comment)
    out:
      struct: CommentInfo
    params:
    - description: ID of the posting
      name: postingId
      type: string
    - description: ID of the comment
      name: commentId
      type: string
    - name: comment
      struct: CommentText
  - auth: required
    description: 'Delete the comment. The comment may not be purged from the database
      immediately, but preserved for some period of time to give a chance to restore
      it.

      '
    errors:
    - code: posting.not-found
      description: there is no posting with the given ID
    - code: comment.not-found
      description: there is no comment with the given ID
    - code: comment.wrong-posting
      description: the comment is not related to the given posting
    function: deleteComment(postingId, commentId)
    out:
      struct: CommentTotalInfo
    params:
    - description: ID of the posting
      name: postingId
      type: string
    - description: ID of the comment
      name: commentId
      type: string
  - auth: optional
    description: Get all postings linked to media attached to the given comment.
    errors:
    - code: posting.not-found
      description: there is no posting with the given ID
    - code: comment.not-found
      description: there is no comment with the given ID
    - code: comment.wrong-posting
      description: the comment is not related to the given posting
    function: getPostingsAttachedToComment(postingId, commentId)
    out:
      array: true
      struct: PostingInfo
    params:
    - description: ID of the posting
      name: postingId
      type: string
    - description: ID of the comment
      name: commentId
      type: string
- description: All revisions of the comment.
  name: Comment Revisions
  requests:
  - auth: optional
    description: Get all revisions of the comment.
    errors:
    - code: comment.not-found
      description: there is no comment with the given ID
    - code: comment.wrong-posting
      description: the comment is not related to the given posting
    function: getCommentRevisions(postingId, commentId)
    out:
      array: true
      struct: CommentRevisionInfo
    params:
    - description: ID of the posting
      name: postingId
      type: string
    - description: ID of the comment
      name: commentId
      type: string
  - auth: optional
    description: Get an individual revision of the comment.
    errors:
    - code: comment.not-found
      description: there is no comment with the given ID
    - code: comment.wrong-posting
      description: the comment is not related to the given posting
    - code: comment-revision.not-found
      description: there is no revision with the given ID
    function: getCommentRevision(postingId, commentId, id)
    out:
      struct: CommentRevisionInfo
    params:
    - description: ID of the posting
      name: postingId
      type: string
    - description: ID of the comment
      name: commentId
      type: string
    - description: ID of the revision
      name: id
      type: string
- description: Reactions ("Likes") - simple textless answers to a comment.
  name: Comment Reactions
  requests:
  - auth: required or signature
    description: 'Add a reaction to the given comment. The reaction owner must authenticate
      in some way. Only one reaction is allowed from each owner to a particular comment.
      If a reaction from the same owner to this comment already exists, it is overwritten.
      If the reaction is not signed, the reaction will be kept for a limited period
      of time and then erased (the previous reaction of the same owner will be restored,
      if any).

      '
    errors:
    - code: comment.not-found
      description: there is no comment with the given ID
    - code: comment.wrong-posting
      description: the comment is not related to the given posting
    - code: comment.not-signed
      description: cannot add a reaction to an unsigned comment
    - code: reaction.not-accepted
      description: the reaction is not acceptable
    - code: avatar.not-found
      description: there is no avatar with the given ID
    function: createCommentReaction(postingId, commentId, reaction)
    out:
      struct: ReactionCreated
    params:
    - description: ID of the posting
      name: postingId
      type: string
    - description: ID of the comment
      name: commentId
      type: string
    - name: reaction
      struct: ReactionDescription
  - auth: optional
    description: 'Update the reaction''s operations or set operations'' overrides.

      '
    errors:
    - code: posting.not-found
      description: there is no posting with the given ID
    - code: comment.not-found
      description: there is no comment with the given ID
    - code: comment.wrong-posting
      description: the comment is not related to the given posting
    function: updateCommentReaction(postingId, commentId, ownerName, reaction)
    out:
      struct: ReactionInfo
    params:
    - description: ID of the posting
      name: postingId
      type: string
    - description: ID of the comment
      name: commentId
      type: string
    - description: reaction owner node name
      name: ownerName
      type: string
    - name: reaction
      struct: ReactionOverride
  - auth: optional
    description: 'Get a slice of the list of reactions to the given comment, optionally
      filtered by reaction type, delimited by <code>before</code> moment and the given
      <code>limit</code>. If <code>before</code> is not provided, the latest reactions
      are returned. The node may decide to return fewer reactions than the given <code>limit</code>.
      The reactions are always sorted by moment, descending.

      '
    errors:
    - code: comment.not-found
      description: there is no comment with the given ID
    - code: comment.wrong-posting
      description: the comment is not related to the given posting
    - code: limit.invalid
      description: <code>limit</code> parameter has an invalid value
    function: getCommentReactionsSlice(postingId, commentId, negative=null, emoji=null,
      before=null, limit=null)
    out:
      struct: ReactionsSliceInfo
    params:
    - description: ID of the posting
      name: postingId
      type: string
    - description: ID of the comment
      name: commentId
      type: string
    - description: <code>true</code>, to filter negative reactions, <code>false</code>,
        to filter positive ones
      name: negative
      optional: true
      type: boolean
    - description: filter by reaction code, usually interpreted by clients as emoji
        code point
      name: emoji
      optional: true
      type: number
    - description: filter reactions created at or before this moment
      name: before
      optional: true
      type: number
    - description: maximum number of reactions returned
      name: limit
      optional: true
      type: number
  - auth: optional
    description: 'Get the detailed information about the reaction of the given owner
      to the given comment. If no reaction with such an owner exists, an empty structure
      with just <code>commentId</code> is returned.

      '
    errors:
    - code: comment.not-found
      description: there is no comment with the given ID
    - code: comment.wrong-posting
      description: the comment is not related to the given posting
    function: getCommentReaction(postingId, commentId, ownerName)
    out:
      struct: ReactionInfo
    params:
    - description: ID of the posting
      name: postingId
      type: string
    - description: ID of the comment
      name: commentId
      type: string
    - description: reaction owner node name
      name: ownerName
      type: string
  - auth: admin
    description: Delete all reactions to the given comment.
    errors:
    - code: comment.not-found
      description: there is no comment with the given ID
    - code: comment.wrong-posting
      description: the comment is not related to the given posting
    function: deleteAllCommentReactions(postingId, commentId)
    out:
      struct: Result
    params:
    - description: ID of the posting
      name: postingId
      type: string
    - description: ID of the comment
      name: commentId
      type: string
  - auth: optional
    description: Delete the reaction of the given owner to the given comment.
    errors:
    - code: comment.not-found
      description: there is no comment with the given ID
    - code: comment.wrong-posting
      description: the comment is not related to the given posting
    function: deleteCommentReaction(postingId, commentId, ownerName)
    out:
      struct: ReactionTotalsInfo
    params:
    - description: ID of the posting
      name: postingId
      type: string
    - description: ID of the comment
      name: commentId
      type: string
    - description: reaction owner node name
      name: ownerName
      type: string
- description: Summary of reactions to a comment.
  name: Comment Reaction Totals
  requests:
  - auth: optional
    description: Get a summary of reactions to the comment given.
    errors:
    - code: comment.not-found
      description: there is no comment with the given ID
    - code: comment.wrong-posting
      description: the comment is not related to the given posting
    function: getCommentReactionTotals(postingId, commentId)
    out:
      struct: ReactionTotalsInfo
    params:
    - description: ID of the posting
      name: postingId
      type: string
    - description: ID of the comment
      name: commentId
      type: string
- description: Information about all nodes having a relationship with the node.
  name: Contacts
  requests:
  - auth: admin
    description: 'Search for contacts matching the search <code>query</code>. Every
      space-delimited word in the query must match case-insensitively a beginning
      of the contact''s node name or a beginning of any space-delimited word in the
      contact''s full name. The order of words is not significant. <br><br> The node
      may decide to return fewer contacts than the given <code>limit</code>. <br><br>
      The contacts are sorted by <i>social distance</i> from the node, which depends
      on their subscription and friendship status and the number of recent reactions
      and comments.

      '
    errors:
    - code: limit.invalid
      description: <code>limit</code> parameter has an invalid value
    function: getContacts(query=null, limit=null)
    out:
      array: true
      struct: ContactInfo
    params:
    - description: the search query
      name: query
      optional: true
      type: string
    - description: maximum number of contacts returned
      name: limit
      optional: true
      type: number
  - auth: admin
    description: Fetch the detailed information, including relationships, about the
      contacts matching the filter.
    function: fetchContacts(filter)
    out:
      array: true
      struct: ContactWithRelationships
    params:
    - name: filter
      struct: ContactFilter
- description: Credentials used to authenticate the administrator of the node.
  name: Credentials
  requests:
  - description: Check whether the credentials are initialized already.
    function: checkCredentials()
    out:
      struct: CredentialsCreated
    params: []
  - description: 'Initialize credentials if they are not set yet. Note that this operation
      can be executed without authentication, so this should be done as soon as possible
      after the node installation. Sign in is not allowed until the credentials are
      set.

      '
    errors:
    - code: credentials.already-created
      description: credentials are already created
    function: createCredentials(credentials)
    out:
      struct: Result
    params:
    - name: credentials
      struct: Credentials
  - description: 'Update credentials. Either old password or credentials reset token
      should be set in the input for the operation to succeed. Credentials reset token
      is not related to the authentication token and usually is sent to the user by
      E-mail.

      '
    errors:
    - code: credentials.login-incorrect
      description: login incorrect (the old password is wrong)
    - code: credentials.wrong-reset-token
      description: credentials reset token is wrong
    - code: credentials.reset-token-expired
      description: credentials reset token is expired
    function: updateCredentials(credentials)
    out:
      struct: Result
    params:
    - name: credentials
      struct: CredentialsChange
  - auth: root admin
    description: Delete credentials.
    function: deleteCredentials()
    out:
      struct: Result
    params: []
  - description: 'The node generates credentials reset token that is sent to the node
      admin by E-mail or using any other way that is defined for recovery of credentials.
      This token then may be used to change the credentials without knowing the password.

      '
    errors:
    - code: credentials.email-not-set
      description: E-mail address is not set for the node
    function: resetCredentials()
    out:
      struct: EmailHint
    params: []
- description: 'All deleted postings, that are not purged from the database yet.

    '
  name: Deleted Postings
  requests:
  - auth: admin
    description: 'Get the list of deleted postings, page by page. The node may decide
      to use a smaller page size than the given <code>limit</code>. The postings are
      always sorted by the deletion timestamp, descending.

      '
    errors:
    - code: page.invalid
      description: <code>page</code> parameter has an invalid value
    - code: limit.invalid
      description: <code>limit</code> parameter has an invalid value
    function: getDeletedPostings(page=null, limit=null)
    out:
      array: true
      struct: PostingInfo
    params:
    - description: page number, 0 by default
      name: page
      optional: true
      type: number
    - description: page size (maximum number of postings returned), the default is
        defined by the node
      name: limit
      optional: true
      type: number
  - auth: admin
    description: Get an individual deleted posting.
    errors:
    - code: posting.not-found
      description: there is no deleted posting with the given ID
    function: getDeletedPosting(id)
    out:
      struct: PostingInfo
    params:
    - description: ID of the posting
      name: id
      type: string
  - auth: admin
    description: 'Restore a posting. A new revision is created with the same content
      as in the latest revision.

      '
    errors:
    - code: posting.not-found
      description: there is no posting with the given ID
    function: restoreDeletedPosting(id)
    out:
      struct: PostingInfo
    params:
    - description: ID of the posting
      name: id
      type: string
- description: 'All revisions of the deleted posting.

    '
  name: Deleted Posting Revisions
  requests:
  - auth: optional
    description: 'Get all revisions of the deleted posting, but not more than <code>limit</code>.
      The node may decide to return fewer revisions than the given <code>limit</code>.

      '
    errors:
    - code: posting.not-found
      description: there is no posting with the given ID
    function: getDeletePostingRevisions(postingId, limit=null)
    out:
      array: true
      struct: PostingRevisionInfo
    params:
    - description: ID of the posting
      name: postingId
      type: string
    - description: maximum number of revisions returned
      name: limit
      optional: true
      type: number
  - auth: optional
    description: Get an individual revision of the deleted posting.
    errors:
    - code: posting.not-found
      description: there is no posting with the given ID
    - code: posting-revision.not-found
      description: there is no revision with the given ID
    function: getDeletedPostingRevision(postingId, id)
    out:
      struct: PostingRevisionInfo
    params:
    - description: ID of the posting
      name: postingId
      type: string
    - description: ID of the revision
      name: id
      type: string
  - auth: admin
    description: 'Restore a posting at a particular revision. A new revision is created
      with the same content as in the given revision.

      '
    errors:
    - code: posting.not-found
      description: there is no posting with the given ID
    - code: posting-revision.not-found
      description: there is no revision with the given ID
    - code: posting-revision.already-current
      description: the given revision is already the current one
    function: restoreDeletedPostingRevision(postingId, id)
    out:
      struct: PostingRevisionInfo
    params:
    - description: ID of the posting
      name: postingId
      type: string
    - description: ID of the revision
      name: id
      type: string
- description: 'One instance of Moera node software can serve several virtual nodes.
    These virtual nodes are called <i>domains</i> and distinguished by the hostname
    passed in the HTTP request. Each virtual node has <i>node ID</i>, it is used in
    the database to designate the data that belongs to a particular node. The hostname
    is mapped to the node ID when the request is processed, using the list of registered
    domains. If there is no domain with such a name, the special <code>_default_</code>
    domain is used.

    '
  name: Domains
  requests:
  - auth: root admin
    description: Get the list of registered domains.
    function: getDomains()
    out:
      array: true
      struct: DomainInfo
    params: []
  - auth: root admin or none
    description: 'Get information about the domain with the given hostname. If domain
      registration for this server is public, this request does not require authentication.

      '
    errors:
    - code: domain.not-found
      description: there is no domain with the given hostname
    function: getDomain(name)
    out:
      struct: DomainInfo
    params:
    - description: domain name
      name: name
      type: string
  - auth: root admin or none
    description: 'Create a new domain with the given hostname. If <code>nodeId</code>
      is not passed, it is generated automatically. If domain registration for this
      server is public, this request does not require authentication.

      '
    errors:
    - code: domain.name.blank
      description: the domain name is empty
    - code: domain.already-exists
      description: a domain with the given hostname already exists
    - code: domain.node-id-used
      description: a domain with the given node ID already exists
    function: createDomain(domain)
    out:
      struct: DomainInfo
    params:
    - name: domain
      struct: DomainAttributes
  - auth: root admin
    description: 'Update the domain with the given hostname. If the new hostname is
      not passed, the old hostname is preserved. (Note that you cannot pass a new
      name for the default hostname, because it cannot be renamed and <code>_default_</code>
      is not a valid hostname. Skip this field if you want to update the default hostname.)
      If <code>nodeId</code> is not passed, it is generated automatically.

      '
    errors:
    - code: domain.not-found
      description: there is no domain with the given hostname
    - code: domain.cannot-rename-default
      description: cannot change the name of the default domain
    function: updateDomain(name, domain)
    out:
      struct: DomainInfo
    params:
    - description: domain's hostname
      name: name
      type: string
    - name: domain
      struct: DomainAttributes
  - auth: root admin
    description: 'Delete the domain with the given hostname. This operation deletes
      the domain record only, the user''s data related to the domain is preserved.

      '
    errors:
    - code: domain.not-found
      description: there is no domain with the given hostname
    - code: domain.cannot-delete-default
      description: cannot delete the default domain
    function: deleteDomain(name)
    out:
      struct: Result
    params:
    - description: domain name
      name: name
      type: string
  - description: 'Get an available domain name recommended for the given node name.
      The domain name is usually chosen to be close to the node name in English transcription.
      If domain registration for this server is not public, this request is not accessible.

      '
    function: isDomainAvailable(nodeName)
    out:
      struct: DomainAvailable
    params:
    - description: node name
      name: nodeName
      type: string
- description: 'All drafts. This is an universal interface for managing all types
    for drafts to all types of entries. Drafts of entries located on remote nodes
    are all stored on the home node.

    '
  name: Drafts
  requests:
  - auth: admin
    description: 'Get the list of drafts, page by page, filtered by the given criteria.
      The node may decide to use a smaller page size than the given <code>limit</code>.
      The drafts are always sorted by the creation timestamp, descending.

      '
    errors:
    - code: page.invalid
      description: <code>page</code> parameter has an invalid value
    - code: limit.invalid
      description: <code>limit</code> parameter has an invalid value
    function: getDrafts(draftType, nodeName, postingId=null, commentId=null, page=null,
      limit=null)
    out:
      array: true
      struct: DraftInfo
    params:
    - description: type of the drafts
      enum: DraftType
      name: draftType
    - description: name of the node the drafts are related to
      name: nodeName
      type: string
    - description: ID of the posting, mandatory for all types, except <code>new-posting</code>
      name: postingId
      optional: true
      type: string
    - description: ID of the comment, mandatory for <code>comment-update</code> type
      name: commentId
      optional: true
      type: string
    - description: page number, 0 by default
      name: page
      optional: true
      type: number
    - description: page size (maximum number of postings returned), the default is
        defined by the node
      name: limit
      optional: true
      type: number
  - auth: admin
    description: Create a new draft from the text given.
    errors:
    - code: avatar.not-found
      description: there is no avatar with the given ID
    - code: media.not-found
      description: there is no media with the given ID
    function: createDraft(draft)
    out:
      struct: DraftInfo
    params:
    - name: draft
      struct: DraftText
  - auth: admin
    description: Get an individual draft.
    errors:
    - code: draft.not-found
      description: there is no draft with the given ID
    function: getDraft(id)
    out:
      struct: DraftInfo
    params:
    - description: ID of the draft
      name: id
      type: string
  - auth: admin
    description: Update the draft.
    errors:
    - code: draft.not-found
      description: there is no draft with the given ID
    - code: media.not-found
      description: there is no media with the given ID
    function: updateDraft(id, draft)
    out:
      struct: DraftInfo
    params:
    - description: ID of the draft
      name: id
      type: string
    - name: draft
      struct: DraftText
  - auth: admin
    description: 'Delete the draft.

      '
    errors:
    - code: draft.not-found
      description: there is no draft with the given ID
    function: deleteDraft(id)
    out:
      struct: Result
    params:
    - description: ID of the draft
      name: id
      type: string
- description: 'Information about features supported by the node.

    '
  name: Features
  requests:
  - auth: optional
    description: Get information about features supported by the node.
    function: getFeatures()
    out:
      struct: Features
    params: []
- description: "Feed is a set of stories collected for some purpose. The stories are\
    \ sorted by <a href=\"moment.html\">moment</a>, descending. </p><p> These are\
    \ the standard feeds that have special meaning: <ul>\n  <li><code>timeline</code>\
    \ - the main feed of publications;</li>\n  <li><code>instant</code> - the feed\
    \ of instant notifications;</li>\n  <li><code>news</code> - the main feed of publications\
    \ gathered from other nodes;</li>\n  <li><code>explore</code> - the feed of recommended\
    \ publications from around the network.</li>\n</ul>\n"
  name: Feeds
  requests:
  - auth: admin or none
    description: Get general information about all feeds accessible by client.
    function: getFeeds()
    out:
      array: true
      struct: FeedInfo
    params: []
  - auth: admin or none
    description: Get general information about the feed.
    errors:
    - code: feed.not-found
      description: there is no accessible feed with this name
    function: getFeedGeneral(feedName)
    out:
      struct: FeedInfo
    params:
    - description: name of the feed
      name: feedName
      type: string
  - auth: admin or none
    description: Get information about the total number and number of non-read and
      non-viewed stories in the feed.
    errors:
    - code: feed.not-found
      description: there is no accessible feed with this name
    function: getFeedStatus(feedName)
    out:
      struct: FeedStatus
    params:
    - description: name of the feed
      name: feedName
      type: string
  - auth: admin
    description: Update information about non-read and non-viewed stories in the feed.
    errors:
    - code: feed.not-found
      description: there is no accessible feed with this name
    function: updateFeedStatus(feedName, change)
    out:
      struct: FeedStatus
    params:
    - description: name of the feed
      name: feedName
      type: string
    - name: change
      struct: FeedStatusChange
  - auth: admin or none
    description: 'Get a slice of the feed, delimited by <code>before</code> or <code>after</code>
      moments (but not both) and the given <code>limit</code>. If neither <code>before</code>
      nor <code>after</code> are provided, the latest stories are returned. The node
      may decide to return fewer stories than the given <code>limit</code>. The stories
      are always sorted by moment, descending.

      '
    errors:
    - code: feed.not-found
      description: there is no accessible feed with this name
    - code: feed.before-after-exclusive
      description: <code>before</code> and <code>after</code> parameters are not allowed
        together
    - code: limit.invalid
      description: <code>limit</code> parameter has an invalid value
    function: getFeedSlice(feedName, after=null, before=null, limit=null)
    out:
      struct: FeedSliceInfo
    params:
    - description: name of the feed
      name: feedName
      type: string
    - description: filter stories posted strongly after this moment
      name: after
      optional: true
      type: number
    - description: filter stories posted at or before this moment
      name: before
      optional: true
      type: number
    - description: maximum number of stories returned
      name: limit
      optional: true
      type: number
  - auth: admin
    description: Delete all stories from the feed with optional filtering.
    errors:
    - code: feed.not-found
      description: there is no accessible feed with this name
    function: deleteFeedStories(feedName, type=null, receiver=null, recommended=null)
    out:
      struct: Result
    params:
    - description: name of the feed
      name: feedName
      type: string
    - description: delete only the stories of the given type
      enum: StoryType
      name: type
      optional: true
    - description: delete only the stories about postings located at the given node
      name: receiver
      optional: true
      type: string
    - description: delete only the stories about recommended postings
      name: recommended
      optional: true
      type: boolean
- description: 'A friend may be member of one or more groups of friends. Each group
    as an ID and title. The group with a title <code>t:friends</code> is a standard
    group "Friends" that is created automatically for every node.

    '
  name: Friend Groups
  requests:
  - auth: optional
    description: Get the list of all groups of friends that exist on the node.
    function: getFriendGroups()
    out:
      array: true
      struct: FriendGroupInfo
    params: []
  - auth: optional
    description: Get the information about the group of friends.
    errors:
    - code: friend-group.not-found
      description: the group of friends is not found
    function: getFriendGroup(id)
    out:
      struct: FriendGroupInfo
    params:
    - description: ID of the group of friends
      name: id
      type: string
  - auth: admin
    description: Create a group of friends.
    function: createFriendGroup(friendGroup)
    out:
      struct: FriendGroupInfo
    params:
    - name: friendGroup
      struct: FriendGroupDescription
  - auth: admin
    description: Update the details of the group of friends.
    errors:
    - code: friend-group.not-found
      description: the group of friends is not found
    function: updateFriendGroup(id, friendGroup)
    out:
      struct: FriendGroupInfo
    params:
    - description: ID of the group of friends
      name: id
      type: string
    - name: friendGroup
      struct: FriendGroupDescription
  - auth: admin
    description: Delete the group of friends.
    errors:
    - code: friend-group.not-found
      description: the group of friends is not found
    function: deleteFriendGroup(id)
    out:
      struct: Result
    params:
    - description: ID of the group of friends
      name: id
      type: string
- description: 'Friends are nodes that may have special permissions on this node.
    It is possible to write "friends only" posts or to enable commenting to friends
    or to a group of friends only etc.

    '
  name: Friends
  requests:
  - auth: optional
    description: Get the list of all friends of the node or friends belonging to a
      particular group.
    errors:
    - code: friend-group.not-found
      description: the group of friends is not found
    function: getFriends(groupId=null)
    out:
      array: true
      struct: FriendInfo
    params:
    - description: ID of a group of friends
      name: groupId
      optional: true
      type: string
  - auth: optional
    description: Get the friendship information for the node given.
    function: getFriend(name)
    out:
      struct: FriendInfo
    params:
    - description: name of the node
      name: name
      type: string
  - auth: admin
    description: 'Update the friendship status of the nodes passed in the input. If
      some node passed in the input is not a member of some of the groups of friends
      listed for it, the node is added to them. If it is a member of some groups of
      friends that are not listed for it, the node is removed from them.

      '
    function: updateFriends(friends)
    out:
      array: true
      struct: FriendInfo
    params:
    - array: true
      name: friends
      struct: FriendDescription
- description: 'The node receives notifications from nodes that added it to their
    friends. This information is stored on the node and can be requested.

    '
  name: Friend-ofs
  requests:
  - auth: optional
    description: Get the list of all nodes that added this node to their friends.
    function: getFriendOfs()
    out:
      array: true
      struct: FriendOfInfo
    params: []
  - auth: optional
    description: Get the information for the node given, whether it has added this
      node to its friends.
    function: getFriendOf(name)
    out:
      struct: FriendOfInfo
    params:
    - description: name of the node
      name: name
      type: string
- description: 'The node may grant administrative permissions (of a limited scope)
    on itself to other nodes.

    '
  name: Grants
  requests:
  - auth: admin
    description: Get the list of all nodes having administrative permissions on this
      node.
    function: getAllGrants()
    out:
      array: true
      struct: GrantInfo
    params: []
  - auth: admin
    description: Get information about the administrative permissions granted to the
      node.
    function: getGrant(nodeName)
    out:
      struct: GrantInfo
    params:
    - description: name of the node
      name: nodeName
      type: string
  - auth: admin
    description: Grant a set of administrative permissions to the node or revoke them.
    errors:
    - code: grant.name-not-registered
      description: node name is not registered yet
    function: grantOrRevoke(nodeName, change)
    out:
      struct: GrantInfo
    params:
    - description: name of the node
      name: nodeName
      type: string
    - name: change
      struct: GrantChange
  - auth: admin
    description: Revoke all administrative permissions granted to the node.
    function: revokeAll(nodeName)
    out:
      struct: Result
    params:
    - description: name of the node
      name: nodeName
      type: string
- description: 'Media files that are bound to a particular uploader and may be inaccessible
    to other clients. Private media files cannot be retrieved by their hash, only
    by their ID. The ID is unique to the client that uploaded the file and the node
    the file was uploaded to. A private media file may have a linked posting - it
    is used to store the media file description, reactions and comments. The linked
    posting is accessed as any other posting.

    '
  name: Media (private)
  requests:
  - auth: admin
    description: 'Upload a new media file owned by the node admin. The content of
      the file is passed in the request body.

      '
    errors:
    - code: media.image-invalid
      description: media file is not a readable image
    - code: media.wrong-size
      description: media file is too large
    - code: media.storage-error
      description: media file cannot be stored
    function: uploadAdminMedia(body, contentType)
    out:
      struct: PrivateMediaFileInfo
    params:
    - name: body
      type: Buffer
    - description: content-type of <code>body</code>
      name: contentType
      type: string
  - auth: required
    description: 'Upload a new media file owned by the given node. The content of
      the file is passed in the request body.

      '
    errors:
    - code: media.image-invalid
      description: media file is not a readable image
    - code: media.wrong-size
      description: media file is too large
    - code: media.storage-error
      description: media file cannot be stored
    function: uploadPrivateMedia(clientName, body, contentType)
    out:
      struct: PrivateMediaFileInfo
    params:
    - description: name of the node owning the media file
      name: clientName
      type: string
    - name: body
      type: Buffer
    - description: content-type of <code>body</code>
      name: contentType
      type: string
  - auth: optional
    description: 'Get media file content (returned in the response body).

      '
    errors:
    - code: media.not-found
      description: media file is not found
    function: getPrivateMedia(id, width=null, download=null)
    out:
      type: blob
    params:
    - description: media file ID
      name: id
      type: string
    - description: 'preferred width of the media in pixels; if present, the node will
        try to return the smallest in size, but the best in quality variant of the
        media, according to the width provided

        '
      name: width
      optional: true
      type: number
    - description: 'if <code>true</code>, the node will add <code>Content-Disposition:
        attachment</code> header to the output

        '
      name: download
      optional: true
      type: boolean
  - auth: optional
    description: 'Get media file details.

      '
    errors:
    - code: media.not-found
      description: media file is not found
    function: getPrivateMediaInfo(id)
    out:
      struct: PrivateMediaFileInfo
    params:
    - description: media file ID
      name: id
      type: string
  - auth: optional
    description: 'Get the list of all postings and comments the media file is attached
      to.

      '
    function: getPrivateMediaParentEntry(id)
    out:
      array: true
      struct: EntryInfo
    params:
    - description: media file ID
      name: id
      type: string
- description: 'Media files that should be accessible to any client. ID of a public
    media file is SHA-1 hash of its content.

    '
  name: Media (public)
  requests:
  - auth: required
    description: 'Upload a new media file. The content of the file is passed in the
      request body

      '
    errors:
    - code: media.image-invalid
      description: media file is not a readable image
    - code: media.wrong-size
      description: media file is too large
    - code: media.storage-error
      description: media file cannot be stored
    function: uploadPublicMedia(body, contentType)
    out:
      struct: PublicMediaFileInfo
    params:
    - name: body
      type: Buffer
    - description: content-type of <code>body</code>
      name: contentType
      type: string
  - description: 'Get media file content (returned in the response body).

      '
    errors:
    - code: media.not-found
      description: media file is not found
    function: getPublicMedia(id, width=null, download=null)
    out:
      type: blob
    params:
    - description: media file ID
      name: id
      type: string
    - description: 'preferred width of the media in pixels; if present, the node will
        try to return the smallest in size, but the best in quality variant of the
        media, according to the width provided

        '
      name: width
      optional: true
      type: number
    - description: 'if <code>true</code>, the node will add <code>Content-Disposition:
        attachment</code> header to the output

        '
      name: download
      optional: true
      type: boolean
  - description: 'Get media file details.

      '
    errors:
    - code: media.not-found
      description: media file is not found
    function: getPublicMediaInfo(id)
    out:
      struct: PublicMediaFileInfo
    params:
    - description: media file ID
      name: id
      type: string
- description: 'The name of the node. <a href="/overview/naming.html">Read more</a>
    about it in the Architecture Overview section. Operations with the node name are
    performed asynchronously - need to poll the node periodically to get the current
    status of the operation. Only one operation with the node name may be performed
    by the node at any moment.

    '
  name: Node Name
  requests:
  - auth: admin or none
    description: 'Get the name of the node. Admin user receives the current status
      of the latest operation with the node name.

      '
    function: getNodeName()
    out:
      struct: NodeNameInfo
    params: []
  - auth: admin
    description: 'Register a new name for the node. The corresponding signing key
      is generated automatically and stored at the node. The updating key is generated
      and returned in the encoded form and in the form of mnemonic (a sequence of
      English words). The words need to be written down and stored securely to be
      able to perform further operations with the name.

      '
    errors:
    - code: naming.operation-pending
      description: another operation with the node name is pending currently
    function: createNodeName(nameToRegister)
    out:
      struct: RegisteredNameSecret
    params:
    - name: nameToRegister
      struct: NameToRegister
  - auth: admin
    description: 'Update the name of the node. May be used to assign an already-registered
      name to the node (the corresponding signing key is generated automatically and
      stored at the node), or to prolong the name. The secret or mnemonic of the updating
      key must be provided for this operation.

      '
    errors:
    - code: naming.operation-pending
      description: another operation with the node name is pending currently
    - code: node-name.secret.empty
      description: the registered name secret or mnemonic are not provided
    - code: node-name.name-absent
      description: the node name is not provided and not known by the node
    - code: node-name.<naming server error>
      description: 'various errors returned by naming server (<a href="/development/naming-api.html#error-codes">see
        the list</a>)

        '
    function: updateNodeName(secret)
    out:
      struct: Result
    params:
    - name: secret
      struct: RegisteredNameSecret
  - auth: admin
    description: 'Delete all the information related to the node name (including the
      signing key) from the node. The name record on the naming server is not touched.

      '
    errors:
    - code: naming.operation-pending
      description: another operation with the node name is pending currently
    function: deleteNodeName()
    out:
      struct: Result
    params: []
  - auth: admin
    description: Get the updating key mnemonic stored on the node.
    errors:
    - code: not-found
      description: the mnemonic is not stored
    function: getStoredMnemonic()
    out:
      struct: KeyMnemonic
    params: []
  - auth: admin
    description: Store the updating key mnemonic on the node.
    function: storeMnemonic(mnemonic)
    out:
      struct: Result
    params:
    - name: mnemonic
      struct: KeyMnemonic
  - auth: admin
    description: Delete the updating key mnemonic stored on the node.
    function: deleteStoredMnemonic()
    out:
      struct: Result
    params: []
- description: Receiver of notifications from other nodes.
  name: Notifications
  requests:
  - auth: signature
    description: 'Accept a notification packet from another node. Notification packets
      older than 10 minutes are ignored. The sending node should update the packet
      timestamp and the signature and send the packet again. This mechanism prevents
      attackers from recording and resending old signed packets.

      '
    errors:
    - code: frozen
      description: 'not an error; the notification was accepted, but will not be processed
        immediately, because the node is frozen due to inactivity

        '
    - code: ask.too-many
      description: 'the node cannot accept so many <a href="notifications.html#ASKED">ASKED</a>
        notifications from the same node

        '
    - code: ask.too-often
      description: 'the node cannot accept so many <a href="notifications.html#ASKED">ASKED</a>
        notifications over a short period of time

        '
    function: sendNotification(packet)
    out:
      struct: Result
    params:
    - name: packet
      struct: NotificationPacket
- description: Information related to other nodes.
  name: People
  requests:
  - auth: optional
    description: Get general information about other nodes.
    function: getPeopleGeneral()
    out:
      struct: PeopleGeneralInfo
    params: []
- description: 'Plugins are web applications that integrate closely with the node
    or with the server as whole. Authenticating as root admin or node admin, they
    may perform operations, receive internal events, extend node API with new requests
    and add their own settings to the list of node settings. Every plugin registers
    its URL with the node, and the node uses this URL to call it when necessary.

    '
  name: Plugins
  requests:
  - auth: root admin or admin
    description: 'Register the plugin. If the plugin authenticates as root admin,
      the plugin is registered at the server level. If the plugin authenticates as
      node admin, the plugin is registered at the node level.

      '
    errors:
    - code: plugin.already-exists
      description: plugin with this name is already registered
    function: registerPlugin(plugin)
    out:
      struct: PluginInfo
    params:
    - name: plugin
      struct: PluginDescription
  - auth: optional
    description: Get information about all plugins registered for the node and server.
    function: getPlugins()
    out:
      array: true
      struct: PluginInfo
    params: []
  - auth: optional
    description: Get information about the plugin.
    errors:
    - code: plugin.unknown
      description: unknown plugin
    function: getPlugin(pluginName)
    out:
      struct: PluginInfo
    params:
    - description: name of the plugin
      name: pluginName
      type: string
  - auth: root admin or admin
    description: Unregister the plugin.
    errors:
    - code: plugin.unknown
      description: unknown plugin
    function: unregisterPlugin(pluginName)
    out:
      struct: Result
    params:
    - description: name of the plugin
      name: pluginName
      type: string
- description: 'All postings. Each posting may contain one or more revisions, a new
    revision is created every time the posting is updated. The latest revision is
    the current one, the previous ones are marked as deleted.

    '
  name: Postings
  requests:
  - auth: required or signature
    description: 'Create a new posting from the text given and publish it in the given
      feeds (if any). The heading and the preview of the posting are created automatically,
      if needed. The posting owner must authenticate in some way. If the posting is
      not signed, it will be kept for a limited period of time and then erased. If
      authenticated as admin, the node signs the posting.

      '
    errors:
    - code: avatar.not-found
      description: there is no avatar with the given ID
    - code: media.not-found
      description: there is no media with the given ID
    - code: media.not-compressed
      description: 'media attachment is not compressed as the node requires, the parameters
        of the desired compression are returned in <code><a href="#PostingFeatures">PostingFeatures</a></code>

        '
    function: createPosting(posting)
    out:
      struct: PostingInfo
    params:
    - name: posting
      struct: PostingText
  - auth: required or signature
    description: 'Update the posting, creating a new revision of it. The text is processed
      just like in the <code>POST</code> request.

      '
    errors:
    - code: posting.not-found
      description: there is no posting with the given ID
    - code: posting.not-original
      description: updating a non-original posting is not allowed
    - code: avatar.not-found
      description: there is no avatar with the given ID
    - code: media.not-found
      description: there is no media with the given ID
    - code: media.not-compressed
      description: 'media attachment is not compressed as the node requires, the parameters
        of the desired compression are returned in <code><a href="#PostingFeatures">PostingFeatures</a></code>

        '
    function: updatePosting(id, posting)
    out:
      struct: PostingInfo
    params:
    - description: ID of the posting
      name: id
      type: string
    - name: posting
      struct: PostingText
  - auth: optional
    description: Get an individual posting.
    errors:
    - code: posting.not-found
      description: there is no posting with the given ID
    function: getPosting(id, withSource=null)
    out:
      struct: PostingInfo
    params:
    - description: ID of the posting
      name: id
      type: string
    - description: include source text of the posting
      name: withSource
      optional: true
      type: boolean
  - auth: optional
    description: 'Delete the posting. The posting may not be purged from the database
      immediately, but preserved for some period of time to give a chance to restore
      it.

      '
    errors:
    - code: posting.not-found
      description: there is no posting with the given ID
    function: deletePosting(id)
    out:
      struct: Result
    params:
    - description: ID of the posting
      name: id
      type: string
  - auth: optional
    description: Get all postings linked to media attached to the given posting.
    errors:
    - code: posting.not-found
      description: there is no posting with the given ID
    function: getPostingsAttachedToPosting(id)
    out:
      array: true
      struct: PostingInfo
    params:
    - description: ID of the posting
      name: id
      type: string
- description: All revisions of the posting.
  name: Posting Revisions
  requests:
  - auth: optional
    description: 'Get all revisions of the posting, but not more than <code>limit</code>.
      The node may decide to return fewer revisions than the given <code>limit</code>.

      '
    errors:
    - code: posting.not-found
      description: there is no posting with the given ID
    function: getPostingRevisions(postingId, limit=null)
    out:
      array: true
      struct: PostingRevisionInfo
    params:
    - description: ID of the posting
      name: postingId
      type: string
    - description: maximum number of revisions returned
      name: limit
      optional: true
      type: number
  - auth: optional
    description: Get an individual revision of the posting.
    errors:
    - code: posting.not-found
      description: there is no posting with the given ID
    - code: posting-revision.not-found
      description: there is no revision with the given ID
    function: getPostingRevision(postingId, id)
    out:
      struct: PostingRevisionInfo
    params:
    - description: ID of the posting
      name: postingId
      type: string
    - description: ID of the revision
      name: id
      type: string
  - auth: admin
    description: 'Restore a revision of the posting. A new revision is created with
      the same content as in the given revision.

      '
    errors:
    - code: posting.not-found
      description: there is no posting with the given ID
    - code: posting-revision.not-found
      description: there is no revision with the given ID
    - code: posting-revision.already-current
      description: the given revision is already the current one
    function: restorePostingRevision(postingId, id)
    out:
      struct: PostingRevisionInfo
    params:
    - description: ID of the posting
      name: postingId
      type: string
    - description: ID of the revision
      name: id
      type: string
- description: Reactions ("Likes") - simple textless answers to a posting.
  name: Posting Reactions
  requests:
  - auth: required or signature
    description: 'Add a reaction to the given posting. The reaction owner must authenticate
      in some way. Only one reaction is allowed from each owner to a particular posting.
      If a reaction from the same owner to this posting already exists, it is overwritten.
      If the reaction is not signed, the reaction will be kept for a limited period
      of time and then erased (the previous reaction of the same owner will be restored,
      if any).

      '
    errors:
    - code: posting.not-found
      description: there is no posting with the given ID
    - code: posting.not-signed
      description: the posting is not signed, so it is impossible to add reactions
        to it
    - code: reaction.not-accepted
      description: the reaction is not acceptable
    - code: avatar.not-found
      description: there is no avatar with the given ID
    function: createPostingReaction(postingId, reaction)
    out:
      struct: ReactionCreated
    params:
    - description: ID of the posting
      name: postingId
      type: string
    - name: reaction
      struct: ReactionDescription
  - auth: optional
    description: 'Get a slice of the list of reactions to the given posting, optionally
      filtered by reaction type, delimited by <code>before</code> moment and the given
      <code>limit</code>. If <code>before</code> is not provided, the latest reactions
      are returned. The node may decide to return fewer reactions than the given <code>limit</code>.
      The reactions are always sorted by moment, descending.

      '
    errors:
    - code: posting.not-found
      description: there is no posting with the given ID
    - code: limit.invalid
      description: <code>limit</code> parameter has an invalid value
    function: getPostingReactionsSlice(postingId, negative=null, emoji=null, before=null,
      limit=null)
    out:
      struct: ReactionsSliceInfo
    params:
    - description: ID of the posting
      name: postingId
      type: string
    - description: <code>true</code>, to filter negative reactions, <code>false</code>,
        to filter positive ones
      name: negative
      optional: true
      type: boolean
    - description: filter by reaction code, usually interpreted by clients as emoji
        code point
      name: emoji
      optional: true
      type: number
    - description: filter reactions created at or before this moment
      name: before
      optional: true
      type: number
    - description: maximum number of reactions returned
      name: limit
      optional: true
      type: number
  - auth: optional
    description: 'Update the reaction''s operations or set operations'' overrides.

      '
    errors:
    - code: posting.not-found
      description: there is no posting with the given ID
    function: updatePostingReaction(postingId, ownerName, reaction)
    out:
      struct: ReactionInfo
    params:
    - description: ID of the posting
      name: postingId
      type: string
    - description: reaction owner node name
      name: ownerName
      type: string
    - name: reaction
      struct: ReactionOverride
  - auth: optional
    description: 'Get the detailed information about the reaction of the given owner
      to the given posting. If no reaction with such an owner exists, an empty structure
      with just <code>postingId</code> is returned.

      '
    errors:
    - code: posting.not-found
      description: there is no posting with the given ID
    function: getPostingReaction(postingId, ownerName)
    out:
      struct: ReactionInfo
    params:
    - description: ID of the posting
      name: postingId
      type: string
    - description: reaction owner node name
      name: ownerName
      type: string
  - auth: optional
    description: Delete all reactions to the given posting.
    errors:
    - code: posting.not-found
      description: there is no posting with the given ID
    function: deleteAllPostingReactions(postingId)
    out:
      struct: Result
    params:
    - description: ID of the posting
      name: postingId
      type: string
  - auth: optional
    description: Delete the reaction of the given owner to the given posting.
    errors:
    - code: posting.not-found
      description: there is no posting with the given ID
    function: deletePostingReaction(postingId, ownerName)
    out:
      struct: ReactionTotalsInfo
    params:
    - description: ID of the posting
      name: postingId
      type: string
    - description: reaction owner node name
      name: ownerName
      type: string
  - auth: optional
    description: 'Search reactions by criteria provided. Both reaction owner and at
      least one posting ID should be provided to search, otherwise an empty list is
      returned.

      '
    function: searchPostingReactions(filter)
    out:
      array: true
      struct: ReactionInfo
    params:
    - name: filter
      struct: ReactionsFilter
- description: Summary of reactions to a posting.
  name: Posting Reaction Totals
  requests:
  - auth: optional
    description: Get a summary of reactions to the posting given.
    errors:
    - code: posting.not-found
      description: there is no posting with the given ID
    function: getPostingReactionTotals(postingId)
    out:
      struct: ReactionTotalsInfo
    params:
    - description: ID of the posting
      name: postingId
      type: string
  - auth: optional
    description: 'Search summaries of reactions by criteria provided. At least one
      posting ID should be provided to search, otherwise an empty list is returned.

      '
    function: searchPostingReactionTotals(filter)
    out:
      array: true
      struct: ReactionTotalsInfo
    params:
    - name: filter
      struct: ReactionTotalsFilter
- description: The profile - the detailed information about the node's owner, node's
    purpose etc.
  name: Profile
  requests:
  - auth: optional
    description: Get the profile.
    function: getProfile(withSource=null)
    out:
      struct: ProfileInfo
    params:
    - description: include source text of the bio
      name: withSource
      optional: true
      type: boolean
  - auth: admin
    description: 'Update the profile. Fields that are not set in the request body
      are left intact. Fields that are set to an empty value are reset to their defaults.

      '
    errors:
    - code: avatar.not-found
      description: there is no avatar with the given ID
    function: updateProfile(profile)
    out:
      struct: ProfileInfo
    params:
    - name: profile
      struct: ProfileAttributes
- description: Communication with the provider (owner of the server).
  name: Provider
  requests:
  - auth: admin
    description: Get the current status of the request to delete the node.
    function: getDeleteNodeRequestStatus()
    out:
      struct: DeleteNodeStatus
    params: []
  - auth: admin
    description: Send a request to the provider to delete the node.
    errors:
    - code: delete-node.no-email
      description: e-mail is required to be set in the profile to communicate with
        the provider
    function: sendDeleteNodeRequest(deleteNodeText)
    out:
      struct: DeleteNodeStatus
    params:
    - name: deleteNodeText
      struct: DeleteNodeText
  - auth: admin
    description: Cancel the request to delete the node.
    function: cancelDeleteNodeRequest()
    out:
      struct: DeleteNodeStatus
    params: []
- description: Proxy, that may be used by web clients to workaround CORS restrictions
    of browsers
  name: Proxy
  requests:
  - auth: admin
    description: Open the URL passed in the parameters and pass to the client the
      media file returned by the server.
    errors:
    - code: proxy.request-failed
      description: HTTP request failed
    - code: proxy.resource-not-found
      description: resource is not found
    - code: proxy.resource-not-media
      description: resource is not a media file
    - code: proxy.error-status
      description: HTTP request returned an error status
    - code: proxy.url.invalid
      description: the URL is not valid
    function: proxyMedia(url)
    out:
      type: blob
    params:
    - name: url
      type: string
  - auth: admin
    description: 'Parse the page located at the URL and return the title, the description
      and the picture that may be used to build a preview of the page.

      '
    errors:
    - code: proxy.resource-not-found
      description: resource is not found
    function: proxyLinkPreview(url)
    out:
      struct: LinkPreviewInfo
    params:
    - name: url
      type: string
- description: 'SSE channels for delivering push notifications from the home node.
    When a client opens an SSE connection for the first time, an individual push notifications
    channel for this client is created (every client must generate a unique random
    identifier for its channel). After that, push notifications are stacked for this
    channel and the client should poll the channel periodically (or keep it open constantly)
    to receive them. If the client does not poll the channel for a long time, the
    channel is deleted.

    '
  name: Push Notifications
  requests: []
- description: 'Moera network uses dedicated Push Relay servers that accept push messages
    from nodes and route them to their clients. Read more in the <a href="../push-relay-api.html">Push
    Relay API</a> chapter.

    '
  name: Push Relay
  requests:
  - auth: admin
    description: 'Register a client at the push relay server to receive messages from
      this node. The operation is synchronous.

      '
    errors:
    - code: push-relay.error
      description: push relay service returned an error
    function: registerAtPushRelay(attributes)
    out:
      struct: Result
    params:
    - name: attributes
      struct: PushRelayClientAttributes
- description: 'Recommendations API is implemented by nodes providing recommendation
    services for other nodes in the network.

    '
  name: Recommendations
  requests:
  - auth: optional
    description: 'Find postings known to the recommendation service and may be of
      interest to the client. If the client is authenticated, the service may tune
      the recommendations for them. <br><br> The service may decide to return fewer
      recommendations than the given <code>limit</code>.

      '
    errors:
    - code: limit.invalid
      description: <code>limit</code> parameter has an invalid value
    - code: sheriff.not-found
      description: sheriff node is not registered
    function: getRecommendedPostings(feed=null, sheriff=null, limit=null)
    out:
      array: true
      struct: RecommendedPostingInfo
    params:
    - description: 'name of the feed to get recommendations for ("news" by default);
        recommendations for every feed are tracked separately

        '
      name: feed
      optional: true
      type: string
    - description: filter out entries prohibited by the given sheriff
      name: sheriff
      optional: true
      type: string
    - description: maximum number of recommendations returned
      name: limit
      optional: true
      type: number
  - auth: optional
    description: 'Find postings known to the recommendation service and may be of
      interest to the client to read them. If the client is authenticated, the service
      may tune the recommendations for them. <br><br> The service may decide to return
      fewer recommendations than the given <code>limit</code>.

      '
    errors:
    - code: limit.invalid
      description: <code>limit</code> parameter has an invalid value
    - code: sheriff.not-found
      description: sheriff node is not registered
    function: getRecommendedPostingsForReading(sheriff=null, limit=null)
    out:
      array: true
      struct: RecommendedPostingInfo
    params:
    - description: filter out entries prohibited by the given sheriff
      name: sheriff
      optional: true
      type: string
    - description: maximum number of recommendations returned
      name: limit
      optional: true
      type: number
  - auth: optional
    description: 'Find postings known to the recommendation service and may be of
      interest to the client to take part in the discussion. If the client is authenticated,
      the service may tune the recommendations for them. <br><br> The service may
      decide to return fewer recommendations than the given <code>limit</code>.

      '
    errors:
    - code: limit.invalid
      description: <code>limit</code> parameter has an invalid value
    - code: sheriff.not-found
      description: sheriff node is not registered
    function: getRecommendedPostingsForCommenting(sheriff=null, limit=null)
    out:
      array: true
      struct: RecommendedPostingInfo
    params:
    - description: filter out entries prohibited by the given sheriff
      name: sheriff
      optional: true
      type: string
    - description: maximum number of recommendations returned
      name: limit
      optional: true
      type: number
  - auth: required
    description: Inform the recommendation service that the recommended posting was
      accepted by the client.
    errors:
    - code: not-found
      description: the posting is not found
    function: acceptRecommendedPosting(nodeName, postingId, feed=null)
    out:
      struct: Result
    params:
    - description: name of the remote node
      name: nodeName
      type: string
    - description: ID of the posting on the remote node
      name: postingId
      type: string
    - description: 'name of the feed the recommendation is accepted to ("news" by
        default); recommendations for every feed are tracked separately

        '
      name: feed
      optional: true
      type: string
  - auth: required
    description: Inform the recommendation service that the recommended posting was
      rejected by the client.
    errors:
    - code: not-found
      description: the posting is not found
    function: rejectRecommendedPosting(nodeName, postingId, feed=null)
    out:
      struct: Result
    params:
    - description: name of the remote node
      name: nodeName
      type: string
    - description: ID of the posting on the remote node
      name: postingId
      type: string
    - description: 'name of the feed the recommendation is rejected for ("news" by
        default); recommendations for every feed are tracked separately

        '
      name: feed
      optional: true
      type: string
  - auth: required
    description: 'Ask the recommendation service to exclude all content from the given
      node from future recommendations.

      '
    errors:
    - code: not-found
      description: the node is not found
    function: excludeNodeFromRecommendations(nodeName)
    out:
      struct: Result
    params:
    - description: name of the remote node
      name: nodeName
      type: string
  - auth: required
    description: 'Allow the recommendation service to include the content from the
      given node to future recommendations.

      '
    errors:
    - code: not-found
      description: the node is not found
    function: allowNodeInRecommendations(nodeName)
    out:
      struct: Result
    params:
    - description: name of the remote node
      name: nodeName
      type: string
- description: 'The node may send requests to other nodes asking to subscribe to it,
    to add it to friends etc.

    '
  name: Remote Ask
  requests:
  - auth: admin
    description: Send a request to the remote node.
    function: askRemoteNode(nodeName, details)
    out:
      struct: Result
    params:
    - description: name of the remote node
      name: nodeName
      type: string
    - name: details
      struct: AskDescription
- description: Comments to postings located on other nodes.
  name: Remote Comments
  requests:
  - auth: admin
    description: Add a comment to the posting on the remote node and register it in
      the registry at the local node.
    function: createRemoteComment(nodeName, postingId, comment)
    out:
      struct: Result
    params:
    - description: name of the remote node
      name: nodeName
      type: string
    - description: ID of the posting on the remote node
      name: postingId
      type: string
    - name: comment
      struct: CommentSourceText
  - auth: admin
    description: Update a comment to the posting on the remote node.
    function: updateRemoteComment(nodeName, postingId, commentId, comment)
    out:
      struct: Result
    params:
    - description: name of the remote node
      name: nodeName
      type: string
    - description: ID of the posting on the remote node
      name: postingId
      type: string
    - description: ID of the comment on the remote node
      name: commentId
      type: string
    - name: comment
      struct: CommentSourceText
  - auth: admin
    description: Delete a comment from the registry of all comments at the local node.
    function: deleteRemoteComment(nodeName, postingId, commentId)
    out:
      struct: Result
    params:
    - description: name of the remote node
      name: nodeName
      type: string
    - description: ID of the posting on the remote node
      name: postingId
      type: string
    - description: ID of the comment on the remote node
      name: commentId
      type: string
  - auth: admin
    description: Verify the signature of the given comment to the posting on the remote
      node.
    function: verifyRemoteComment(nodeName, postingId, commentId)
    out:
      struct: AsyncOperationCreated
    params:
    - description: name of the remote node
      name: nodeName
      type: string
    - description: ID of the posting on the remote node
      name: postingId
      type: string
    - description: ID of the comment on the remote node
      name: commentId
      type: string
- description: Reactions to comments located on other nodes.
  name: Remote Comment Reactions
  requests:
  - auth: admin
    description: Add a reaction to the comment on the remote node and register it
      in the registry at the local node.
    function: createRemoteCommentReaction(nodeName, postingId, commentId, reaction)
    out:
      struct: Result
    params:
    - description: name of the remote node
      name: nodeName
      type: string
    - description: ID of the posting on the remote node
      name: postingId
      type: string
    - description: ID of the comment on the remote node
      name: commentId
      type: string
    - name: reaction
      struct: ReactionAttributes
  - auth: admin
    description: Delete a reaction from the registry of all reactions at the local
      node.
    function: deleteRemoteCommentReaction(nodeName, postingId, commentId)
    out:
      struct: Result
    params:
    - description: name of the remote node
      name: nodeName
      type: string
    - description: ID of the posting on the remote node
      name: postingId
      type: string
    - description: ID of the comment on the remote node
      name: commentId
      type: string
  - auth: admin
    description: Verify the signature of the reaction of the given owner to the comment
      on the remote node.
    function: verifyRemoteCommentReaction(nodeName, postingId, commentId, ownerName)
    out:
      struct: AsyncOperationCreated
    params:
    - description: name of the remote node
      name: nodeName
      type: string
    - description: ID of the posting on the remote node
      name: postingId
      type: string
    - description: ID of the comment on the remote node
      name: commentId
      type: string
    - description: reaction owner node name
      name: ownerName
      type: string
- description: Postings located on other nodes.
  name: Remote Postings
  requests:
  - auth: admin
    description: Add a posting to the remote node and register it in the registry
      at the local node.
    function: createRemotePosting(nodeName, posting)
    out:
      struct: Result
    params:
    - description: name of the remote node
      name: nodeName
      type: string
    - name: posting
      struct: PostingSourceText
  - auth: admin
    description: Update a posting on the remote node.
    function: updateRemotePosting(nodeName, postingId, posting)
    out:
      struct: Result
    params:
    - description: name of the remote node
      name: nodeName
      type: string
    - description: ID of the posting on the remote node
      name: postingId
      type: string
    - name: posting
      struct: PostingSourceText
  - auth: admin
    description: Delete a posting from the registry of all remote postings at the
      local node.
    function: deleteRemotePosting(nodeName, postingId)
    out:
      struct: Result
    params:
    - description: name of the remote node
      name: nodeName
      type: string
    - description: ID of the posting on the remote node
      name: postingId
      type: string
  - auth: admin
    description: Verify the signature of the given posting.
    function: verifyRemotePosting(nodeName, id)
    out:
      struct: AsyncOperationCreated
    params:
    - description: name of the remote node
      name: nodeName
      type: string
    - description: ID of the posting on the remote node
      name: id
      type: string
  - auth: admin
    description: Verify the signature of the given revision of a posting.
    function: verifyRemotePostingRevision(nodeName, id, revisionId)
    out:
      struct: AsyncOperationCreated
    params:
    - description: name of the remote node
      name: nodeName
      type: string
    - description: ID of the posting on the remote node
      name: id
      type: string
    - description: ID of the posting revision
      name: revisionId
      type: string
- description: Reactions to postings located on other nodes.
  name: Remote Posting Reactions
  requests:
  - auth: admin
    description: Add a reaction to the posting on the remote node and register it
      in the registry at the local node.
    function: createRemotePostingReaction(nodeName, postingId, reaction)
    out:
      struct: Result
    params:
    - description: name of the remote node
      name: nodeName
      type: string
    - description: ID of the posting on the remote node
      name: postingId
      type: string
    - name: reaction
      struct: ReactionAttributes
  - auth: admin
    description: Delete a reaction from the registry of all reactions at the local
      node.
    function: deleteRemotePostingReaction(nodeName, postingId)
    out:
      struct: Result
    params:
    - description: name of the remote node
      name: nodeName
      type: string
    - description: ID of the posting on the remote node
      name: postingId
      type: string
  - auth: admin
    description: Verify the signature of the reaction of the given owner to the posting
      on the remote node.
    function: verifyRemotePostingReaction(nodeName, postingId, ownerName)
    out:
      struct: AsyncOperationCreated
    params:
    - description: name of the remote node
      name: nodeName
      type: string
    - description: ID of the posting on the remote node
      name: postingId
      type: string
    - description: reaction owner node name
      name: ownerName
      type: string
- description: 'Sheriff API to send orders to remote nodes. Add orders are stored
    on the sheriff''s node and may be requested by anybody.

    '
  name: Remote Sheriff Orders
  requests:
  - auth: admin
    description: Sign and send the order to the remote node and store it in the registry
      at the local node.
    function: createRemoteSheriffOrder(nodeName, sheriffOrder)
    out:
      struct: Result
    params:
    - description: name of the remote node
      name: nodeName
      type: string
    - name: sheriffOrder
      struct: SheriffOrderAttributes
  - description: Get the details of the given sheriff's order
    errors:
    - code: sheriff-order.not-found
      description: sheriff's order is not found
    - code: sheriff-order.wrong-node
      description: the sheriff's order is related to a different node
    function: getRemoteSheriffOrder(nodeName, id)
    out:
      struct: SheriffOrderInfo
    params:
    - description: name of the remote node
      name: nodeName
      type: string
    - description: ID of the order
      name: id
      type: string
- description: 'Search API is implemented by nodes acting as search engines in the
    Moera network.

    '
  name: Search
  requests:
  - auth: optional
    description: 'Search for Moera nodes matching the search <code>query</code>. Every
      space-delimited word in the query must match case-insensitively a beginning
      of the node''s name or a beginning of any non-letter-delimited word in the node''s
      full name. The order of words is not significant. <br><br> The search engine
      may decide to return fewer nodes than the given <code>limit</code>. <br><br>
      The returned nodes are sorted by their relevance. The exact definition of this
      term is left to the search engine''s implementation.

      '
    errors:
    - code: sheriff.not-found
      description: sheriff node is not registered
    function: searchNodes(filter)
    out:
      struct: SearchNodePageInfo
    params:
    - name: filter
      struct: SearchNodeFilter
  - auth: optional
    description: 'Search for Moera nodes matching the search <code>query</code> and
      return a short list of "smart suggestions" for the user. Every space-delimited
      word in the query must match case-insensitively a beginning of the node''s name
      or a beginning of any non-letter-delimited word in the node''s full name. The
      order of words is not significant. <br><br> The search engine may decide to
      return fewer nodes than the given <code>limit</code>. <br><br> The returned
      nodes are sorted by their relevance. The exact definition of this term is left
      to the search engine''s implementation.

      '
    errors:
    - code: limit.invalid
      description: <code>limit</code> parameter has an invalid value
    - code: sheriff.not-found
      description: sheriff node is not registered
    function: searchNodeSuggestions(query=null, sheriff=null, limit=null)
    out:
      array: true
      struct: SearchNodeInfo
    params:
    - description: the search query
      name: query
      optional: true
      type: string
    - description: filter out entries prohibited by the given sheriff
      name: sheriff
      optional: true
      type: string
    - description: maximum number of nodes returned
      name: limit
      optional: true
      type: number
  - auth: optional
    description: 'Search for postings and comments containing the specified hashtag(s)
      and optionally filtered by other criteria. <br><br> The search engine may decide
      to return fewer nodes than the given <code>limit</code>. <br><br> The returned
      entries are sorted by moment in descending order.

      '
    errors:
    - code: search.before-after-exclusive
      description: before and after parameters are mutually exclusive
    - code: sheriff.not-found
      description: sheriff node is not registered
    function: searchEntriesByHashtag(filter)
    out:
      struct: SearchHashtagSliceInfo
    params:
    - name: filter
      struct: SearchHashtagFilter
  - auth: optional
    description: 'Search for postings and comments containing the specified words
      or text fragment, and optionally filtered by other criteria. <br><br> The search
      engine may decide to return fewer nodes than the given <code>limit</code>. <br><br>
      The returned entries are sorted by their relevance. The exact definition of
      this term is left to the search engine''s implementation.

      '
    errors:
    - code: sheriff.not-found
      description: sheriff node is not registered
    function: searchEntriesByText(filter)
    out:
      struct: SearchTextPageInfo
    params:
    - name: filter
      struct: SearchTextFilter
- description: 'Settings - the node and client settings. The node settings affect
    the node behavior. Only those settings are accepted that are known by the node,
    and their values are validated before saving. The node settings metadata can be
    obtained by request. The client settings are saved without validation and their
    metadata is built into the client. All client settings must have names starting
    with <code>client.</code> to distinguish them from the node ones. By convention,
    the client name is added to the prefix (<code>client.&lt;client name>.</code>)
    to be able to store settings of several different clients at the same time.

    '
  name: Settings
  requests:
  - auth: admin or root admin
    description: Update the given settings. If the input contains node settings, they
      are validated and the first validation error is returned, if any. The update
      is always performed as a whole - if there is an error saving any one of the
      settings in the input, none of them are updated. <br><br> If one of the settings
      to be updated is privileged, <i>root secret</i> authentication is required.
      If one of the settings to be updated is non-privileged, <i>admin</i> authentication
      is required.
    errors:
    - code: setting.deserialization-failed
      description: setting value deserialization failed
    - code: setting.cannot-convert
      description: cannot convert value to the setting type
    - code: setting.invalid-value
      description: invalid value for the setting
    - code: setting.internal
      description: cannot set value of an internal setting
    - code: setting.unknown
      description: unknown setting
    function: updateSettings(settings)
    out:
      struct: Result
    params:
    - array: true
      name: settings
      struct: SettingInfo
  - auth: admin
    description: Get all client settings, sorted by name.
    function: getClientSettings(prefix=null)
    out:
      array: true
      struct: SettingInfo
    params:
    - description: 'filter settings whose names start with the given prefix, case-sensitive
        (<code>client.</code> prefix must be included)

        '
      name: prefix
      optional: true
      type: string
  - auth: admin
    description: 'Get all node settings, sorted by name. If a setting has not changed
      its value from the default, it is omitted.

      '
    function: getNodeSettings(prefix=null)
    out:
      array: true
      struct: SettingInfo
    params:
    - description: filter settings whose names start with the given prefix, case-sensitive
      name: prefix
      optional: true
      type: string
  - auth: admin
    description: Get all node settings metadata, sorted by name.
    function: getNodeSettingsMetadata(prefix=null)
    out:
      array: true
      struct: SettingMetaInfo
    params:
    - description: filter settings whose names start with the given prefix, case-sensitive
      name: prefix
      optional: true
      type: string
  - auth: root admin
    description: Update node settings metadata, overriding built-in defaults.
    errors:
    - code: setting.deserialization-failed
      description: setting value deserialization failed
    - code: setting.cannot-convert
      description: cannot convert value to the setting type
    - code: setting.invalid-value
      description: invalid value for the setting
    - code: setting.internal
      description: cannot set value of an internal setting
    - code: setting.unknown
      description: unknown setting
    - code: setting.plugin
      description: plugin setting metadata cannot be modified
    function: updateNodeSettingsMetadata(metadata)
    out:
      struct: Result
    params:
    - array: true
      name: metadata
      struct: SettingMetaAttributes
- description: 'Similar complaints sent to the sheriff are grouped together and the
    sheriff makes decisions on a group as whole. <a href="/overview/supervision.html">Read
    more</a> about sheriff supervision in the Architecture Overview section.

    '
  name: Sheriff Complaint Groups
  requests:
  - description: 'Get a slice of the list of groups of complaints, optionally filtered
      by status, delimited by the <code>before</code> or <code>after</code> moment
      and the given <code>limit</code>. If neither <code>before</code> nor <code>after</code>
      are provided, the latest groups are returned. The node may decide to return
      fewer groups than the given <code>limit</code>. The groups are always sorted
      by moment, descending.

      '
    errors:
    - code: sheriff-complaint-groups.before-after-exclusive
      description: before and after parameters are mutually exclusive
    function: getSheriffComplaintGroupsSlice(after=null, before=null, limit=null,
      status=null)
    out:
      struct: SheriffComplaintGroupsSliceInfo
    params:
    - description: filter groups created strongly after this moment
      name: after
      optional: true
      type: number
    - description: filter groups created at or before this moment
      name: before
      optional: true
      type: number
    - description: maximum number of groups returned
      name: limit
      optional: true
      type: number
    - description: filter groups by status
      enum: SheriffComplaintStatus
      name: status
      optional: true
  - description: Get details of the given group of complaints.
    errors:
    - code: sheriff-complaint-group.not-found
      name: the group of complaints is not found
    function: getSheriffComplaintGroup(id)
    out:
      struct: SheriffComplaintGroupInfo
    params:
    - description: ID of the group of complaints
      name: id
      type: string
  - description: Get complaints included in the given group of complaints.
    errors:
    - code: sheriff-complaint-group.not-found
      name: the group of complaints is not found
    function: getSheriffComplaintsByGroup(id)
    out:
      array: true
      struct: SheriffComplaintInfo
    params:
    - description: ID of the group of complaints
      name: id
      type: string
  - auth: admin
    description: Make a decision on the given group of complaints.
    errors:
    - code: sheriff-complaint-group.not-found
      name: the group of complaints is not found
    function: updateSheriffComplaintGroup(id, decision)
    out:
      struct: SheriffComplaintGroupInfo
    params:
    - description: ID of the group of complaints
      name: id
      type: string
    - name: decision
      struct: SheriffComplaintDecisionText
- description: 'Complaints are sent to the sheriff via sheriff''s node. <a href="/overview/supervision.html">Read
    more</a> about sheriff supervision in the Architecture Overview section.

    '
  name: Sheriff Complaints
  requests:
  - auth: required
    description: Send a complaint to the sheriff.
    function: createSheriffComplaint(complaint)
    out:
      struct: SheriffComplaintInfo
    params:
    - name: complaint
      struct: SheriffComplaintText
- description: 'Orders sent by a sheriff to the node. The node must obey the orders
    if it accepted supervision by the sheriff. <a href="/overview/supervision.html">Read
    more</a> about sheriff supervision in the Architecture Overview section.

    '
  name: Sheriff Orders
  requests:
  - auth: signature
    description: Receive and execute the sheriff's order.
    errors:
    - code: sheriff-order.wrong-feed
      description: the posting is not included into the designated feed
    - code: sheriff-order.not-sheriff
      description: sheriff governance is not permitted for the feed
    - code: posting.not-found
      description: posting is not found
    - code: posting.not-signed
      description: posting is not signed
    - code: comment.not-found
      description: comment is not found
    - code: comment.wrong-posting
      description: comment is located under a different posting
    - code: avatar.not-found
      description: there is no avatar with the given ID
    function: createSheriffOrder(sheriffOrder)
    out:
      struct: Result
    params:
    - name: sheriffOrder
      struct: SheriffOrderDetails
- description: 'All stories. Each story describes something happening in Moera, stories
    are building blocks for feeds. All stories have the same structure, but the meaning
    of fields depends on the story type. A story may reference a posting, a remote
    object, etc. Some feeds may not allow some types of stories.

    '
  name: Stories
  requests:
  - auth: optional
    description: Get an individual story.
    errors:
    - code: story.not-found
      description: there is no story with the given ID
    function: getStory(id)
    out:
      struct: StoryInfo
    params:
    - description: ID of the story
      name: id
      type: string
  - auth: admin
    description: 'Update the story.

      '
    errors:
    - code: story.not-found
      description: there is no story with the given ID
    function: updateStory(id, story)
    out:
      struct: StoryInfo
    params:
    - description: ID of the story
      name: id
      type: string
    - name: story
      struct: StoryAttributes
  - auth: admin
    description: 'Delete the story.

      '
    errors:
    - code: story.not-found
      description: there is no story with the given ID
    function: deleteStory(id)
    out:
      struct: Result
    params:
    - description: ID of the story
      name: id
      type: string
- description: 'All nodes that have subscribed to notifications from this node.

    '
  name: Subscribers
  requests:
  - auth: optional
    description: Get the list of all subscribers, optionally filtered by some criteria.
    function: getSubscribers(nodeName=null, type=null, feedName=null, entryId=null)
    out:
      array: true
      struct: SubscriberInfo
    params:
    - description: filter by subscribed node name
      name: nodeName
      optional: true
      type: string
    - description: filter by subscription type
      enum: SubscriptionType
      name: type
      optional: true
    - description: filter by name of the feed subscribed to
      name: feedName
      optional: true
      type: string
    - description: filter by ID of the entry subscribed to
      name: entryId
      optional: true
      type: string
  - auth: required
    description: Subscribe to a particular group of notifications.
    errors:
    - code: feed.not-found
      description: there is no feed with the given name
    - code: posting.not-found
      description: there is no posting with the given ID
    - code: user-list.not-found
      description: there is no list of users with the given name
    - code: subscriber.too-many
      description: there are too many subscribers of this type
    function: createSubscriber(subscriber)
    out:
      struct: SubscriberInfo
    params:
    - name: subscriber
      struct: SubscriberDescription
  - auth: optional
    description: Get an individual subscriber.
    errors:
    - code: subscriber.not-found
      description: there is no subscriber with the given ID
    function: getSubscriber(id)
    out:
      struct: SubscriberInfo
    params:
    - description: ID of the subscriber
      name: id
      type: string
  - auth: required
    description: 'Update the subscriber''s operations or set operations'' overrides.

      '
    errors:
    - code: subscriber.not-found
      description: there is no subscriber with the given ID
    function: updateSubscriber(id, subscriber)
    out:
      struct: SubscriberInfo
    params:
    - description: ID of the subscriber
      name: id
      type: string
    - name: subscriber
      struct: SubscriberOverride
  - auth: optional
    description: Delete the subscriber and return the updated information about the
      node that was subscribed.
    errors:
    - code: subscriber.not-found
      description: there is no subscriber with the given ID
    function: deleteSubscriber(id)
    out:
      struct: ContactInfo
    params:
    - description: ID of the subscriber
      name: id
      type: string
- description: 'All nodes that send notifications to this node.

    '
  name: Subscriptions
  requests:
  - auth: optional
    description: Get the list of all subscriptions, optionally filtered by some criteria.
    function: getSubscriptions(nodeName=null, type=null)
    out:
      array: true
      struct: SubscriptionInfo
    params:
    - description: filter by node name
      name: nodeName
      optional: true
      type: string
    - description: filter by subscription type
      enum: SubscriptionType
      name: type
      optional: true
  - auth: admin
    description: Register a subscription to notifications from a particular node.
    errors:
    - code: subscription.already-exists
      description: an identical subscription already exists
    - code: feed.not-found
      description: there is no feed with the given name
    function: createSubscription(subscription)
    out:
      struct: SubscriptionInfo
    params:
    - name: subscription
      struct: SubscriptionDescription
  - auth: required
    description: 'Update the subscription''s operations or set operations'' overrides.

      '
    errors:
    - code: subscription.not-found
      description: there is no subscription with the given ID
    function: updateSubscription(id, subscription)
    out:
      struct: SubscriptionInfo
    params:
    - description: ID of the subscription
      name: id
      type: string
    - name: subscription
      struct: SubscriptionOverride
  - auth: admin
    description: Delete the subscription and return the updated information about
      the node that was subscribed to.
    errors:
    - code: subscription.not-found
      description: there is no subscription with the given parameters.
    function: deleteSubscription(id)
    out:
      struct: ContactInfo
    params:
    - description: ID of the subscription
      name: id
      type: string
  - auth: optional
    description: Search for subscriptions by the given criteria.
    errors:
    - code: subscription.filter.incomplete
      description: the filter should contain at least one feed or posting
    function: searchSubscriptions(filter)
    out:
      array: true
      struct: SubscriptionInfo
    params:
    - name: filter
      struct: SubscriptionFilter
- description: 'The authentication token. <a href="authentication.html">Read more</a>
    about token-based authentication.

    '
  name: Tokens
  requests:
  - auth: admin
    description: Get the list of all existing tokens.
    function: getTokens()
    out:
      array: true
      struct: TokenInfo
    params: []
  - description: Sign in and create a token.
    errors:
    - code: credentials.not-created
      description: credentials are not created yet
    - code: credentials.login-incorrect
      description: login or password is incorrect
    function: createToken(token)
    out:
      struct: TokenInfo
    params:
    - name: token
      struct: TokenAttributes
  - auth: admin
    description: Get information about the token.
    function: getTokenInfo(id)
    out:
      struct: TokenInfo
    params:
    - description: ID of the token
      name: id
      type: string
  - auth: admin
    description: 'Update the name or permissions of the token. It is not possible
      to grant token additional permissions with this request, but the granted permissions
      can be revoked.

      '
    function: updateToken(id, update)
    out:
      struct: TokenInfo
    params:
    - description: ID of the token
      name: id
      type: string
    - name: update
      struct: TokenUpdate
  - auth: admin
    description: Delete the token.
    function: deleteToken(id)
    out:
      struct: Result
    params:
    - description: ID of the token
      name: id
      type: string
- description: 'Any node may keep lists of users, and all other nodes can read these
    lists, search in them and subscribe to them to receive notifications about changes.
    The lists may be used, for example, to fight spam or to create decentralized communities.
    The sheriff uses such a list to inform all nodes that some specific user violates
    the rules too often, and because of that all his comments should be marked by
    the sheriff''s mark automatically.

    '
  name: User Lists
  requests:
  - description: Get the general information about the user list given.
    function: getUserListGeneral(name)
    out:
      struct: UserListInfo
    params:
    - description: the name of the list
      name: name
      type: string
  - description: 'Get a slice of the user list, delimited by the <code>before</code>
      or <code>after</code> moment and the given <code>limit</code>. If neither <code>before</code>
      nor <code>after</code> are provided, the latest items are returned. The node
      may decide to return fewer items than the given <code>limit</code>. The items
      are always sorted by moment, descending.

      '
    errors:
    - code: user-list-items.before-after-exclusive
      description: before and after parameters are mutually exclusive
    - code: limit.invalid
      description: <code>limit</code> parameter has an invalid value
    function: getUserListSlice(name, after=null, before=null, limit=null)
    out:
      struct: UserListSliceInfo
    params:
    - description: the name of the list
      name: name
      type: string
    - description: filter items created strongly after this moment
      name: after
      optional: true
      type: number
    - description: filter items created at or before this moment
      name: before
      optional: true
      type: number
    - description: maximum number of items returned
      name: limit
      optional: true
      type: number
  - description: Get the information from the user list about the node given.
    errors:
    - code: user-list-item.not-found
      description: user list item is not found
    function: getUserListItem(name, nodeName)
    out:
      struct: UserListItemInfo
    params:
    - description: the name of the list
      name: name
      type: string
    - description: the node name to get information about
      name: nodeName
      type: string
  - auth: admin
    description: Add a node to the user list.
    errors:
    - code: user-list-item.already-exists
      description: node is in the user list already
    function: createUserListItem(name, item)
    out:
      struct: UserListItemInfo
    params:
    - description: the name of the list
      name: name
      type: string
    - name: item
      struct: UserListItemAttributes
  - auth: admin
    description: Delete a node from the user list
    errors:
    - code: user-list-item.not-found
      description: user list item is not found
    function: deleteUserListItem(name, nodeName)
    out:
      struct: Result
    params:
    - description: the name of the list
      name: name
      type: string
    - description: the node name to delete
      name: nodeName
      type: string
- description: Brief information about the node.
  name: Who Am I
  requests:
  - description: Get brief information about the node.
    function: whoAmI()
    out:
      struct: WhoAmI
    params: []
operations:
- fields:
  - default: public
    description: view the comment
    name: view
  - default: owner
    description: edit the comment
    name: edit
  - default: private
    description: delete the comment
    name: delete
  - default: public
    description: view the comment's reactions
    name: viewReactions
  - default: public
    description: view the comment's negative reactions
    name: viewNegativeReactions
  - default: public
    description: view the number of the comment's reactions
    name: viewReactionTotals
  - default: public
    description: view the number of the comment's negative reactions
    name: viewNegativeReactionTotals
  - default: public
    description: view the relative number of different types of the comment's reactions
    name: viewReactionRatios
  - default: public
    description: view the relative number of different types of the comment's negative
      reactions
    name: viewNegativeReactionRatios
  - default: signed
    description: add a reaction to the comment
    name: addReaction
  - default: signed
    description: add a negative reaction to the comment
    name: addNegativeReaction
  - default: owner
    description: override the permissions of the comment's reactions
    name: overrideReaction
  name: CommentOperations
- fields:
  - default: public
    description: see the subscriber information
    name: viewFeedSubscriber
  - default: public
    description: see the subscription information
    name: viewFeedSubscription
  - default: public
    description: see the friend information
    name: viewFriend
  - default: public
    description: see the friend-of information (this operation can be modified by
      admin only)
    name: viewFriendOf
  - default: public
    description: see the blocking information (this operation can be modified by admin
      only)
    name: viewBlock
  - default: public
    description: see the blocked-by information (this operation can be modified by
      admin only)
    name: viewBlockBy
  name: ContactOperations
- fields:
  - default: null
    description: add stories to the feed
    name: add
  name: FeedOperations
- fields:
  - default: public
    description: view the membership of the node in the group of friends
    name: view
  name: FriendOperations
- fields:
  - default: public
    description: view the group of friends
    name: view
  name: FriendGroupOperations
- fields:
  - default: null
    description: any modification of the node name, prolonging it etc.
    name: manage
  name: NodeNameOperations
- fields:
  - default: public
    description: view the list of subscribers
    name: viewSubscribers
  - default: public
    description: view the list of subscriptions
    name: viewSubscriptions
  - default: public
    description: view the list of friends
    name: viewFriends
  - default: public
    description: view the list of those who added this node to friends
    name: viewFriendOfs
  - default: public
    description: view the list of blocked nodes
    name: viewBlocked
  - default: admin
    description: view the list of those who blocked this node
    name: viewBlockedBy
  - default: public
    description: view the number of subscribers
    name: viewSubscribersTotal
  - default: public
    description: view the number of subscriptions
    name: viewSubscriptionsTotal
  - default: public
    description: view the number of friends
    name: viewFriendsTotal
  - default: public
    description: view the number of those who added this node to friends
    name: viewFriendOfsTotal
  name: PeopleOperations
- fields:
  - default: public
    description: view the posting
    name: view
  - default: owner
    description: edit the posting
    name: edit
  - default: private
    description: delete the posting
    name: delete
  - default: public
    description: view the posting's comments
    name: viewComments
  - default: signed
    description: add a comment to the posting
    name: addComment
  - default: owner
    description: override the permissions of the posting's comments
    name: overrideComment
  - default: public
    description: view the posting's reactions
    name: viewReactions
  - default: public
    description: view the posting's negative reactions
    name: viewNegativeReactions
  - default: public
    description: view the number of the posting's reactions
    name: viewReactionTotals
  - default: public
    description: view the number of the posting's negative reactions
    name: viewNegativeReactionTotals
  - default: public
    description: view the relative number of different types of the posting's reactions
    name: viewReactionRatios
  - default: public
    description: view the relative number of different types of the posting's negative
      reactions
    name: viewNegativeReactionRatios
  - default: signed
    description: add a reaction to the posting
    name: addReaction
  - default: signed
    description: add a negative reaction to the posting
    name: addNegativeReaction
  - default: owner
    description: override the permissions of the posting's reactions
    name: overrideReaction
  - default: owner
    description: override the permissions of the posting's comment's reactions
    name: overrideCommentReaction
  name: PostingOperations
- fields:
  - default: public
    description: view the media file
    name: view
  name: PrivateMediaFileOperations
- fields:
  - default: admin
    description: change the profile
    name: edit
  - default: admin
    description: view the e-mail address in the profile
    name: viewEmail
  name: ProfileOperations
- fields:
  - default: public
    description: view the reaction
    name: view
  - default: private
    description: delete the reaction
    name: delete
  name: ReactionOperations
- fields:
  - default: public
    description: view the entry
    name: view
  name: SearchEntryOperations
- fields:
  - default: admin
    description: update the story
    name: edit
  - default: admin
    description: delete the story
    name: delete
  name: StoryOperations
- fields:
  - default: public
    description: see the subscriber
    name: view
  - default: private
    description: delete the subscriber (this operation cannot be modified or overridden)
    name: delete
  name: SubscriberOperations
- fields:
  - default: public
    description: see the subscription
    name: view
  - default: admin
    description: delete the subscription (this operation cannot be modified or overridden)
    name: delete
  name: SubscriptionOperations
structures:
- fields:
  - array: true
    description: include only reactions to remote postings from this list
    name: postings
    optional: true
    struct: RemotePosting
  name: ActivityReactionFilter
- fields:
  - description: name of the remote node
    name: remoteNodeName
    type: string
  - description: full name of the remote node
    name: remoteFullName
    optional: true
    type: string
  - description: avatar of the remote node
    name: remoteAvatar
    optional: true
    struct: AvatarImage
  - description: ID of the posting on the remote node
    name: remotePostingId
    type: string
  - description: <code>true</code>, if the reaction is negative, <code>false</code>,
      if positive
    name: negative
    type: boolean
  - description: reaction code, usually interpreted by clients as emoji code point
    name: emoji
    type: number
  - description: reaction creation timestamp - the real time when the reaction was
      created
    name: createdAt
    type: number
  name: ActivityReactionInfo
- fields:
  - constraints:
    - notnull:
        error: ask.subject.missing
    description: request subject
    enum: AskSubject
    name: subject
  - constraints:
    - length:
        error: ask.friend-group-id.wrong-size
        max: 40
    description: 'if the request is to add this node to friends, this field contains
      ID of the corresponding group of friends on the remote node

      '
    name: friendGroupId
    optional: true
    type: string
  - constraints:
    - length:
        error: ask.message.wrong-size
        max: 70
    description: message to the node admin
    name: message
    optional: true
    type: string
  name: AskDescription
- fields:
  - description: ID of the asynchronous operation that was created
    name: id
    type: string
  name: AsyncOperationCreated
- fields:
  - constraints:
    - notblank:
        error: avatar.media-id.blank
    description: ID of the public media file used as a source image
    name: mediaId
    type: string
  - constraints:
    - other:
        description: is out of the image bounds
        error: avatar.clip-x.out-of-range
    description: x coordinate of the top-left corner of the clipping square
    name: clipX
    type: number
  - constraints:
    - other:
        description: is out of the image bounds
        error: avatar.clip-y.out-of-range
    description: y coordinate of the top-left corner of the clipping square
    name: clipY
    type: number
  - constraints:
    - value:
        error: avatar.clip-size.out-of-range
        min: 100
    description: size of the clipping square
    name: clipSize
    type: number
  - constraints:
    - value:
        error: avatar.avatar-size.out-of-range
        min: 200
    description: size of the avatar to be created
    name: avatarSize
    type: number
  - description: rotation angle of the source image
    name: rotate
    type: number
  - description: shape of the avatar
    name: shape
    optional: true
    type: string
  - description: ordinal of the avatar
    name: ordinal
    optional: true
    type: number
  name: AvatarAttributes
- fields:
  - description: ID of the public media file used as an avatar image
    name: mediaId
    type: string
  - description: shape of the avatar
    name: shape
    type: string
  - description: 'if set to <code>true</code>, the node will ignore the absence of
      the media file referenced in <code>mediaId</code> field (empty avatar will be
      used in this case); if set to <code>false</code> or absent, the node will return
      an error, if the media file referenced in <code>mediaId</code> field is absent

      '
    name: optional
    optional: true
    type: boolean
  name: AvatarDescription
- fields:
  - description: ID of the media file
    name: mediaId
    type: string
  - description: 'virtual location of the media file, relative to the <code>/media</code>
      <a href="virtual-pages.html">virtual page</a>

      '
    name: path
    type: string
  - description: width of the media in pixels (<code>null</code>, if the media file
      is not an image/video)
    name: width
    optional: true
    type: number
  - description: height of the media in pixels (<code>null</code>, if the media file
      is not an image/video)
    name: height
    optional: true
    type: number
  - description: shape of the avatar
    name: shape
    optional: true
    type: string
  name: AvatarImage
- fields:
  - description: ID of the avatar
    name: id
    type: string
  - description: ID of the media file
    name: mediaId
    type: string
  - description: 'virtual location of the media file, relative to the <code>/media</code>
      <a href="virtual-pages.html">virtual page</a>

      '
    name: path
    type: string
  - description: width of the media in pixels (<code>null</code>, if the media file
      is not an image/video)
    name: width
    optional: true
    type: number
  - description: height of the media in pixels (<code>null</code>, if the media file
      is not an image/video)
    name: height
    optional: true
    type: number
  - description: shape of the avatar
    name: shape
    optional: true
    type: string
  - description: ordinal of the avatar
    name: ordinal
    type: number
  name: AvatarInfo
- fields:
  - description: ID of the avatar
    name: id
    type: string
  - description: ordinal of the avatar
    name: ordinal
    type: number
  name: AvatarOrdinal
- fields:
  - description: IDs of avatars
    name: ids
    type: string[]
  name: AvatarsOrdered
- fields:
  - array: true
    description: operations that are blocked
    enum: BlockedOperation
    name: blockedOperations
    optional: true
  - array: true
    description: the postings or whole nodes, where the node is blocked
    name: postings
    optional: true
    struct: RemotePostingOrNode
  - description: 'if set to <code>true</code>, only the blockings that strictly fit
      the criteria are returned; otherwise global blockings are returned even if the
      search is limited to a particular posting

      '
    name: strict
    optional: true
    type: boolean
  name: BlockedByUserFilter
- fields:
  - name: id
    type: string
  - description: operation that is blocked
    enum: BlockedOperation
    name: blockedOperation
  - description: information known about the blocking node
    name: contact
    optional: true
    struct: ContactInfo
  - description: name of the blocking node
    name: nodeName
    type: string
  - description: 'ID of the posting, where the node is blocked; <code>null</code>
      or absent, if the node is blocked globally

      '
    name: postingId
    optional: true
    type: string
  - description: blocking timestamp - the real time when the node was blocked
    name: createdAt
    type: number
  - description: 'unblocking timestamp - the real time when the node will be unblocked;
      <code>null</code> or absent, if the node is blocked permanently

      '
    name: deadline
    optional: true
    type: number
  - description: reason of blocking
    name: reason
    optional: true
    type: string
  name: BlockedByUserInfo
- fields:
  - constraints:
    - notnull:
        error: blocked-instant.story-type.missing
    description: type of the story
    enum: StoryType
    name: storyType
  - description: ID of the local entry the blocked story should be related to
    name: entryId
    optional: true
    type: string
  - description: node name of the remote posting the blocked story should be related
      to
    name: remoteNodeName
    optional: true
    type: string
  - description: ID of the remote posting the blocked story should be related to
    name: remotePostingId
    optional: true
    type: string
  - description: owner name of the remote object the blocked story should be related
      to
    name: remoteOwnerName
    optional: true
    type: string
  - description: 'unblocking timestamp - the real time when the story will be unblocked;
      <code>null</code> or absent, if the story is blocked permanently

      '
    name: deadline
    optional: true
    type: number
  name: BlockedInstantAttributes
- fields:
  - description: type of the story
    enum: StoryType
    name: storyType
  - description: ID of the local entry the blocked story should be related to
    name: entryId
    optional: true
    type: string
  - description: node name of the remote posting the blocked story should be related
      to
    name: remoteNodeName
    optional: true
    type: string
  - description: ID of the remote posting the blocked story should be related to
    name: remotePostingId
    optional: true
    type: string
  - description: owner name of the remote object the blocked story should be related
      to
    name: remoteOwnerName
    optional: true
    type: string
  name: BlockedInstantFilter
- fields:
  - name: id
    type: string
  - description: type of the story
    enum: StoryType
    name: storyType
  - description: ID of the local entry the blocked story should be related to
    name: entryId
    optional: true
    type: string
  - description: node name of the remote posting the blocked story should be related
      to
    name: remoteNodeName
    optional: true
    type: string
  - description: ID of the remote posting the blocked story should be related to
    name: remotePostingId
    optional: true
    type: string
  - description: owner name of the remote object the blocked story should be related
      to
    name: remoteOwnerName
    optional: true
    type: string
  - description: blocking timestamp - the real time when the story was blocked
    name: createdAt
    type: number
  - description: 'unblocking timestamp - the real time when the story will be unblocked;
      <code>null</code> or absent, if the story is blocked permanently

      '
    name: deadline
    optional: true
    type: number
  name: BlockedInstantInfo
- fields:
  - name: id
    type: string
  - description: type of the story
    enum: StoryType
    name: storyType
  - description: owner name of the remote object the blocked story should be related
      to
    name: remoteOwnerName
    optional: true
    type: string
  - description: 'unblocking timestamp - the real time when the story will be unblocked;
      <code>null</code> or absent, if the story is blocked permanently

      '
    name: deadline
    optional: true
    type: number
  name: BlockedPostingInstantInfo
- fields:
  - constraints:
    - notnull:
        error: blocked-user.blocked-operation.missing
    description: operation that is to be blocked
    enum: BlockedOperation
    name: blockedOperation
  - constraints:
    - notblank:
        error: blocked-user.node-name.blank
    description: name of the blocked node
    name: nodeName
    type: string
  - description: 'ID of the local entry, where the node is blocked; <code>null</code>
      or absent, if the node is blocked globally

      '
    name: entryId
    optional: true
    type: string
  - description: 'node name of the remote posting, where the node is blocked; <code>null</code>
      or absent, if the node is blocked globally

      '
    name: entryNodeName
    optional: true
    type: string
  - description: 'ID of the remote posting, where the node is blocked; <code>null</code>
      or absent, if the node is blocked globally

      '
    name: entryPostingId
    optional: true
    type: string
  - description: 'unblocking timestamp - the real time when the node will be unblocked;
      <code>null</code> or absent, if the node is blocked permanently

      '
    name: deadline
    optional: true
    type: number
  - constraints:
    - length:
        error: blocked-user.reason-src.wrong-size
        max: 4096
    description: source text of the reason of blocking
    name: reasonSrc
    optional: true
    type: string
  - description: 'format of the source text of the reason of blocking, the list of
      available formats is returned in <code><a href="#PostingFeatures">PostingFeatures</a></code>

      '
    enum: SourceFormat
    name: reasonSrcFormat
    optional: true
  name: BlockedUserAttributes
- fields:
  - array: true
    description: operations that are blocked
    enum: BlockedOperation
    name: blockedOperations
    optional: true
  - description: name of the blocked node
    name: nodeName
    optional: true
    type: string
  - description: 'ID of the local entry, where the node is blocked; <code>null</code>
      or absent, if the node is blocked globally

      '
    name: entryId
    optional: true
    type: string
  - description: 'node name of the remote posting, where the node is blocked; <code>null</code>
      or absent, if the node is blocked globally

      '
    name: entryNodeName
    optional: true
    type: string
  - description: 'ID of the remote posting, where the node is blocked; <code>null</code>
      or absent, if the node is blocked globally

      '
    name: entryPostingId
    optional: true
    type: string
  - description: 'if set to <code>true</code>, only the blockings that strictly fit
      the criteria are returned; otherwise global blockings are returned even if the
      search is limited to a particular posting

      '
    name: strict
    optional: true
    type: boolean
  name: BlockedUserFilter
- fields:
  - name: id
    type: string
  - description: operation that is blocked
    enum: BlockedOperation
    name: blockedOperation
  - description: name of the blocked node
    name: nodeName
    type: string
  - description: information known about the blocked node
    name: contact
    optional: true
    struct: ContactInfo
  - description: 'ID of the local entry, where the node is blocked; <code>null</code>
      or absent, if the node is blocked globally

      '
    name: entryId
    optional: true
    type: string
  - description: 'node name of the remote posting, where the node is blocked; <code>null</code>
      or absent, if the node is blocked globally

      '
    name: entryNodeName
    optional: true
    type: string
  - description: 'ID of the remote posting, where the node is blocked; <code>null</code>
      or absent, if the node is blocked globally

      '
    name: entryPostingId
    optional: true
    type: string
  - description: blocking timestamp - the real time when the node was blocked
    name: createdAt
    type: number
  - description: 'unblocking timestamp - the real time when the node will be unblocked;
      <code>null</code> or absent, if the node is blocked permanently

      '
    name: deadline
    optional: true
    type: number
  - description: source text of the reason of blocking
    name: reasonSrc
    optional: true
    type: string
  - description: 'format of the source text of the reason of blocking, the list of
      available formats is returned in <code><a href="#PostingFeatures">PostingFeatures</a></code>

      '
    enum: SourceFormat
    name: reasonSrcFormat
    optional: true
  - description: reason of blocking
    name: reason
    optional: true
    type: string
  name: BlockedUserInfo
- fields:
  - description: checksum of the list of users that are hidden
    name: visibility
    type: number
  name: BlockedUsersChecksums
- fields:
  - description: the subject (plain text)
    name: subject
    optional: true
    type: string
  - description: the text (HTML)
    name: text
    optional: true
    type: string
  - array: true
    description: link previews
    name: linkPreviews
    optional: true
    struct: LinkPreview
  name: Body
- fields:
  - array: true
    description: 'permissions to be granted to the carte; if not set, all permissions
      of the carte''s owner are granted

      '
    enum: Scope
    name: clientScope
    optional: true
  - array: true
    description: 'additional administrative permissions (of those granted to the carte''s
      owner by the target node) to be granted to the carte

      '
    enum: Scope
    name: adminScope
    optional: true
  - description: if set, the carte is valid for authentication on the specified node
      only
    name: nodeName
    optional: true
    type: string
  - description: maximum number of sequential cartes to be returned; the node may
      decide to return fewer cartes than the given limit
    name: limit
    optional: true
    type: number
  name: CarteAttributes
- fields:
  - name: carte
    type: string
  - description: timestamp of the beginning of the carte's life
    name: beginning
    type: number
  - description: timestamp of the end of the carte's life
    name: deadline
    type: number
  - description: if set, the carte is valid for authentication on the specified node
      only
    name: nodeName
    optional: true
    type: string
  - array: true
    description: the list of permissions granted to the carte
    enum: Scope
    name: clientScope
    optional: true
  - array: true
    description: 'the list of additional administrative permissions (of those granted
      to the carte''s owner by the target node) granted to the carte

      '
    enum: Scope
    name: adminScope
    optional: true
  name: CarteInfo
- fields:
  - description: the client IP address the cartes are bound to
    name: cartesIp
    optional: true
    type: string
  - array: true
    description: the cartes
    name: cartes
    struct: CarteInfo
  - description: cartes creation timestamp
    name: createdAt
    type: number
  name: CarteSet
- fields:
  - description: <code>true</code>, if the carte can be accepted for authentication,
      <code>false</code> otherwise
    name: valid
    type: boolean
  - description: name of the node the carte authenticates
    name: clientName
    optional: true
    type: string
  - array: true
    description: the list of permissions granted to the carte
    enum: Scope
    name: clientScope
    optional: true
  - array: true
    description: 'the list of additional administrative permissions (of those granted
      to the carte''s owner by the target node) granted to the carte

      '
    enum: Scope
    name: adminScope
    optional: true
  - description: error code
    name: errorCode
    optional: true
    type: string
  - description: human-readable error message
    name: errorMessage
    optional: true
    type: string
  name: CarteVerificationInfo
- fields:
  - description: the node name the client (carte owner) wants to authenticate under
    name: clientName
    optional: true
    type: string
  - constraints:
    - notblank:
        error: carte.carte.blank
    description: the carte to verify
    name: carte
    type: string
  name: ClientCarte
- fields:
  - description: <code>true</code>, if the reaction is negative, <code>false</code>,
      if positive
    name: negative
    type: boolean
  - description: reaction code, usually interpreted by clients as emoji code point
    name: emoji
    type: number
  - description: reaction creation timestamp - the real time when the reaction was
      created
    name: createdAt
    type: number
  - description: if present, the reaction will be erased at this time
    name: deadline
    optional: true
    type: number
  name: ClientReactionInfo
- fields:
  - description: details of the comment created
    name: comment
    struct: CommentInfo
  - description: total number of comments in the posting after the creation
    name: total
    type: number
  name: CommentCreated
- fields:
  - name: id
    type: string
  - description: node name of the comment's owner
    name: ownerName
    type: string
  - description: full name of the comment's owner
    name: ownerFullName
    optional: true
    type: string
  - description: gender of the comment's owner
    name: ownerGender
    optional: true
    type: string
  - description: avatar of the comment's owner
    name: ownerAvatar
    optional: true
    struct: AvatarImage
  - description: ID of the parent posting of the comment
    name: postingId
    type: string
  - description: ID of the revision of parent posting that was current when the comment
      was created
    name: postingRevisionId
    type: string
  - description: ID of the current revision of the comment
    name: revisionId
    type: string
  - description: total number of revisions the comment has
    name: totalRevisions
    type: number
  - description: preview of the comment's body, a string representation of a JSON
      structure
    name: bodyPreview
    optional: true
    struct: Body
  - description: 'the source text of the comment, a string representation of a JSON
      structure, may be absent if not requested

      '
    name: bodySrc
    optional: true
    struct: Body
  - description: hash of the source text of the comment
    name: bodySrcHash
    type: string
  - description: 'format of the source text of the comment, the list of available
      formats is returned in <code><a href="#PostingFeatures">PostingFeatures</a></code>

      '
    enum: SourceFormat
    name: bodySrcFormat
    optional: true
  - description: body of the comment, a string representation of a JSON structure
    name: body
    struct: Body
  - description: format of the body of the comment, may have any value meaningful
      for the client
    enum: BodyFormat
    name: bodyFormat
    optional: true
  - array: true
    description: list of the media attached to the comment
    name: media
    optional: true
    struct: MediaAttachment
  - description: heading of the comment
    name: heading
    type: string
  - description: 'in addition to <code>heading</code>, gives a more detailed description
      of the comment that can be used for search engines and link previews

      '
    name: description
    optional: true
    type: string
  - description: information about the comment this comment is replying to
    name: repliedTo
    optional: true
    struct: RepliedTo
  - name: moment
    type: number
  - description: comment creation timestamp - the real time when the comment was created
    name: createdAt
    type: number
  - description: comment editing timestamp - the last time the comment was updated
    name: editedAt
    optional: true
    type: number
  - description: comment deletion timestamp - the time when the comment was deleted
    name: deletedAt
    optional: true
    type: number
  - description: creation timestamp of the current revision of the comment
    name: revisionCreatedAt
    type: number
  - description: comment purging timestamp - the time when the deleted comment will
      be purged from the database
    name: deadline
    optional: true
    type: number
  - description: 'cryptographic digest of the comment (use <code><a href="fingerprints.html#Comment">Comment</a></code>
      fingerprint)

      '
    name: digest
    optional: true
    type: string
  - description: 'the comment''s owner signature (use <code><a href="fingerprints.html#Comment">Comment</a></code>
      fingerprint)

      '
    name: signature
    optional: true
    type: string
  - description: signature version (i.e. fingerprint version)
    name: signatureVersion
    optional: true
    type: number
  - description: the supported operations and the corresponding principals
    name: operations
    optional: true
    struct: CommentOperations
  - description: the operations and the corresponding principals that are overridden
      in reactions to the comment
    name: reactionOperations
    optional: true
    struct: ReactionOperations
  - description: the supported operations and the corresponding principals as defined
      by the comment's owner
    name: ownerOperations
    optional: true
    struct: CommentOperations
  - description: 'the operations and the corresponding principals that are overridden
      by the posting''s owner ("senior")

      '
    name: seniorOperations
    optional: true
    struct: CommentOperations
  - array: true
    description: operations on the comment that are blocked for the client
    enum: BlockedEntryOperation
    name: blockedOperations
    optional: true
  - array: true
    description: list of sheriff marks on the comment
    name: sheriffMarks
    optional: true
    struct: SheriffMark
  - description: types of reactions that the comment rejects
    name: rejectedReactions
    optional: true
    struct: RejectedReactions
  - description: types of reactions that the comment rejects, as defined by the comments'
      owner
    name: ownerRejectedReactions
    optional: true
    struct: RejectedReactions
  - description: types of reactions that the comment rejects, as defined by the posting's
      owner ("senior")
    name: seniorRejectedReactions
    optional: true
    struct: RejectedReactions
  - description: details of the existing reaction (if any) of the client's owner
    name: clientReaction
    optional: true
    struct: ClientReactionInfo
  - description: details of the existing reaction (if any) of the posting's owner
      ("senior") to the comment
    name: seniorReaction
    optional: true
    struct: ClientReactionInfo
  - description: summary of reactions to the comment
    name: reactions
    optional: true
    struct: ReactionTotalsInfo
  java-interfaces:
  - MediaInfo
  name: CommentInfo
- fields:
  - constraints:
    - other:
        description: contain an incorrect principal
        error: comment.senior-operations.wrong-principal
    description: 'the operations and the corresponding principals that are overridden
      by the comment''s owner ("senior")

      '
    name: seniorOperations
    optional: true
    struct: CommentOperations
  - description: types of reactions that the comment rejects, as defined by the posting's
      owner ("senior")
    name: seniorRejectedReactions
    optional: true
    struct: RejectedReactions
  name: CommentMassAttributes
- fields:
  - name: id
    type: string
  - description: ID of the posting revision that was actual at the moment of creation
      of this comment revision
    name: postingRevisionId
    type: string
  - description: preview of the revision's body, a string representation of a JSON
      structure
    name: bodyPreview
    optional: true
    struct: Body
  - description: hash of the source text of the revision
    name: bodySrcHash
    type: string
  - description: 'format of the source text of the revision, the list of available
      formats is returned in <code><a href="#PostingFeatures">PostingFeatures</a></code>

      '
    enum: SourceFormat
    name: bodySrcFormat
    optional: true
  - description: body of the revision, a string representation of a JSON structure
    name: body
    struct: Body
  - description: format of the body of the revision, may have any value meaningful
      for the client
    enum: BodyFormat
    name: bodyFormat
    optional: true
  - description: heading of the revision
    name: heading
    type: string
  - description: 'in addition to <code>heading</code>, gives a more detailed description
      of the revision that can be used for search engines and link previews

      '
    name: description
    optional: true
    type: string
  - description: revision creation timestamp - the real time when the revision was
      created
    name: createdAt
    type: number
  - description: revision deletion timestamp - the time when the revision was deleted
    name: deletedAt
    optional: true
    type: number
  - description: 'revision deletion timestamp - the time when the revision will be
      deleted and the previous revision will take its place

      '
    name: deadline
    optional: true
    type: number
  - description: 'cryptographic digest of the revision (use <code><a href="fingerprints.html#Comment">Comment</a></code>
      fingerprint)

      '
    name: digest
    optional: true
    type: string
  - description: 'the comment''s owner signature (use <code><a href="fingerprints.html#Comment">Comment</a></code>
      fingerprint)

      '
    name: signature
    optional: true
    type: string
  - description: signature version (i.e. fingerprint version)
    name: signatureVersion
    optional: true
    type: number
  - description: details of the existing reaction (if any) of the client's owner
    name: clientReaction
    optional: true
    struct: ClientReactionInfo
  - description: summary of reactions to the revision
    name: reactions
    optional: true
    struct: ReactionTotalsInfo
  name: CommentRevisionInfo
- fields:
  - description: the slice contains all comments before this moment, inclusive. May
      be the far future.
    name: before
    type: number
  - description: the slice contains all comments after this moment, exclusive. May
      be the far past.
    name: after
    type: number
  - array: true
    description: the comments
    name: comments
    struct: CommentInfo
  - description: total number of comments
    name: total
    type: number
  - description: number of comments before this slice till the far past
    name: totalInPast
    type: number
  - description: number of comments after this slice till the far future
    name: totalInFuture
    type: number
  name: CommentsSliceInfo
- fields:
  - description: avatar of the comment's owner
    name: ownerAvatar
    optional: true
    struct: AvatarDescription
  - constraints:
    - notnull:
        error: comment.body-src.blank
    - length:
        error: comment.body-src.wrong-size
        max: 65535
    description: the source text of the comment, a string representation of a JSON
      structure
    name: bodySrc
    optional: true
    struct: Body
  - description: 'format of the source text of the comment, <code>plain-text</code>
      by default; the list of available formats is returned in <code><a href="#PostingFeatures">PostingFeatures</a></code>

      '
    enum: SourceFormat
    name: bodySrcFormat
    optional: true
  - array: true
    description: array of IDs and digests of private media to be attached to the comment
    name: media
    optional: true
    struct: MediaWithDigest
  - description: types of reactions that the comment rejects
    name: rejectedReactions
    optional: true
    struct: RejectedReactions
  - description: 'types of reactions that the comment rejects, as defined by the posting''s
      owner ("senior"); only the senior may set this

      '
    name: seniorRejectedReactions
    optional: true
    struct: RejectedReactions
  - description: ID of the comment this comment is replying to
    name: repliedToId
    optional: true
    type: string
  - constraints:
    - other:
        description: contain an incorrect principal
        error: comment.operations.wrong-principal
    description: the operations and the corresponding principals
    name: operations
    optional: true
    struct: CommentOperations
  - constraints:
    - other:
        description: contain an incorrect principal
        error: comment.reaction-operations.wrong-principal
    description: the operations and the corresponding principals that are overridden
      in reactions to the comment
    name: reactionOperations
    optional: true
    struct: ReactionOperations
  - constraints:
    - other:
        description: contain an incorrect principal
        error: comment.senior-operations.wrong-principal
    description: 'the operations and the corresponding principals that are overridden
      by the posting''s owner ("senior"); only the senior may set this

      '
    name: seniorOperations
    optional: true
    struct: CommentOperations
  name: CommentSourceText
- fields:
  - constraints:
    - length:
        error: comment.owner-name.wrong-size
        max: 63
    description: node name of the comment's owner
    name: ownerName
    optional: true
    type: string
  - constraints:
    - length:
        error: comment.owner-full-name.wrong-size
        max: 96
    description: full name of the comment's owner
    name: ownerFullName
    optional: true
    type: string
  - constraints:
    - length:
        error: comment.owner-gender.wrong-size
        max: 31
    description: gender of the comment's owner
    name: ownerGender
    optional: true
    type: string
  - description: avatar of the comment's owner
    name: ownerAvatar
    optional: true
    struct: AvatarDescription
  - description: preview of the comment's body, a string representation of a JSON
      structure
    name: bodyPreview
    optional: true
    struct: Body
  - constraints:
    - other:
        description: is empty
        error: comment.body-src.blank
    - other:
        description: is too long
        error: comment.body-src.wrong-size
    description: the source text of the comment, a string representation of a JSON
      structure
    name: bodySrc
    optional: true
    struct: Body
  - description: 'format of the source text of the comment, <code>plain-text</code>
      by default; the list of available formats is returned in <code><a href="#PostingFeatures">PostingFeatures</a></code>

      '
    enum: SourceFormat
    name: bodySrcFormat
    optional: true
  - constraints:
    - other:
        description: is empty
        error: comment.body.blank
    - other:
        description: is too long
        error: comment.body.wrong-size
    description: body of the comment, a string representation of a JSON structure
    name: body
    optional: true
    struct: Body
  - constraints:
    - other:
        description: is missing
        error: comment.body-format.missing
    description: format of the body of the comment, may have any value meaningful
      for the client
    enum: BodyFormat
    name: bodyFormat
    optional: true
  - description: array of IDs of private media to be attached to the comment
    name: media
    optional: true
    type: string[]
  - constraints:
    - other:
        description: is missing
        error: comment.created-at.missing
    - other:
        description: is too far from now
        error: comment.created-at.out-of-range
    description: comment creation timestamp - the real time when the comment was created
    name: createdAt
    optional: true
    type: number
  - description: types of reactions that the comment rejects
    name: rejectedReactions
    optional: true
    struct: RejectedReactions
  - description: 'types of reactions that the comment rejects, as defined by the posting''s
      owner ("senior"); only the senior may set this

      '
    name: seniorRejectedReactions
    optional: true
    struct: RejectedReactions
  - constraints:
    - other:
        description: is not found
        error: comment.replied-to-id.not-found
    description: ID of the comment this comment is replying to
    name: repliedToId
    optional: true
    type: string
  - description: 'the comment''s owner signature (use <code><a href="fingerprints.html#Comment">Comment</a></code>
      fingerprint)

      '
    name: signature
    optional: true
    type: string
  - description: signature version (i.e. fingerprint version)
    name: signatureVersion
    optional: true
    type: number
  - constraints:
    - other:
        description: contain an incorrect principal
        error: comment.operations.wrong-principal
    description: the operations and the corresponding principals
    name: operations
    optional: true
    struct: CommentOperations
  - constraints:
    - other:
        description: contain an incorrect principal
        error: comment.reaction-operations.wrong-principal
    description: the operations and the corresponding principals that are overridden
      in reactions to the comment
    name: reactionOperations
    optional: true
    struct: ReactionOperations
  - constraints:
    - other:
        description: contain an incorrect principal
        error: comment.senior-operations.wrong-principal
    description: 'the operations and the corresponding principals that are overridden
      by the posting''s owner ("senior"); only the senior may set this

      '
    name: seniorOperations
    optional: true
    struct: CommentOperations
  name: CommentText
- fields:
  - description: total number of comments in the posting after the operation
    name: total
    type: number
  name: CommentTotalInfo
- fields:
  - array: true
    description: list of node names to fetch
    name: nodeNames
    type: string
  name: ContactFilter
- fields:
  - name: nodeName
    type: string
  - name: fullName
    optional: true
    type: string
  - name: gender
    optional: true
    type: string
  - name: avatar
    optional: true
    struct: AvatarImage
  - description: 'social distance between the contact and the node, which depends
      on subscription and friendship status and the number recent reactions and comments

      '
    name: distance
    type: number
  - description: the contact is subscribed to at least one of the node's feeds
    name: hasFeedSubscriber
    optional: true
    type: boolean
  - description: the node is subscribed to at least one of the contact's feeds
    name: hasFeedSubscription
    optional: true
    type: boolean
  - description: the contact is a friend of the node
    name: hasFriend
    optional: true
    type: boolean
  - description: the node is a friend of the contact
    name: hasFriendOf
    optional: true
    type: boolean
  - description: the contact is blocked by the node
    name: hasBlock
    optional: true
    type: boolean
  - description: the node is blocked by the contact
    name: hasBlockBy
    optional: true
    type: boolean
  - description: the supported operations and the corresponding principals
    name: operations
    optional: true
    struct: ContactOperations
  - description: the supported operations and the corresponding principals as defined
      by the contact's owner
    name: ownerOperations
    optional: true
    struct: ContactOperations
  - description: the operations and the corresponding principals that are overridden
      by the node administrator
    name: adminOperations
    optional: true
    struct: ContactOperations
  name: ContactInfo
- fields:
  - description: contact's details
    name: contact
    struct: ContactInfo
  - description: information about the contact's subscription to the node's feeds
    name: subscriber
    optional: true
    struct: SubscriberInfo
  - description: information about the nodes's subscription to the contact's feeds
    name: subscription
    optional: true
    struct: SubscriptionInfo
  - description: information about the node's friendship with the contact
    name: friend
    optional: true
    struct: FriendInfo
  - description: information about the contact's friendship with the node
    name: friendOf
    optional: true
    struct: FriendOfInfo
  - array: true
    description: information about blocking the contact by the node
    name: blocked
    optional: true
    struct: BlockedUserInfo
  - array: true
    description: information about blocking the node by the contact
    name: blockedBy
    optional: true
    struct: BlockedByUserInfo
  name: ContactWithRelationships
- fields:
  - constraints:
    - notblank:
        error: credentials.login.blank
    name: login
    type: string
  - constraints:
    - notblank:
        error: credentials.password.blank
    name: password
    type: string
  name: Credentials
- fields:
  - description: credentials reset token
    name: token
    optional: true
    type: string
  - description: the current password
    name: oldPassword
    optional: true
    type: string
  - constraints:
    - notblank:
        error: credentials.login.blank
    name: login
    type: string
  - constraints:
    - notblank:
        error: credentials.password.blank
    name: password
    type: string
  name: CredentialsChange
- fields:
  - description: <code>true</code> if the credentials are initialized already, <code>false</code>
      otherwise
    name: created
    type: boolean
  name: CredentialsCreated
- fields:
  - description: <code>true</code> if the request is sent, <code>false</code> otherwise
    name: requested
    type: boolean
  name: DeleteNodeStatus
- fields:
  - constraints:
    - length:
        error: delete-node.message.wrong-size
        max: 1024
    description: text message for the provider
    name: message
    optional: true
    type: string
  name: DeleteNodeText
- fields:
  - constraints:
    - domainname:
        error: domain.name.invalid-domain
    description: domain's hostname or <code>_default_</code> for the default domain
    name: name
    optional: true
    type: string
  - description: domain's node ID
    name: nodeId
    optional: true
    type: string
  name: DomainAttributes
- fields:
  - description: fully-qualified domain name
    name: name
    type: string
  name: DomainAvailable
- fields:
  - description: domain's hostname or <code>_default_</code> for the default domain
    name: name
    type: string
  - description: domain's node ID
    name: nodeId
    type: string
  - description: domain creation timestamp
    name: createdAt
    type: number
  name: DomainInfo
- fields:
  - name: id
    type: string
  - description: type of the draft
    enum: DraftType
    name: draftType
  - description: name of the node the draft is related to
    name: receiverName
    type: string
  - description: ID of the posting, set for all types, except <code>new-posting</code>
    name: receiverPostingId
    optional: true
    type: string
  - description: ID of the comment, set for <code>comment-update</code> type
    name: receiverCommentId
    optional: true
    type: string
  - description: ID of the comment replied to, set for comment drafts, if needed
    name: repliedToId
    optional: true
    type: string
  - description: draft creation timestamp - the real time when the draft was created
    name: createdAt
    type: number
  - description: draft editing timestamp - the last time the draft was updated
    name: editedAt
    optional: true
    type: number
  - description: draft purging timestamp - the time when the draft will be purged
      from the database, if not updated
    name: deadline
    optional: true
    type: number
  - description: full name of the posting's/comment's owner
    name: ownerFullName
    optional: true
    type: string
  - description: avatar of the posting's/comment's owner
    name: ownerAvatar
    optional: true
    struct: AvatarImage
  - description: types of reactions that the posting rejects
    name: rejectedReactions
    optional: true
    struct: RejectedReactions
  - description: types of reactions that the comment should reject, set for posting
      drafts, if needed
    name: commentRejectedReactions
    optional: true
    struct: RejectedReactions
  - description: the source text of the draft, a string representation of a JSON structure
    name: bodySrc
    optional: true
    struct: Body
  - description: 'format of the source text of the draft, <code>plain-text</code>
      by default; the list of available formats is returned in <code><a href="#PostingFeatures">PostingFeatures</a></code>

      '
    enum: SourceFormat
    name: bodySrcFormat
    optional: true
  - description: body of the draft, a string representation of a JSON structure
    name: body
    struct: Body
  - description: format of the body of the draft
    enum: BodyFormat
    name: bodyFormat
    optional: true
  - array: true
    description: list of the media attached to the draft
    name: media
    optional: true
    struct: MediaAttachment
  - description: heading of the draft
    name: heading
    type: string
  - description: story publication timestamp - the time the story must be published
      under in the feed
    name: publishAt
    optional: true
    type: number
  - description: description of the update
    name: updateInfo
    optional: true
    struct: UpdateInfo
  - description: draft of the list of operations and the corresponding principals
    name: operations
    optional: true
    struct: PostingOperations
  - description: 'draft of the list of operations and the corresponding principals
      that are overridden in the posting''s comments, set for posting drafts, if needed

      '
    name: commentOperations
    optional: true
    struct: CommentOperations
  name: DraftInfo
- fields:
  - description: type of the draft
    enum: DraftType
    name: draftType
  - constraints:
    - notblank:
        error: draft.receiver-name.blank
    - length:
        error: draft.receiver-name.wrong-size
        max: 63
    description: name of the node the draft is related to
    name: receiverName
    type: string
  - constraints:
    - other:
        description: is empty
        error: draft.receiver-posting-id.blank
    - length:
        error: draft.receiver-posting-id.wrong-size
        max: 40
    description: ID of the posting, mandatory for all types, except <code>new-posting</code>
    name: receiverPostingId
    optional: true
    type: string
  - constraints:
    - other:
        description: is empty
        error: draft.receiver-comment-id.blank
    - length:
        error: draft.receiver-comment-id.wrong-size
        max: 40
    description: ID of the comment, mandatory for <code>comment-update</code> type
    name: receiverCommentId
    optional: true
    type: string
  - constraints:
    - length:
        error: draft.replied-to-id.wrong-size
        max: 40
    description: ID of the comment replied to
    name: repliedToId
    optional: true
    type: string
  - constraints:
    - length:
        error: draft.owner-full-name.wrong-size
        max: 96
    description: full name of the posting's/comment's owner
    name: ownerFullName
    optional: true
    type: string
  - description: avatar of the posting's/comment's owner
    name: ownerAvatar
    optional: true
    struct: AvatarDescription
  - description: types of reactions that the posting rejects
    name: rejectedReactions
    optional: true
    struct: RejectedReactions
  - description: types of reactions that the posting's comments should reject
    name: commentRejectedReactions
    optional: true
    struct: RejectedReactions
  - constraints:
    - other:
        description: is too large
        error: draft.body-src.wrong-size
    description: the source text of the draft, a string representation of a JSON structure
    name: bodySrc
    optional: true
    struct: Body
  - description: 'format of the source text of the draft, <code>plain-text</code>
      by default; the list of available formats is returned in <code><a href="#PostingFeatures">PostingFeatures</a></code>

      '
    enum: SourceFormat
    name: bodySrcFormat
    optional: true
  - array: true
    description: list of the media attached to the draft, the media may be located
      on another node
    name: media
    optional: true
    struct: RemoteMedia
  - description: story publication timestamp - the time the story must be published
      under in the feed
    name: publishAt
    optional: true
    type: number
  - description: description of the update
    name: updateInfo
    optional: true
    struct: UpdateInfo
  - description: draft of the list of operations and the corresponding principals
    name: operations
    optional: true
    struct: PostingOperations
  - description: 'draft of the list of operations and the corresponding principals
      that are overridden in the posting''s comments

      '
    name: commentOperations
    optional: true
    struct: CommentOperations
  name: DraftText
- fields:
  - description: 'a masked E-mail address that should help user to understand which
      E-mail address was used without revealing it

      '
    name: emailHint
    type: string
  name: EmailHint
- fields:
  - description: posting details, set if the entry is a posting
    name: posting
    optional: true
    struct: PostingInfo
  - description: comment details, set if the entry is a comment
    name: comment
    optional: true
    struct: CommentInfo
  name: EntryInfo
- fields:
  - description: features of a posting
    name: posting
    struct: PostingFeatures
  - description: list of names of plugins enabled for the node
    name: plugins
    optional: true
    type: string[]
  - description: width of the feed in pixels
    name: feedWidth
    type: number
  - description: features of groups of friends
    name: friendGroups
    optional: true
    struct: FriendGroupsFeatures
  - array: true
    description: list of requests to the node owner that are accepted by the node
    enum: AskSubject
    name: ask
    optional: true
  - description: <code>true</code>, if the node is subscribed to the client, <code>false</code>
      otherwise
    name: subscribed
    optional: true
    type: boolean
  name: Features
- fields:
  - description: name of the feed
    name: feedName
    type: string
  - description: title of the feed
    name: title
    optional: true
    type: string
  - description: total number of stories in the feed
    name: total
    type: number
  - description: creation timestamp of the earliest story in the feed
    name: firstCreatedAt
    optional: true
    type: number
  - description: creation timestamp of the latest story in the feed
    name: lastCreatedAt
    optional: true
    type: number
  - description: the supported operations and the corresponding principals
    name: operations
    optional: true
    struct: FeedOperations
  - description: list of sheriffs supervising the feed
    name: sheriffs
    optional: true
    type: string[]
  - array: true
    description: list of sheriff marks on the feed
    name: sheriffMarks
    optional: true
    struct: SheriffMark
  name: FeedInfo
- fields:
  - description: name of the feed
    name: feedName
    type: string
  - description: story publication timestamp - the time the story is published under
      in the feed
    name: publishedAt
    type: number
  - description: '<code>true</code>, if the story is pinned (should appear before
      any non-pinned story in the feed), <code>false</code> otherwise

      '
    name: pinned
    optional: true
    type: boolean
  - name: moment
    type: number
  - description: ID of the story
    name: storyId
    type: string
  - description: the supported operations and the corresponding principals for the
      story in the feed
    name: operations
    optional: true
    struct: StoryOperations
  name: FeedReference
- fields:
  - description: the slice contains all stories before this moment, inclusive. May
      be the far future.
    name: before
    type: number
  - description: the slice contains all stories after this moment, exclusive. May
      be the far past.
    name: after
    type: number
  - array: true
    description: the stories
    name: stories
    struct: StoryInfo
  - description: total number of stories in the feed before this slice
    name: totalInPast
    type: number
  - description: total number of stories in the feed after this slice
    name: totalInFuture
    type: number
  name: FeedSliceInfo
- fields:
  - description: total number of stories
    name: total
    type: number
  - description: total number of pinned stories
    name: totalPinned
    type: number
  - description: moment of the most recent story
    name: lastMoment
    optional: true
    type: number
  - description: number of stories that have not been viewed yet, admin only
    name: notViewed
    optional: true
    type: number
  - description: number of stories that have not been read yet, admin only
    name: notRead
    optional: true
    type: number
  - description: moment of the oldest non-viewed story, admin only
    name: notViewedMoment
    optional: true
    type: number
  - description: moment of the oldest non-read story, admin only
    name: notReadMoment
    optional: true
    type: number
  name: FeedStatus
- fields:
  - description: new value of the <code>viewed</code> flag (<code>null</code>, if
      the flag is not changed)
    name: viewed
    optional: true
    type: boolean
  - description: new value of the <code>read</code> flag (<code>null</code>, if the
      flag is not changed)
    name: read
    optional: true
    type: boolean
  - description: change flags for all stories before this moment, inclusive
    name: before
    type: number
  name: FeedStatusChange
- fields:
  - description: name of the feed
    name: feedName
    type: string
  - description: number of stories in the feed that have not been viewed yet
    name: notViewed
    type: number
  - description: number of stories in the feed that have not been read yet
    name: notRead
    type: number
  - description: moment of the oldest non-viewed story
    name: notViewedMoment
    optional: true
    type: number
  - description: moment of the oldest non-read story
    name: notReadMoment
    optional: true
    type: number
  name: FeedWithStatus
- fields:
  - constraints:
    - notblank:
        error: friend.node-name.blank
    - length:
        error: friend.node-name.wrong-size
        max: 63
    description: name of the node
    name: nodeName
    type: string
  - array: true
    description: groups of friends the node is to be included into
    name: groups
    optional: true
    struct: FriendGroupAssignment
  name: FriendDescription
- fields:
  - description: ID of the group of friends
    name: id
    type: string
  - constraints:
    - other:
        description: contain an incorrect principal
        error: friend.operations.wrong-principal
    description: the operations and the corresponding principals
    name: operations
    optional: true
    struct: FriendOperations
  name: FriendGroupAssignment
- fields:
  - constraints:
    - notblank:
        error: friend-group.title.blank
    - length:
        error: friend-group.title.wrong-size
        max: 63
    description: title of the group of friends
    name: title
    type: string
  - constraints:
    - other:
        description: contain an incorrect principal
        error: friend-group.operations.wrong-principal
    description: the operations and the corresponding principals
    name: operations
    optional: true
    struct: FriendGroupOperations
  name: FriendGroupDescription
- fields:
  - description: ID of the group of friends
    name: id
    type: string
  - description: title of the group of friends
    name: title
    optional: true
    type: string
  - description: the friendship timestamp - the real time when the node was added
      to the group of friends
    name: addedAt
    type: number
  - description: list of the supported operations and the corresponding principals
    name: operations
    optional: true
    struct: FriendOperations
  name: FriendGroupDetails
- fields:
  - name: id
    type: string
  - description: title of the group of friends
    name: title
    optional: true
    type: string
  - description: the group creation timestamp - the real time when the group of friends
      was created
    name: createdAt
    type: number
  - description: list of the supported operations and the corresponding principals
    name: operations
    optional: true
    struct: FriendGroupOperations
  name: FriendGroupInfo
- fields:
  - array: true
    description: list of groups of friends existing on the node
    name: available
    struct: FriendGroupInfo
  - array: true
    description: list of groups of friends the client is member of
    name: memberOf
    optional: true
    struct: FriendGroupDetails
  name: FriendGroupsFeatures
- fields:
  - description: name of the node
    name: nodeName
    type: string
  - description: information about the node
    name: contact
    optional: true
    struct: ContactInfo
  - array: true
    description: groups of friends the node belongs to
    name: groups
    optional: true
    struct: FriendGroupDetails
  name: FriendInfo
- fields:
  - description: name of the remote node
    name: remoteNodeName
    type: string
  - description: information about the remote node
    name: contact
    optional: true
    struct: ContactInfo
  - array: true
    description: groups of friends on the remote node this node was added to
    name: groups
    optional: true
    struct: FriendGroupDetails
  name: FriendOfInfo
- fields:
  - description: fundraiser title
    name: title
    type: string
  - description: text or URI to be encoded and displayed as QR-code
    name: qrCode
    optional: true
    type: string
  - description: arbitrary text to be displayed
    name: text
    optional: true
    type: string
  - description: link to the fundraiser
    name: href
    optional: true
    type: string
  name: FundraiserInfo
- fields:
  - array: true
    description: a set of permissions to be granted or revoked
    enum: Scope
    name: scope
  - description: '<code>true</code> if the permissions must be revoked, <code>false</code>
      if the permissions must be granted

      '
    name: revoke
    type: boolean
  name: GrantChange
- fields:
  - description: name of the node the permissions are granted to
    name: nodeName
    type: string
  - array: true
    description: the set of administrative permissions granted to the node
    enum: Scope
    name: scope
  name: GrantInfo
- fields:
  - constraints:
    - notnull:
        error: node-name.mnemonic.missing
    description: the words
    name: mnemonic
    type: string[]
  name: KeyMnemonic
- fields:
  - description: name of the site
    name: siteName
    optional: true
    type: string
  - description: canonical URL of the page
    name: url
    optional: true
    type: string
  - description: title of the page
    name: title
    optional: true
    type: string
  - description: description of the page
    name: description
    optional: true
    type: string
  - description: hash of the image presenting the page
    name: imageHash
    optional: true
    type: string
  name: LinkPreview
- fields:
  - description: name of the site
    name: siteName
    optional: true
    type: string
  - description: canonical URL of the page
    name: url
    optional: true
    type: string
  - description: title of the page
    name: title
    optional: true
    type: string
  - description: description of the page
    name: description
    optional: true
    type: string
  - description: URL of the image presenting the page
    name: imageUrl
    optional: true
    type: string
  name: LinkPreviewInfo
- fields:
  - description: details of the attached media, may be absent if the media is not
      located on the node
    name: media
    optional: true
    struct: PrivateMediaFileInfo
  - description: details of the media, if it is located on another node
    name: remoteMedia
    optional: true
    struct: RemoteMediaInfo
  - description: '<code>true</code> if the media is used in the body of the posting/comment,
      <code>false</code> otherwise

      '
    name: embedded
    type: boolean
  name: MediaAttachment
- fields:
  - description: the width the preview was prepared for viewing at
    name: targetWidth
    type: number
  - description: 'location of the media file, relative to the <code>/media</code>;
      points to a static image served directly from a filesystem; static images do
      not accept any query parameters including authentication parameters

      '
    name: directPath
    optional: true
    type: string
  - description: actual width of the preview in pixels
    name: width
    type: number
  - description: actual height of the preview in pixels
    name: height
    type: number
  - description: <code>true</code> if the preview is identical to the original media,
      <code>false</code> otherwise
    name: original
    optional: true
    type: boolean
  name: MediaFilePreviewInfo
- fields:
  - description: ID of the media file
    name: id
    type: string
  - description: cryptographic digest of the media file
    name: digest
    optional: true
    type: string
  name: MediaWithDigest
- fields:
  - constraints:
    - notblank:
        error: node-name.name.blank
    - other:
        description: is reserved, too long or contains invalid characters
        error: node-name.name.invalid
    name: name
    type: string
  name: NameToRegister
- fields:
  - description: ID of the notification packet on the sending node (used to filter
      out duplicates)
    name: id
    type: string
  - constraints:
    - notblank:
        error: notification.node-name.blank
    - length:
        error: notification.node-name.wrong-size
        max: 63
    description: name of the sending node
    name: nodeName
    type: string
  - constraints:
    - length:
        error: notification.full-name.wrong-size
        max: 96
    description: full name of the sending node
    name: fullName
    optional: true
    type: string
  - constraints:
    - length:
        error: notification.gender.wrong-size
        max: 31
    description: gender of the sending node
    name: gender
    optional: true
    type: string
  - description: avatar of the sending node
    name: avatar
    optional: true
    struct: AvatarImage
  - constraints:
    - other:
        description: is too far in the past
        error: notification.created-at.too-old
    description: notification packet creation timestamp
    name: createdAt
    type: number
  - constraints:
    - notblank:
        error: notification.type.blank
    - other:
        description: is unknown
        error: notification.type.unknown
    description: notification type
    name: type
    type: string
  - constraints:
    - notblank:
        error: notification.notification.blank
    - other:
        description: has invalid structure
        error: notification.notification.invalid
    description: 'the notification, a string representation of a JSON structure (see
      <a href="notifications.html">Notifications</a> page for details)

      '
    name: notification
    type: string
  - description: 'the notification packet sender signature (use <code><a href="fingerprints.html#NotificationPacket">NotificationPacket</a></code>
      fingerprint)

      '
    name: signature
    type: string
  - description: signature version (i.e. fingerprint version)
    name: signatureVersion
    type: number
  name: NotificationPacket
- fields:
  - name: name
    optional: true
    type: string
  - description: status of the latest operation with the node name
    enum: OperationStatus
    name: operationStatus
    optional: true
  - description: the last time the operation status was updated
    name: operationStatusUpdated
    optional: true
    type: number
  - description: if the operation with the node name was failed, the code of the failure
    name: operationErrorCode
    optional: true
    type: string
  - description: if the operation with the node name was failed, the human-readable
      description of the failure
    name: operationErrorMessage
    optional: true
    type: string
  - description: '<code>true</code>, if updating key mnemonic is being stored on the
      node, <code>false</code> otherwise

      '
    name: storedMnemonic
    optional: true
    type: boolean
  - description: the supported operations and the corresponding principals
    name: operations
    optional: true
    struct: NodeNameOperations
  name: NodeNameInfo
- fields:
  - description: total number of subscribers of the node
    name: feedSubscribersTotal
    optional: true
    type: number
  - description: total number of subscriptions of the node
    name: feedSubscriptionsTotal
    optional: true
    type: number
  - description: total number of friends in every group
    name: friendsTotal
    optional: true
    type: Partial<Record<string, number>>
  - description: total number of nodes that added this node to their friends
    name: friendOfsTotal
    optional: true
    type: number
  - description: total number of blocked nodes
    name: blockedTotal
    optional: true
    type: number
  - description: total number of nodes that blocked this node
    name: blockedByTotal
    optional: true
    type: number
  - description: the supported operations and the corresponding principals
    name: operations
    optional: true
    struct: PeopleOperations
  name: PeopleGeneralInfo
- fields:
  - description: <code>true</code>, if the client has authenticated as root admin,
      <code>false</code> otherwise
    name: rootAdmin
    type: boolean
  - description: <code>true</code>, if the client has authenticated as node admin,
      <code>false</code> otherwise
    name: admin
    type: boolean
  - description: 'the list of permissions granted to the client, if it has authenticated
      as node admin; see <code><a href="#TokenInfo">TokenInfo</a>.permissions</code>
      for the list of possible values

      '
    name: authCategories
    type: string[]
  - description: node name of the client
    name: clientName
    type: string
  - description: IP address of the client
    name: remoteAddress
    type: string
  - description: user agent (browser) used by the client
    name: userAgent
    type: string
  - description: operating system used by the client
    name: userAgentOs
    type: string
  - description: ID of the current node
    name: nodeId
    type: string
  - description: node name of the current node
    name: nodeName
    type: string
  - description: domain name of the current node
    name: domainName
    type: string
  - description: full URL of the request
    name: originUrl
    type: string
  name: PluginContext
- fields:
  - constraints:
    - notblank:
        error: plugin.name.blank
    - length:
        error: plugin.name.wrong-size
        max: 48
    - other:
        description: has incorrect format
        error: plugin.name.invalid
    description: a unique plugin name; can contain only small latin letters, digits
      or hyphen
    name: name
    type: string
  - constraints:
    - length:
        error: plugin.title.wrong-size
        max: 80
    description: user-readable title of the plugin
    name: title
    optional: true
    type: string
  - constraints:
    - length:
        error: plugin.description.wrong-size
        max: 256
    description: user-readable description of the purpose of the plugin
    name: description
    optional: true
    type: string
  - description: URL of the plugin; used by the node to call the plugin API
    name: location
    optional: true
    type: string
  - description: 'list of types of internal events the plugin wants to receive; <a
      href="#internal-events">Read more about internal events.</a>

      '
    name: acceptedEvents
    optional: true
    type: string[]
  - array: true
    constraints:
    - other:
        description: contain an option of an unknown type
        error: plugin.options.unknown-type
    description: 'plugin settings to be added to the list of node settings, the settings
      appear in the list with a prefix <code>plugin.&lt;plugin name>.</code>

      '
    name: options
    optional: true
    struct: SettingDescriptor
  name: PluginDescription
- fields:
  - description: ID of the node this plugin is connected to
    name: nodeId
    type: string
  - description: '<code>true</code> if the plugin is enabled for a particular node
      only, <code>false</code>, if it is enabled for the whole server

      '
    name: local
    type: boolean
  - description: a unique plugin name
    name: name
    type: string
  - description: user-readable title of the plugin
    name: title
    optional: true
    type: string
  - description: user-readable description of the purpose of the plugin
    name: description
    optional: true
    type: string
  - description: URL of the plugin; used by the node to call the plugin API
    name: location
    optional: true
    type: string
  - description: 'list of types of internal events the plugin wants to receive; <a
      href="#internal-events">Read more about internal events.</a>

      '
    name: acceptedEvents
    optional: true
    type: string[]
  - array: true
    description: plugin settings to be added to the list of node settings
    name: settings
    optional: true
    struct: SettingMetaInfo
  - description: ID of the token used to authenticate the plugin
    name: tokenId
    optional: true
    type: string
  name: PluginInfo
- fields:
  - description: <code>true</code> if the client is allowed to create postings, <code>false</code>
      otherwise
    name: post
    optional: true
    type: boolean
  - description: <code>true</code> if new postings are recommended to have a subject,
      <code>false</code> otherwise
    name: subjectPresent
    type: boolean
  - array: true
    description: list of source text formats the node understands
    enum: SourceFormat
    name: sourceFormats
  - description: maximal size of a media attachment in a post
    name: mediaMaxSize
    type: number
  - description: maximal size of a compressed image in a post
    name: imageRecommendedSize
    type: number
  - description: maximal resolution of a compressed image in a post (in pixels)
    name: imageRecommendedPixels
    type: number
  - description: list of image formats (in MIME type form) the node understands
    name: imageFormats
    type: string[]
  name: PostingFeatures
- fields:
  - name: id
    type: string
  - description: ID of the current revision of the posting
    name: revisionId
    type: string
  - description: ID of the current revision of the original posting (for cached copies
      of remote postings only)
    name: receiverRevisionId
    optional: true
    type: string
  - description: total number of revisions the posting has
    name: totalRevisions
    type: number
  - description: name of the node where the posting was published (for cached copies
      of remote postings only)
    name: receiverName
    optional: true
    type: string
  - description: full name of the node where the posting was published (for cached
      copies of remote postings only)
    name: receiverFullName
    optional: true
    type: string
  - description: gender of the node where the posting was published (for cached copies
      of remote postings only)
    name: receiverGender
    optional: true
    type: string
  - description: avatar of the node where the posting was published (for cached copies
      of remote postings only)
    name: receiverAvatar
    optional: true
    struct: AvatarImage
  - description: ID of the original posting (for cached copies of remote postings
      only)
    name: receiverPostingId
    optional: true
    type: string
  - description: ID of the media the posting is linked to, if any
    name: parentMediaId
    optional: true
    type: string
  - description: node name of the posting's owner
    name: ownerName
    type: string
  - description: full name of the posting's owner
    name: ownerFullName
    optional: true
    type: string
  - description: gender of the posting's owner
    name: ownerGender
    optional: true
    type: string
  - description: avatar of the posting's owner
    name: ownerAvatar
    optional: true
    struct: AvatarImage
  - description: preview of the posting's body, a string representation of a JSON
      structure
    name: bodyPreview
    optional: true
    struct: Body
  - description: 'the source text of the posting, a string representation of a JSON
      structure, may be absent if not requested

      '
    name: bodySrc
    optional: true
    struct: Body
  - description: hash of the source text of the posting
    name: bodySrcHash
    type: string
  - description: 'format of the source text of the posting, the list of available
      formats is returned in <code><a href="#PostingFeatures">PostingFeatures</a></code>

      '
    enum: SourceFormat
    name: bodySrcFormat
    optional: true
  - description: body of the posting, a string representation of a JSON structure
    name: body
    struct: Body
  - description: format of the body of the posting, may have any value meaningful
      for the client
    enum: BodyFormat
    name: bodyFormat
    optional: true
  - array: true
    description: list of the media attached to the posting
    name: media
    optional: true
    struct: MediaAttachment
  - description: heading of the posting
    name: heading
    type: string
  - description: 'in addition to <code>heading</code>, gives a more detailed description
      of the posting that can be used for search engines and link previews

      '
    name: description
    optional: true
    type: string
  - description: description of the latest update
    name: updateInfo
    optional: true
    struct: UpdateInfo
  - description: posting creation timestamp - the real time when the posting was created
    name: createdAt
    type: number
  - description: posting editing timestamp - the last time the posting was updated
    name: editedAt
    optional: true
    type: number
  - description: posting deletion timestamp - the time when the posting was deleted
    name: deletedAt
    optional: true
    type: number
  - description: original posting creation timestamp (for cached copies of remote
      postings only)
    name: receiverCreatedAt
    optional: true
    type: number
  - description: original posting editing timestamp (for cached copies of remote postings
      only)
    name: receiverEditedAt
    optional: true
    type: number
  - description: original posting deletion timestamp (for cached copies of remote
      postings only)
    name: receiverDeletedAt
    optional: true
    type: number
  - description: creation timestamp of the current revision of the posting
    name: revisionCreatedAt
    type: number
  - description: 'creation timestamp of the current revision of the original posting
      (for cached copies of remote postings only)

      '
    name: receiverRevisionCreatedAt
    optional: true
    type: number
  - description: 'posting purging timestamp - the time when the deleted posting will
      be purged from the database

      '
    name: deadline
    optional: true
    type: number
  - description: 'cryptographic digest of the posting (use <code><a href="fingerprints.html#Posting">Posting</a></code>
      fingerprint)

      '
    name: digest
    optional: true
    type: string
  - description: 'the posting''s owner signature (use <code><a href="fingerprints.html#Posting">Posting</a></code>
      fingerprint)

      '
    name: signature
    optional: true
    type: string
  - description: signature version (i.e. fingerprint version)
    name: signatureVersion
    optional: true
    type: number
  - array: true
    description: array of references to the posting from stories in feeds
    name: feedReferences
    optional: true
    struct: FeedReference
  - array: true
    description: instants related to the posting that are blocked (for admin only)
    name: blockedInstants
    optional: true
    struct: BlockedPostingInstantInfo
  - description: the supported operations and the corresponding principals
    name: operations
    optional: true
    struct: PostingOperations
  - description: 'the supported operations for the original posting and the corresponding
      principals (for cached copies of remote postings only)

      '
    name: receiverOperations
    optional: true
    struct: PostingOperations
  - description: the operations and the corresponding principals that are overridden
      in the posting's comments
    name: commentOperations
    optional: true
    struct: CommentOperations
  - description: the operations and the corresponding principals that are overridden
      in reactions to the posting
    name: reactionOperations
    optional: true
    struct: ReactionOperations
  - description: 'the operations and the corresponding principals that are overridden
      in reactions to the posting''s comments

      '
    name: commentReactionOperations
    optional: true
    struct: ReactionOperations
  - array: true
    description: operations on the posting that are blocked for the client
    enum: BlockedEntryOperation
    name: blockedOperations
    optional: true
  - array: true
    description: operations on the posting's comments that are blocked for the client
    enum: BlockedEntryOperation
    name: blockedCommentOperations
    optional: true
  - description: list of sheriffs supervising the posting
    name: sheriffs
    optional: true
    type: string[]
  - array: true
    description: list of sheriff marks on the posting
    name: sheriffMarks
    optional: true
    struct: SheriffMark
  - description: types of reactions that the posting rejects
    name: rejectedReactions
    optional: true
    struct: RejectedReactions
  - description: types of reactions that the posting's comments should reject
    name: commentRejectedReactions
    optional: true
    struct: RejectedReactions
  - description: details of the existing reaction (if any) of the client's owner
    name: clientReaction
    optional: true
    struct: ClientReactionInfo
  - description: reactions summary of the posting
    name: reactions
    optional: true
    struct: ReactionTotalsInfo
  - array: true
    description: details of the sources the posting was received from (for cached
      copies of remote postings only)
    name: sources
    optional: true
    struct: PostingSourceInfo
  - description: total number of comments to the posting
    name: totalComments
    optional: true
    type: number
  - description: '<code>true</code>, if the posting was recommended by a recommendation
      service (for cached copies of remote postings only), <code>false</code> otherwise

      '
    name: recommended
    optional: true
    type: boolean
  java-interfaces:
  - MediaInfo
  name: PostingInfo
- fields:
  - name: id
    type: string
  - description: ID of the original revision (for cached copies of remote postings
      only)
    name: receiverId
    optional: true
    type: string
  - description: preview of the revision's body, a string representation of a JSON
      structure
    name: bodyPreview
    optional: true
    struct: Body
  - description: hash of the source text of the revision
    name: bodySrcHash
    type: string
  - description: 'format of the source text of the revision, the list of available
      formats is returned in <code><a href="#PostingFeatures">PostingFeatures</a></code>

      '
    enum: SourceFormat
    name: bodySrcFormat
    optional: true
  - description: body of the revision, a string representation of a JSON structure
    name: body
    struct: Body
  - description: format of the body of the revision
    enum: BodyFormat
    name: bodyFormat
    optional: true
  - array: true
    description: list of the media attached to the revision
    name: media
    optional: true
    struct: MediaAttachment
  - description: heading of the revision
    name: heading
    type: string
  - description: 'in addition to <code>heading</code>, gives a more detailed description
      of the revision that can be used for search engines and link previews

      '
    name: description
    optional: true
    type: string
  - description: description of the latest update
    name: updateInfo
    optional: true
    struct: UpdateInfo
  - description: revision creation timestamp - the real time when the revision was
      created
    name: createdAt
    type: number
  - description: revision deletion timestamp - the time when the revision was deleted
    name: deletedAt
    optional: true
    type: number
  - description: original revision creation timestamp (for cached copies of remote
      postings only)
    name: receiverCreatedAt
    optional: true
    type: number
  - description: original revision deletion timestamp (for cached copies of remote
      postings only)
    name: receiverDeletedAt
    optional: true
    type: number
  - description: 'cryptographic digest of the revision (use <code><a href="fingerprints.html#Posting">Posting</a></code>
      fingerprint)

      '
    name: digest
    optional: true
    type: string
  - description: 'the revision''s owner signature (use <code><a href="fingerprints.html#Posting">Posting</a></code>
      fingerprint)

      '
    name: signature
    optional: true
    type: string
  - description: signature version (i.e. fingerprint version)
    name: signatureVersion
    optional: true
    type: number
  - description: details of the existing reaction (if any) of the client's owner
    name: clientReaction
    optional: true
    struct: ClientReactionInfo
  - description: reactions summary of the posting revision
    name: reactions
    optional: true
    struct: ReactionTotalsInfo
  name: PostingRevisionInfo
- fields:
  - description: name of the remote node
    name: nodeName
    type: string
  - description: full name of the remote node
    name: fullName
    optional: true
    type: string
  - description: avatar of the remote node
    name: avatar
    optional: true
    struct: AvatarImage
  - description: name of the feed on the remote node
    name: feedName
    type: string
  - description: ID of the posting on the remote node
    name: postingId
    type: string
  - description: timestamp when the posting was received from this source
    name: createdAt
    type: number
  name: PostingSourceInfo
- fields:
  - description: avatar of the posting's owner
    name: ownerAvatar
    optional: true
    struct: AvatarDescription
  - constraints:
    - notnull:
        error: posting.body-src.blank
    - length:
        error: posting.body-src.wrong-size
        max: 65535
    description: the source text of the posting, a string representation of a JSON
      structure
    name: bodySrc
    optional: true
    struct: Body
  - description: 'format of the source text of the posting, <code>plain-text</code>
      by default; the list of available formats is returned in <code><a href="#PostingFeatures">PostingFeatures</a></code>

      '
    enum: SourceFormat
    name: bodySrcFormat
    optional: true
  - array: true
    description: array of IDs and digests of private media to be attached to the posting
    name: media
    optional: true
    struct: MediaWithDigest
  - description: types of reactions that the posting rejects
    name: rejectedReactions
    optional: true
    struct: RejectedReactions
  - description: types of reactions that the posting's comments should rejects
    name: commentRejectedReactions
    optional: true
    struct: RejectedReactions
  - constraints:
    - other:
        description: contain an incorrect principal
        error: posting.operations.wrong-principal
    description: the operations and the corresponding principals
    name: operations
    optional: true
    struct: PostingOperations
  - constraints:
    - other:
        description: contain an incorrect principal
        error: posting.comment-operations.wrong-principal
    description: the operations and the corresponding principals that are overridden
      in the posting's comments
    name: commentOperations
    optional: true
    struct: CommentOperations
  - constraints:
    - other:
        description: contain an incorrect principal
        error: posting.reaction-operations.wrong-principal
    description: the operations and the corresponding principals that are overridden
      in reactions to the posting
    name: reactionOperations
    optional: true
    struct: ReactionOperations
  - constraints:
    - other:
        description: contain an incorrect principal
        error: posting.comment-reaction-operations.wrong-principal
    description: 'the operations and the corresponding principals that are overridden
      in reactions to the posting''s comments

      '
    name: commentReactionOperations
    optional: true
    struct: ReactionOperations
  name: PostingSourceText
- fields:
  - constraints:
    - length:
        error: posting.owner-name.wrong-size
        max: 63
    description: node name of the posting's owner
    name: ownerName
    optional: true
    type: string
  - constraints:
    - length:
        error: posting.owner-full-name.wrong-size
        max: 96
    description: full name of the posting's owner
    name: ownerFullName
    optional: true
    type: string
  - constraints:
    - length:
        error: posting.owner-gender.wrong-size
        max: 31
    description: gender of the posting's owner
    name: ownerGender
    optional: true
    type: string
  - description: avatar of the posting's owner
    name: ownerAvatar
    optional: true
    struct: AvatarDescription
  - description: preview of the posting's body, a string representation of a JSON
      structure
    name: bodyPreview
    optional: true
    struct: Body
  - constraints:
    - other:
        description: is empty
        error: posting.body-src.blank
    - other:
        description: is too long
        error: posting.body-src.wrong-size
    description: the source text of the posting, a string representation of a JSON
      structure
    name: bodySrc
    optional: true
    struct: Body
  - description: 'format of the source text of the posting, <code>plain-text</code>
      by default; the list of available formats is returned in <code><a href="#PostingFeatures">PostingFeatures</a></code>

      '
    enum: SourceFormat
    name: bodySrcFormat
    optional: true
  - constraints:
    - other:
        description: is empty
        error: posting.body.blank
    - other:
        description: is too long
        error: posting.body.wrong-size
    description: body of the posting, a string representation of a JSON structure
    name: body
    optional: true
    struct: Body
  - constraints:
    - other:
        description: is missing
        error: posting.body-format.missing
    description: format of the body of the posting, may have any value meaningful
      for the client
    enum: BodyFormat
    name: bodyFormat
    optional: true
  - description: array of IDs of private media to be attached to the posting
    name: media
    optional: true
    type: string[]
  - constraints:
    - other:
        description: is missing
        error: posting.created-at.missing
    - other:
        description: is too far from now
        error: posting.created-at.out-of-range
    description: posting creation timestamp - the real time when the posting was created
    name: createdAt
    optional: true
    type: number
  - description: types of reactions that the posting rejects
    name: rejectedReactions
    optional: true
    struct: RejectedReactions
  - description: types of reactions that the posting's comments should reject
    name: commentRejectedReactions
    optional: true
    struct: RejectedReactions
  - array: true
    constraints:
    - other:
        description: cannot be modified
        error: posting.publications.cannot-modify
    description: list of publications in feeds that must be made after creating the
      posting (for new postings only)
    name: publications
    optional: true
    struct: StoryAttributes
  - description: description of the update
    name: updateInfo
    optional: true
    struct: UpdateInfo
  - description: 'the posting''s owner signature (use <code><a href="fingerprints.html#Posting">Posting</a></code>
      fingerprint)

      '
    name: signature
    optional: true
    type: string
  - description: signature version (i.e. fingerprint version)
    name: signatureVersion
    optional: true
    type: number
  - constraints:
    - other:
        description: contain an incorrect principal
        error: posting.operations.wrong-principal
    description: the operations and the corresponding principals
    name: operations
    optional: true
    struct: PostingOperations
  - constraints:
    - other:
        description: contain an incorrect principal
        error: posting.comment-operations.wrong-principal
    description: the operations and the corresponding principals that are overridden
      in the posting's comments
    name: commentOperations
    optional: true
    struct: CommentOperations
  - constraints:
    - other:
        description: contain an incorrect principal
        error: posting.reaction-operations.wrong-principal
    description: the operations and the corresponding principals that are overridden
      in reactions to the posting
    name: reactionOperations
    optional: true
    struct: ReactionOperations
  - constraints:
    - other:
        description: contain an incorrect principal
        error: posting.comment-reaction-operations.wrong-principal
    description: 'the operations and the corresponding principals that are overridden
      in reactions to the posting''s comments

      '
    name: commentReactionOperations
    optional: true
    struct: ReactionOperations
  name: PostingText
- fields:
  - description: ID of the media file
    name: id
    type: string
  - description: SHA-1 hash of the media file
    name: hash
    type: string
  - description: 'virtual location of the media file, relative to the <code>/media</code>
      <a href="virtual-pages.html">virtual page</a>

      '
    name: path
    type: string
  - description: 'location of the media file, relative to the <code>/media</code>;
      points to a static image served directly from a filesystem; static images do
      not accept any query parameters including authentication parameters

      '
    name: directPath
    optional: true
    type: string
  - description: MIME type of the media
    name: mimeType
    type: string
  - description: width of the media in pixels (<code>null</code>, if the media file
      is not an image or video)
    js-default: '0'
    name: width
    optional: true
    type: number
  - description: height of the media in pixels (<code>null</code>, if the media file
      is not an image or video)
    js-default: '0'
    name: height
    optional: true
    type: number
  - description: 'media orientation, the value should be interpreted like <a href="https://jdhao.github.io/2019/07/31/image_rotation_exif_info/">the
      orientation value present in JPEG EXIF data</a> (<code>null</code>, if the media
      file is not an image or video)

      '
    js-default: '1'
    name: orientation
    optional: true
    type: number
  - description: size of the media file in bytes
    name: size
    type: number
  - description: the text contained in the image, if any
    name: textContent
    optional: true
    type: string
  - description: ID of the posting linked to the media
    name: postingId
    optional: true
    type: string
  - array: true
    description: list of media previews - downscaled versions of the media
    name: previews
    optional: true
    struct: MediaFilePreviewInfo
  - description: the supported operations and the corresponding principals
    name: operations
    optional: true
    struct: PrivateMediaFileOperations
  name: PrivateMediaFileInfo
- fields:
  - constraints:
    - length:
        error: profile.full-name.wrong-size
        max: 96
    description: node owner's full name
    name: fullName
    optional: true
    type: string
  - constraints:
    - length:
        error: profile.gender.wrong-size
        max: 31
    description: node owner's gender
    name: gender
    optional: true
    type: string
  - constraints:
    - length:
        error: profile.email.wrong-size
        max: 63
    - email:
        error: profile.email.invalid
    description: node owner's E-mail address
    name: email
    optional: true
    type: string
  - constraints:
    - length:
        error: profile.title.wrong-size
        max: 120
    description: node title
    name: title
    optional: true
    type: string
  - constraints:
    - length:
        error: profile.bio-src.wrong-size
        max: 4096
    description: the source text of node owner's bio (arbitrary text)
    name: bioSrc
    optional: true
    type: string
  - description: 'format of the source text of node owner''s bio, <code>markdown</code>
      by default; the list of available formats is returned in <code><a href="#PostingFeatures">PostingFeatures</a></code>

      '
    enum: SourceFormat
    name: bioSrcFormat
    optional: true
  - description: node owner's avatar ID
    name: avatarId
    optional: true
    type: string
  - array: true
    description: list of fundraisers - methods of giving a donation to the node owner
    name: fundraisers
    optional: true
    struct: FundraiserInfo
  - constraints:
    - other:
        description: contain an incorrect principal
        error: profile.operations.wrong-principal
    description: the operations and the corresponding principals
    name: operations
    optional: true
    struct: ProfileOperations
  name: ProfileAttributes
- fields:
  - description: node owner's full name
    name: fullName
    optional: true
    type: string
  - description: node owner's gender
    name: gender
    optional: true
    type: string
  - description: node owner's E-mail address
    name: email
    optional: true
    type: string
  - description: node title
    name: title
    optional: true
    type: string
  - description: the source text of node owner's bio (arbitrary text), may be absent
      if not requested
    name: bioSrc
    optional: true
    type: string
  - description: 'format of the source text of node owner''s bio, <code>markdown</code>
      by default, may be absent if not requested; the list of available formats is
      returned in <code><a href="#PostingFeatures">PostingFeatures</a></code>

      '
    enum: SourceFormat
    name: bioSrcFormat
    optional: true
  - description: HTML representation of node owner's bio
    name: bioHtml
    optional: true
    type: string
  - description: node owner's avatar
    name: avatar
    optional: true
    struct: AvatarInfo
  - array: true
    description: list of fundraisers - methods of giving a donation to the node owner
    name: fundraisers
    optional: true
    struct: FundraiserInfo
  - description: the supported operations and the corresponding principals
    name: operations
    optional: true
    struct: ProfileOperations
  name: ProfileInfo
- fields:
  - description: ID of the media file
    name: id
    type: string
  - description: 'virtual location of the media file, relative to the <code>/media</code>
      <a href="virtual-pages.html">virtual page</a>

      '
    name: path
    type: string
  - description: width of the media in pixels (<code>null</code>, if the media file
      is not an image or video)
    name: width
    optional: true
    type: number
  - description: height of the media in pixels (<code>null</code>, if the media file
      is not an image or video)
    name: height
    optional: true
    type: number
  - description: 'media orientation, the value should be interpreted like <a href="https://jdhao.github.io/2019/07/31/image_rotation_exif_info/">the
      orientation value present in JPEG EXIF data</a> (<code>null</code>, if the media
      file is not an image or video)

      '
    name: orientation
    optional: true
    type: number
  - description: size of the media file in bytes
    name: size
    type: number
  name: PublicMediaFileInfo
- fields:
  - description: type of the notification
    enum: PushContentType
    name: type
  - description: ID of the story (<code>story-deleted</code> notifications only)
    name: id
    optional: true
    type: string
  - description: the story (<code>story-added</code> notifications only)
    name: story
    optional: true
    struct: StoryInfo
  - description: status of the feed (<code>feed-updated</code> notifications only)
    name: feedStatus
    optional: true
    struct: FeedWithStatus
  name: PushContent
- fields:
  - constraints:
    - notnull:
        error: push-relay.type.missing
    - other:
        description: is unknown
        error: push-relay.type.unknown
    description: type of the relay
    enum: PushRelayType
    name: type
  - constraints:
    - notblank:
        error: push-relay.client-id.blank
    description: ID/token of the client
    name: clientId
    type: string
  - description: language of the messages
    name: lang
    optional: true
    type: string
  name: PushRelayClientAttributes
- fields:
  - description: <code>true</code>, if the reaction is negative, <code>false</code>,
      if positive
    name: negative
    type: boolean
  - description: reaction code, usually interpreted by clients as emoji code point
    name: emoji
    type: number
  - description: the operations and the corresponding principals
    name: operations
    optional: true
    struct: ReactionOperations
  name: ReactionAttributes
- fields:
  - description: details of the reaction created
    name: reaction
    optional: true
    struct: ReactionInfo
  - description: summary of reactions after the creation
    name: totals
    struct: ReactionTotalsInfo
  name: ReactionCreated
- fields:
  - description: reaction owner's node name
    name: ownerName
    optional: true
    type: string
  - description: reaction owner's full name
    name: ownerFullName
    optional: true
    type: string
  - description: reaction owner's gender
    name: ownerGender
    optional: true
    type: string
  - description: reaction owner's avatar
    name: ownerAvatar
    optional: true
    struct: AvatarDescription
  - description: <code>true</code>, if the reaction is negative, <code>false</code>,
      if positive
    name: negative
    type: boolean
  - description: reaction code, usually interpreted by clients as emoji code point
    name: emoji
    type: number
  - description: 'the reaction owner signature (use <code><a href="fingerprints.html#Reaction">Reaction</a></code>
      fingerprint)

      '
    name: signature
    optional: true
    type: string
  - description: signature version (i.e. fingerprint version)
    name: signatureVersion
    optional: true
    type: number
  - constraints:
    - other:
        description: contain an incorrect principal
        error: reaction.operations.wrong-principal
    description: the operations and the corresponding principals
    name: operations
    optional: true
    struct: ReactionOperations
  name: ReactionDescription
- fields:
  - description: reaction owner's name
    name: ownerName
    optional: true
    type: string
  - description: list of IDs of postings
    name: postings
    optional: true
    type: string[]
  name: ReactionsFilter
- fields:
  - description: reaction owner's node name
    name: ownerName
    optional: true
    type: string
  - description: reaction owner's full name
    name: ownerFullName
    optional: true
    type: string
  - description: reaction owner's gender
    name: ownerGender
    optional: true
    type: string
  - description: reaction owner's avatar
    name: ownerAvatar
    optional: true
    struct: AvatarImage
  - description: ID of the posting
    name: postingId
    optional: true
    type: string
  - description: ID of the posting revision, if relevant
    name: postingRevisionId
    optional: true
    type: string
  - description: ID of the comment, if relevant
    name: commentId
    optional: true
    type: string
  - description: ID of the comment revision, if relevant
    name: commentRevisionId
    optional: true
    type: string
  - description: <code>true</code>, if the reaction is negative, <code>false</code>,
      if positive
    name: negative
    optional: true
    type: boolean
  - description: reaction code, usually interpreted by clients as emoji code point
    name: emoji
    optional: true
    type: number
  - name: moment
    optional: true
    type: number
  - description: reaction creation timestamp - the real time when the reaction was
      created
    name: createdAt
    optional: true
    type: number
  - description: if present, the reaction will be erased at this time
    name: deadline
    optional: true
    type: number
  - description: 'the reaction owner signature (use <code><a href="fingerprints.html#Reaction">Reaction</a></code>
      fingerprint)

      '
    name: signature
    optional: true
    type: string
  - description: signature version (i.e. fingerprint version)
    name: signatureVersion
    optional: true
    type: number
  - description: the supported operations and the corresponding principals
    name: operations
    optional: true
    struct: ReactionOperations
  - description: the supported operations and the corresponding principals as defined
      by the reaction's owner
    name: ownerOperations
    optional: true
    struct: ReactionOperations
  - description: 'the operations and the corresponding principals that are overridden
      by the reaction''s "senior": the posting''s owner in the case of reaction to
      a posting or the comment''s owner in the case of reaction to a comment

      '
    name: seniorOperations
    optional: true
    struct: ReactionOperations
  - description: 'the operations and the corresponding principals that are overridden
      by the posting''s owner ("major") in the case of reaction to a comment; not
      set in the case of reaction to a posting

      '
    name: majorOperations
    optional: true
    struct: ReactionOperations
  name: ReactionInfo
- fields:
  - description: the slice contains all reactions before this moment, inclusive. May
      be the far future.
    name: before
    type: number
  - description: the slice contains all reactions after this moment, exclusive. May
      be the far past.
    name: after
    type: number
  - description: total number of reactions in the whole list
    name: total
    type: number
  - array: true
    description: the reactions
    name: reactions
    struct: ReactionInfo
  name: ReactionsSliceInfo
- fields:
  - description: reaction code, usually interpreted by clients as emoji code point
    name: emoji
    type: number
  - description: total number of reactions with the given code
    name: total
    optional: true
    type: number
  - constraints:
    - value:
        error: reaction-total.share.out-of-range
        max: 1
        min: 0
    description: 'share the reactions with the given code stand from the total number
      of reactions (may be absent, if <code>total</code> is present)

      '
    name: share
    optional: true
    type: number
  name: ReactionTotalInfo
- fields:
  - description: list of IDs of postings
    name: postings
    type: string[]
  name: ReactionTotalsFilter
- fields:
  - description: ID of the entry
    name: entryId
    type: string
  - array: true
    description: summary of positive reactions
    js-default: '[]'
    name: positive
    optional: true
    struct: ReactionTotalInfo
  - array: true
    description: summary of negative reactions
    js-default: '[]'
    name: negative
    optional: true
    struct: ReactionTotalInfo
  name: ReactionTotalsInfo
- fields:
  - constraints:
    - other:
        description: contain an incorrect principal
        error: reaction.operations.wrong-principal
    description: the supported operations and the corresponding principals
    name: operations
    optional: true
    struct: ReactionOperations
  - constraints:
    - other:
        description: contain an incorrect principal
        error: reaction.senior-operations.wrong-principal
    description: 'the operations and the corresponding principals that are overridden
      by the reaction''s "senior": the posting''s owner in the case of reaction to
      a posting or the comment''s owner in the case of reaction to a comment

      '
    name: seniorOperations
    optional: true
    struct: ReactionOperations
  - constraints:
    - other:
        description: contain an incorrect principal
        error: reaction.major-operations.wrong-principal
    description: 'the operations and the corresponding principals that are overridden
      by the posting''s owner ("major") in the case of reaction to a comment; not
      set in the case of reaction to a posting

      '
    name: majorOperations
    optional: true
    struct: ReactionOperations
  name: ReactionOverride
- fields:
  - description: name of the node
    name: nodeName
    type: string
  - description: ID of the posting on the node
    name: postingId
    type: string
  - description: node name of the posting's owner
    name: ownerName
    type: string
  - description: full name of the posting's owner
    name: ownerFullName
    optional: true
    type: string
  - description: avatar of the posting's owner
    name: ownerAvatar
    optional: true
    struct: AvatarImage
  - description: heading of the posting
    name: heading
    type: string
  - description: total number of positive reactions to the posting
    name: totalPositiveReactions
    type: number
  - description: number of positive reactions added to the posting in the previous
      24 hours
    name: lastDayPositiveReactions
    type: number
  - description: total number of comments to the posting
    name: totalComments
    type: number
  - description: number of comments added to the posting in the previous 24 hours
    name: lastDayComments
    type: number
  name: RecommendedPostingInfo
- fields:
  - name: name
    type: string
  - constraints:
    - items:
        error: node-name.secret.wrong-number
        max: 24
        min: 24
    description: human-friendly mnemonic of the updating key
    name: mnemonic
    optional: true
    type: string[]
  - description: base64-encoded secret of the updating key
    name: secret
    optional: true
    type: string
  name: RegisteredNameSecret
- fields:
  - constraints:
    - length:
        error: rejected-reactions.positive.wrong-size
        max: 255
    - emojilist:
        error: rejected-reactions.positive.invalid
    description: 'space-separated list of hexadecimal codes of the positive reactions
      that are rejected; a special code <code>*</code> means rejection of any non-standard
      reaction

      '
    name: positive
    optional: true
    type: string
  - constraints:
    - length:
        error: rejected-reactions.negative.wrong-size
        max: 255
    - emojilist:
        error: rejected-reactions.negative.invalid
    description: 'space-separated list of hexadecimal codes of the negative reactions
      that are rejected (the format is the same as above)

      '
    name: negative
    optional: true
    type: string
  name: RejectedReactions
- fields:
  - description: name of the node
    name: nodeName
    type: string
  - description: name of the feed on the node
    name: feedName
    type: string
  java-equals: true
  name: RemoteFeed
- fields:
  - description: ID of the media file
    name: id
    type: string
  - description: SHA-1 hash of the media file
    name: hash
    optional: true
    type: string
  - description: cryptographic digest of the media file
    name: digest
    optional: true
    type: string
  name: RemoteMedia
- fields:
  - description: ID of the media file
    name: id
    type: string
  - description: SHA-1 hash of the media file
    name: hash
    optional: true
    type: string
  - description: cryptographic digest of the media file
    name: digest
    optional: true
    type: string
  name: RemoteMediaInfo
- fields:
  - description: name of the node
    name: nodeName
    type: string
  - description: ID of the posting on the node
    name: postingId
    type: string
  java-equals: true
  name: RemotePosting
- fields:
  - description: name of the node
    name: nodeName
    type: string
  - description: ID of the posting on the node
    name: postingId
    optional: true
    type: string
  java-equals: true
  name: RemotePostingOrNode
- fields:
  - description: asynchronous operation ID
    name: id
    type: string
  - name: nodeName
    type: string
  - name: postingId
    type: string
  - name: revisionId
    optional: true
    type: string
  - description: status of the operation
    enum: VerificationStatus
    name: status
    optional: true
  - description: error code
    name: errorCode
    optional: true
    type: string
  - description: human-readable error message
    name: errorMessage
    optional: true
    type: string
  name: RemotePostingVerificationInfo
- fields:
  - description: asynchronous operation ID
    name: id
    type: string
  - name: nodeName
    type: string
  - name: postingId
    type: string
  - description: node name of the reaction's owner
    name: reactionOwnerName
    type: string
  - description: status of the operation
    enum: VerificationStatus
    name: status
    optional: true
  - description: error code
    name: errorCode
    optional: true
    type: string
  - description: human-readable error message
    name: errorMessage
    optional: true
    type: string
  name: RemoteReactionVerificationInfo
- fields:
  - description: ID of the comment
    name: id
    type: string
  - description: ID of the comment revision
    name: revisionId
    optional: true
    type: string
  - description: node name of the comment's owner
    name: name
    type: string
  - description: full name of the comment's owner
    name: fullName
    optional: true
    type: string
  - description: gender of the comment's owner
    name: gender
    optional: true
    type: string
  - description: avatar of the comment's owner
    name: avatar
    optional: true
    struct: AvatarImage
  - description: heading of the comment
    name: heading
    optional: true
    type: string
  - description: 'cryptographic digest of the comment (use <code><a href="fingerprints.html#Comment">Comment</a></code>
      fingerprint)

      '
    name: digest
    type: string
  name: RepliedTo
- fields:
  - description: error code
    name: errorCode
    type: string
  - description: human-readable error message
    js-default: '""'
    name: message
    optional: true
    type: string
  name: Result
- fields:
  - description: name of the sheriff that added the mark
    name: sheriffName
    type: string
  name: SheriffMark
- fields:
  - constraints:
    - length:
        error: search.node-name.wrong-size
        max: 63
    description: name of the node being blocked/unblocked
    name: nodeName
    type: string
  - constraints:
    - notnull:
        error: search.blocked-operation.missing
    description: the operation being blocked/unblocked
    enum: BlockedOperation
    name: blockedOperation
  name: SearchBlockUpdate
- fields:
  - constraints:
    - length:
        error: search.posting-id.wrong-size
        max: 40
    description: ID of the posting
    name: postingId
    type: string
  - constraints:
    - length:
        error: search.comment-id.wrong-size
        max: 40
    description: ID of the comment
    name: commentId
    type: string
  - constraints:
    - length:
        error: search.heading.wrong-size
        max: 255
    description: heading of the posting
    name: heading
    type: string
  name: SearchCommentHeadingUpdate
- fields:
  - constraints:
    - length:
        error: search.posting-id.wrong-size
        max: 40
    description: ID of the posting
    name: postingId
    type: string
  - constraints:
    - length:
        error: search.comment-id.wrong-size
        max: 40
    description: ID of the comment
    name: commentId
    type: string
  - constraints:
    - length:
        error: search.media-id.wrong-size
        max: 40
    description: ID of the media
    name: mediaId
    type: string
  - description: text content of the media
    name: textContent
    type: string
  name: SearchCommentMediaTextUpdate
- fields:
  - constraints:
    - length:
        error: search.posting-id.wrong-size
        max: 40
    description: ID of the posting the comment belongs to
    name: postingId
    type: string
  - constraints:
    - length:
        error: search.comment-id.wrong-size
        max: 40
    description: ID of the comment
    name: commentId
    type: string
  name: SearchCommentUpdate
- fields:
  - description: source node of the entry
    name: nodeName
    type: string
  - description: for posting, ID of the posting; for comment, ID of the posting the
      comment belongs to
    name: postingId
    type: string
  - description: ID of the comment
    name: commentId
    optional: true
    type: string
  - description: node name of the entry's owner
    name: ownerName
    type: string
  - description: full name of the entry's owner
    name: ownerFullName
    optional: true
    type: string
  - description: avatar of the entry's owner
    name: ownerAvatar
    optional: true
    struct: AvatarImage
  - description: preview of the entry's body, a string representation of a JSON structure
    name: bodyPreview
    struct: Body
  - description: format of the entry's body, may have any value meaningful for the
      client
    enum: BodyFormat
    name: bodyFormat
    optional: true
  - description: heading of the entry
    name: heading
    type: string
  - description: number of images the entry contains
    name: imageCount
    optional: true
    type: number
  - description: if <code>true</code>, the entry contains a video
    name: videoPresent
    optional: true
    type: boolean
  - description: preview of the media attached to the entry, if any
    name: mediaPreview
    optional: true
    struct: PublicMediaFileInfo
  - description: ID of the media attached to the entry that was chosen for the preview
    name: mediaPreviewId
    optional: true
    type: string
  - description: information about the comment this comment is replying to
    name: repliedTo
    optional: true
    struct: SearchRepliedTo
  - description: entry creation timestamp - the real time when the entry was created
    name: createdAt
    type: number
  - description: the supported operations and the corresponding principals
    name: operations
    optional: true
    struct: SearchEntryOperations
  - description: moment of the entry
    name: moment
    type: number
  name: SearchEntryInfo
- fields:
  - constraints:
    - length:
        error: search.node-name.wrong-size
        max: 63
    description: name of the node being added/removed from the list of friends
    name: nodeName
    type: string
  name: SearchFriendUpdate
- fields:
  - description: type of entries to be searched for; if omitted, all types of entries
      are returned
    enum: SearchEntryType
    name: entryType
    optional: true
  - array: true
    constraints:
    - notnull:
        error: search.hashtags.missing
    - items:
        error: search.hashtags.missing
        min: 1
    - items:
        error: search.hashtags.too-many
        max: 16
    description: 'hashtags to be searched for; at least one of these hashtags should
      be present in the entry returned

      '
    name: hashtags
    type: string
  - description: name of the node where the entries are published
    name: publisherName
    optional: true
    type: string
  - description: 'if <code>true</code>, return the entries appearing in the Newsfeed
      of the <code>publisherName</code> node

      '
    name: inNewsfeed
    optional: true
    type: boolean
  - array: true
    constraints:
    - items:
        error: search.owners.too-many
        max: 16
    description: return only the entries owned (authored) by one of these nodes
    name: owners
    optional: true
    type: string
  - constraints:
    - value:
        error: search.min-image-count.invalid
        min: 0
    description: return only the entries containing at least the given number of images
    name: minImageCount
    optional: true
    type: number
  - constraints:
    - value:
        error: search.max-image-count.invalid
        min: 0
    description: return only the entries containing not more than the given number
      of images
    name: maxImageCount
    optional: true
    type: number
  - description: 'if <code>true</code>, return only the entries containing a video,
      if <code>false</code>, return only the entries that do not contain a video

      '
    name: videoPresent
    optional: true
    type: boolean
  - description: filter out entries prohibited by the given sheriff
    name: sheriffName
    optional: true
    type: string
  - description: return entries created strongly after this moment
    name: after
    optional: true
    type: number
  - description: return entries created at or before this moment
    name: before
    optional: true
    type: number
  - constraints:
    - value:
        error: limit.invalid
        min: 0
    description: maximum number of entries returned
    name: limit
    optional: true
    type: number
  name: SearchHashtagFilter
- fields:
  - description: the slice contains all entries before this moment, inclusive. May
      be the far future.
    name: before
    type: number
  - description: the slice contains all entries after this moment, exclusive. May
      be the far past.
    name: after
    type: number
  - array: true
    description: the entries
    name: entries
    struct: SearchEntryInfo
  name: SearchHashtagSliceInfo
- fields:
  - description: the search query
    name: query
    type: string
  - description: creation timestamp of the record in the search history
    name: createdAt
    type: number
  name: SearchHistoryInfo
- fields:
  - constraints:
    - notblank:
        error: search-history.query.blank
    - length:
        error: search-history.query.wrong-size
        max: 1024
    description: the search query
    name: query
    type: string
  name: SearchHistoryText
- fields:
  - description: the search query
    name: query
    type: string
  - description: filter out nodes prohibited by the given sheriff
    name: sheriffName
    optional: true
    type: string
  - constraints:
    - value:
        error: page.invalid
        min: 0
    description: page number, 0 by default
    name: page
    optional: true
    type: number
  - constraints:
    - value:
        error: limit.invalid
        min: 0
    description: page size (maximum number of entries returned), the default is set
      by the search engine
    name: limit
    optional: true
    type: number
  name: SearchNodeFilter
- fields:
  - name: nodeName
    type: string
  - description: node owner's full name
    name: fullName
    optional: true
    type: string
  - description: node title
    name: title
    optional: true
    type: string
  - description: node owner's avatar
    name: avatar
    optional: true
    struct: AvatarImage
  - description: social distance between the node and the client
    name: distance
    type: number
  name: SearchNodeInfo
- fields:
  - description: number of the page
    name: page
    type: number
  - description: total number of nodes found (this number may be approximate)
    name: total
    type: number
  - array: true
    description: the nodes
    name: nodes
    struct: SearchNodeInfo
  name: SearchNodePageInfo
- fields:
  - constraints:
    - length:
        error: search.posting-id.wrong-size
        max: 40
    description: ID of the posting
    name: postingId
    type: string
  - constraints:
    - length:
        error: search.heading.wrong-size
        max: 255
    description: heading of the posting
    name: heading
    type: string
  name: SearchPostingHeadingUpdate
- fields:
  - constraints:
    - length:
        error: search.posting-id.wrong-size
        max: 40
    description: ID of the posting
    name: postingId
    type: string
  - constraints:
    - length:
        error: search.media-id.wrong-size
        max: 40
    description: ID of the media
    name: mediaId
    type: string
  - description: text content of the media
    name: textContent
    type: string
  name: SearchPostingMediaTextUpdate
- fields:
  - constraints:
    - length:
        error: search.feed-name.wrong-size
        max: 63
    description: name of the feed where the posting is published
    name: feedName
    type: string
  - constraints:
    - length:
        error: search.story-id.wrong-size
        max: 40
    description: ID of the story where the posting is published
    name: storyId
    type: string
  - description: story publication timestamp - the time the story is published under
      in the feed
    name: publishedAt
    type: number
  - constraints:
    - length:
        error: search.node-name.wrong-size
        max: 63
    description: name of the node where the posting is originated from
    name: nodeName
    type: string
  - constraints:
    - length:
        error: search.posting-id.wrong-size
        max: 40
    description: ID of the posting on the original node
    name: postingId
    type: string
  name: SearchPostingUpdate
- fields:
  - constraints:
    - length:
        error: search.posting-id.wrong-size
        max: 40
    description: ID of the posting
    name: postingId
    type: string
  - constraints:
    - length:
        error: search.comment-id.wrong-size
        max: 40
    description: ID of the comment
    name: commentId
    type: string
  - constraints:
    - length:
        error: search.owner-name.wrong-size
        max: 63
    description: reaction owner's name
    name: ownerName
    type: string
  name: SearchReactionUpdate
- fields:
  - description: ID of the comment
    name: id
    type: string
  - description: ID of the comment revision
    name: revisionId
    optional: true
    type: string
  - description: node name of the comment's owner
    name: name
    type: string
  - description: full name of the comment's owner
    name: fullName
    optional: true
    type: string
  - description: avatar of the comment's owner
    name: avatar
    optional: true
    struct: AvatarImage
  - description: heading of the comment
    name: heading
    optional: true
    type: string
  name: SearchRepliedTo
- fields:
  - constraints:
    - length:
        error: search.node-name.wrong-size
        max: 63
    description: name of the node being subscribed to/unsubscribed from
    name: nodeName
    type: string
  - constraints:
    - length:
        error: search.feed-name.wrong-size
        max: 63
    description: name of the feed on the remote node being subscribed to/unsubscribed
      from
    name: feedName
    type: string
  name: SearchSubscriptionUpdate
- fields:
  - description: type of entries to be searched for; if omitted, all types of entries
      are returned
    enum: SearchEntryType
    name: entryType
    optional: true
  - constraints:
    - notblank:
        error: search.text.blank
    description: the text to be searched for
    name: text
    type: string
  - array: true
    constraints:
    - items:
        error: search.hashtags.too-many
        max: 16
    description: at least one of these hashtags should be present in the entry returned
    name: hashtags
    optional: true
    type: string
  - description: name of the node where the entries are published
    name: publisherName
    optional: true
    type: string
  - description: 'if <code>true</code>, return the entries appearing in the Newsfeed
      of the <code>publisherName</code> node

      '
    name: inNewsfeed
    optional: true
    type: boolean
  - array: true
    constraints:
    - items:
        error: search.owners.too-many
        max: 16
    description: return only the entries owned (authored) by one of these nodes
    name: owners
    optional: true
    type: string
  - array: true
    constraints:
    - items:
        error: search.replied-to.too-many
        max: 16
    description: return only the comments that are replies to comments owned (authored)
      by one of these nodes
    name: repliedTo
    optional: true
    type: string
  - constraints:
    - value:
        error: search.min-image-count.invalid
        min: 0
    description: return only the entries containing at least the given number of images
    name: minImageCount
    optional: true
    type: number
  - constraints:
    - value:
        error: search.max-image-count.invalid
        min: 0
    description: return only the entries containing not more than the given number
      of images
    name: maxImageCount
    optional: true
    type: number
  - description: 'if <code>true</code>, return only the entries containing a video,
      if <code>false</code>, return only the entries that do not contain a video

      '
    name: videoPresent
    optional: true
    type: boolean
  - description: return entries created at or after this timestamp
    name: createdAfter
    optional: true
    type: number
  - description: return entries created at or before this timestamp
    name: createdBefore
    optional: true
    type: number
  - description: filter out entries prohibited by the given sheriff
    name: sheriffName
    optional: true
    type: string
  - constraints:
    - value:
        error: page.invalid
        min: 0
    description: page number, 0 by default
    name: page
    optional: true
    type: number
  - constraints:
    - value:
        error: limit.invalid
        min: 0
    description: page size (maximum number of entries returned), the default is set
      by the search engine
    name: limit
    optional: true
    type: number
  name: SearchTextFilter
- fields:
  - description: number of the page
    name: page
    type: number
  - description: total number of entries found
    name: total
    type: number
  - array: true
    description: the entries
    name: entries
    struct: SearchEntryInfo
  name: SearchTextPageInfo
- fields:
  - description: name of the setting
    name: name
    type: string
  - description: value of the setting
    name: value
    optional: true
    type: string
  name: SettingInfo
- fields:
  - description: name of the setting
    name: name
    type: string
  - description: 'default value of the setting (if absent or <code>null</code>, the
      built-in default value will be used)

      '
    name: defaultValue
    optional: true
    type: string
  - description: 'the setting should be privileged (if absent or <code>null</code>,
      the built-in value of the flag will be used)

      '
    name: privileged
    optional: true
    type: boolean
  name: SettingMetaAttributes
- fields:
  - description: name of the setting
    name: name
    type: string
  - description: type of the setting
    enum: SettingType
    name: type
  - description: default value of the setting
    name: defaultValue
    optional: true
    type: string
  - description: the setting is internal - not displayed to the user
    name: internal
    optional: true
    type: boolean
  - description: the setting is privileged - may be changed by server owner only
    name: privileged
    optional: true
    type: boolean
  - description: the setting is stored in the database in encrypted form
    name: encrypted
    optional: true
    type: boolean
  - description: human-friendly description of the setting
    name: title
    optional: true
    type: string
  - description: 'additional modifiers that may help to choose a proper UI component
      for the setting value and to validate the input; the meaning of the modifiers
      depends on the setting type

      '
    name: modifiers
    optional: true
    struct: SettingTypeModifiers
  name: SettingDescriptor
- fields:
  - description: name of the setting
    name: name
    type: string
  - description: type of the setting
    enum: SettingType
    name: type
  - description: default value of the setting
    name: defaultValue
    optional: true
    type: string
  - description: the setting is privileged - may be changed by server owner only
    name: privileged
    optional: true
    type: boolean
  - description: human-friendly description of the setting
    name: title
    type: string
  - description: 'additional modifiers that may help to choose a proper UI component
      for the setting value and to validate the input; the meaning of the modifiers
      depends on the setting type

      '
    name: modifiers
    optional: true
    struct: SettingTypeModifiers
  name: SettingMetaInfo
- fields:
  - description: "preferred format of displaying the value<br> (<code>int</code>,\
      \ <code>string</code>) <ul>\n  <li><code>size</code> - data size in bytes/kilobytes/megabytes\
      \ etc.;</li>\n  <li><code>select</code> - selection of a value from the provided\
      \ list.</li>\n</ul>\n"
    name: format
    optional: true
    type: string
  - description: (<code>int</code>, <code>Duration</code>) minimal value
    name: min
    optional: true
    type: string
  - description: (<code>int</code>, <code>Duration</code>) maximal value
    name: max
    optional: true
    type: string
  - description: (<code>string</code>) <code>true</code>, if the value is a multiline
      text
    name: multiline
    optional: true
    type: boolean
  - description: (<code>Duration</code>) <code>true</code>, if value <code>never</code>
      is allowed
    name: never
    optional: true
    type: boolean
  - description: (<code>Duration</code>) <code>true</code>, if value <code>always</code>
      is allowed
    name: always
    optional: true
    type: boolean
  - array: true
    description: (<code>string</code>) list of selection items
    name: items
    optional: true
    struct: SettingValueChoice
  - array: true
    description: (<code>Principal</code>) list of allowed principals
    enum: PrincipalFlag
    name: principals
    optional: true
  name: SettingTypeModifiers
- fields:
  - description: human-friendly description of the value
    name: title
    type: string
  - description: the value
    name: value
    type: string
  name: SettingValueChoice
- fields:
  - description: <code>true</code>, if the complaints in the group are to be rejected,
      <code>false</code> otherwise
    name: reject
    type: boolean
  - constraints:
    - other:
        description: is missing
        error: sheriff-complaint-decision.decision-code.missing
    description: the decision
    enum: SheriffOrderReason
    name: decisionCode
    optional: true
  - constraints:
    - length:
        error: sheriff-complaint-decision.decision-details.wrong-size
        max: 4096
    description: detailed explanation of the decision in user-readable form
    name: decisionDetails
    optional: true
    type: string
  - description: '<code>true</code>, if the complaints'' owners'' names are not to
      be published, <code>false</code> otherwise

      '
    name: anonymous
    optional: true
    type: boolean
  name: SheriffComplaintDecisionText
- fields:
  - name: id
    type: string
  - description: name of the node the complaints are related to
    name: remoteNodeName
    type: string
  - description: full name of the node the complaints are related to
    name: remoteNodeFullName
    optional: true
    type: string
  - description: name of the feed the complaints are related to
    name: remoteFeedName
    type: string
  - description: ID of the posting the complaints are related to
    name: remotePostingId
    optional: true
    type: string
  - description: ID of the posting's revision the complaints are related to
    name: remotePostingRevisionId
    optional: true
    type: string
  - description: posting owner's node name
    name: remotePostingOwnerName
    optional: true
    type: string
  - description: posting owner's full name
    name: remotePostingOwnerFullName
    optional: true
    type: string
  - description: posting owner's gender
    name: remotePostingOwnerGender
    optional: true
    type: string
  - description: heading of the posting
    name: remotePostingHeading
    optional: true
    type: string
  - description: ID of the comment the complaints are related to
    name: remoteCommentId
    optional: true
    type: string
  - description: ID of the comment's revision the complaints are related to
    name: remoteCommentRevisionId
    optional: true
    type: string
  - description: comment owner's node name
    name: remoteCommentOwnerName
    optional: true
    type: string
  - description: comment owner's full name
    name: remoteCommentOwnerFullName
    optional: true
    type: string
  - description: comment owner's gender
    name: remoteCommentOwnerGender
    optional: true
    type: string
  - description: heading of the comment
    name: remoteCommentHeading
    optional: true
    type: string
  - description: the group of complaints creation timestamp - the real time when the
      group was created
    name: createdAt
    type: number
  - description: moment of the group of complaints
    name: moment
    type: number
  - description: status of the group of complaints
    enum: SheriffComplaintStatus
    name: status
  - description: sheriff's decision
    enum: SheriffOrderReason
    name: decisionCode
    optional: true
  - description: detailed explanation of sheriff's decision in user-readable form
    name: decisionDetails
    optional: true
    type: string
  - description: sheriff's decision timestamp - the real time when the decision was
      made
    name: decidedAt
    optional: true
    type: number
  - description: '<code>true</code>, if the complaints'' owners'' names are not published,
      <code>false</code> otherwise

      '
    name: anonymous
    optional: true
    type: boolean
  name: SheriffComplaintGroupInfo
- fields:
  - description: the slice contains all groups before this moment, inclusive. May
      be the far future.
    name: before
    type: number
  - description: the slice contains all groups after this moment, exclusive. May be
      the far past.
    name: after
    type: number
  - array: true
    description: the groups
    name: groups
    struct: SheriffComplaintGroupInfo
  - description: total number of groups
    name: total
    type: number
  - description: number of groups before this slice till the far past
    name: totalInPast
    type: number
  - description: number of groups after this slice till the far future
    name: totalInFuture
    type: number
  name: SheriffComplaintGroupsSliceInfo
- fields:
  - name: id
    type: string
  - description: complaint owner's node name
    name: ownerName
    type: string
  - description: complaint owner's full name
    name: ownerFullName
    optional: true
    type: string
  - description: complaint owner's gender
    name: ownerGender
    optional: true
    type: string
  - description: the group of complaints this complaint belongs to
    name: group
    optional: true
    struct: SheriffComplaintGroupInfo
  - description: reason of the complaint
    enum: SheriffOrderReason
    name: reasonCode
  - description: detailed explanation of reason of the complaint in user-readable
      form
    name: reasonDetails
    optional: true
    type: string
  - description: '<code>true</code>, if the complaint''s owner wants his name not
      to be published, <code>false</code> otherwise

      '
    name: anonymousRequested
    optional: true
    type: boolean
  - description: complaint creation timestamp - the real time when the order was created
    name: createdAt
    type: number
  name: SheriffComplaintInfo
- fields:
  - constraints:
    - length:
        error: sheriff-complaint.owner-full-name.wrong-size
        max: 96
    description: complaint owner's full name
    name: ownerFullName
    optional: true
    type: string
  - constraints:
    - length:
        error: sheriff-complaint.owner-gender.wrong-size
        max: 31
    description: complaint owner's gender
    name: ownerGender
    optional: true
    type: string
  - constraints:
    - notblank:
        error: sheriff-complaint.node-name.blank
    - length:
        error: sheriff-complaint.node-name.wrong-size
        max: 63
    description: name of the node the complaint is related to
    name: nodeName
    type: string
  - constraints:
    - length:
        error: sheriff-complaint.full-name.wrong-size
        max: 96
    description: full name of the node the complaint is related to
    name: fullName
    optional: true
    type: string
  - constraints:
    - notblank:
        error: sheriff-complaint.feed-name.blank
    - length:
        error: sheriff-complaint.feed-name.wrong-size
        max: 63
    description: name of the feed the complaint is related to
    name: feedName
    type: string
  - constraints:
    - length:
        error: sheriff-complaint.posting-id.wrong-size
        max: 40
    description: ID of the posting the complaint is related to
    name: postingId
    optional: true
    type: string
  - constraints:
    - length:
        error: sheriff-complaint.posting-owner-name.wrong-size
        max: 63
    description: posting owner's node name
    name: postingOwnerName
    optional: true
    type: string
  - constraints:
    - length:
        error: sheriff-complaint.posting-owner-full-name.wrong-size
        max: 96
    description: posting owner's full name
    name: postingOwnerFullName
    optional: true
    type: string
  - constraints:
    - length:
        error: sheriff-complaint.posting-owner-gender.wrong-size
        max: 31
    description: posting owner's gender
    name: postingOwnerGender
    optional: true
    type: string
  - constraints:
    - length:
        error: sheriff-complaint.posting-heading.wrong-size
        max: 255
    description: heading of the posting
    name: postingHeading
    optional: true
    type: string
  - constraints:
    - length:
        error: sheriff-complaint.comment-id.wrong-size
        max: 40
    description: ID of the comment the complaint is related to
    name: commentId
    optional: true
    type: string
  - constraints:
    - length:
        error: sheriff-complaint.comment-owner-name.wrong-size
        max: 63
    description: comment owner's node name
    name: commentOwnerName
    optional: true
    type: string
  - constraints:
    - length:
        error: sheriff-complaint.comment-owner-full-name.wrong-size
        max: 96
    description: comment owner's full name
    name: commentOwnerFullName
    optional: true
    type: string
  - constraints:
    - length:
        error: sheriff-complaint.comment-owner-gender.wrong-size
        max: 31
    description: comment owner's gender
    name: commentOwnerGender
    optional: true
    type: string
  - constraints:
    - length:
        error: sheriff-complaint.comment-heading.wrong-size
        max: 255
    description: heading of the comment
    name: commentHeading
    optional: true
    type: string
  - description: reason of the complaint
    enum: SheriffOrderReason
    name: reasonCode
    optional: true
  - constraints:
    - length:
        error: sheriff-complaint.reason-details.wrong-size
        max: 4096
    description: detailed explanation of reason of the complaint in user-readable
      form
    name: reasonDetails
    optional: true
    type: string
  - description: '<code>true</code>, if the complaint''s owner wants his name not
      to be published, <code>false</code> otherwise

      '
    name: anonymous
    optional: true
    type: boolean
  name: SheriffComplaintText
- fields:
  - description: '<code>true</code>, if the order is to cancel the previous order
      of this type, <code>false</code> otherwise

      '
    name: delete
    optional: true
    type: boolean
  - constraints:
    - notblank:
        error: sheriff-order.feed-name.blank
    - length:
        error: sheriff-order.feed-name.wrong-size
        max: 63
    description: name of the feed the order is related to
    name: feedName
    type: string
  - description: ID of the posting the order is related to
    name: postingId
    optional: true
    type: string
  - description: ID of the comment the order is related to
    name: commentId
    optional: true
    type: string
  - description: category of the order
    enum: SheriffOrderCategory
    name: category
  - description: reason of the order
    enum: SheriffOrderReason
    name: reasonCode
    optional: true
  - constraints:
    - length:
        error: sheriff-order.reason-details.wrong-size
        max: 4096
    description: detailed explanation of reason of the order in user-readable form
    name: reasonDetails
    optional: true
    type: string
  name: SheriffOrderAttributes
- fields:
  - constraints:
    - notblank:
        error: sheriff-order.id.blank
    - length:
        error: sheriff-order.id.wrong-size
        max: 40
    name: id
    type: string
  - description: '<code>true</code>, if the order is to cancel the previous order
      of this type, <code>false</code> otherwise

      '
    name: delete
    optional: true
    type: boolean
  - constraints:
    - notblank:
        error: sheriff-order.sheriff-name.blank
    - length:
        error: sheriff-order.sheriff-name.wrong-size
        max: 63
    description: node name of the sheriff
    name: sheriffName
    type: string
  - description: sheriff's avatar
    name: sheriffAvatar
    optional: true
    struct: AvatarDescription
  - constraints:
    - notblank:
        error: sheriff-order.feed-name.blank
    - length:
        error: sheriff-order.feed-name.wrong-size
        max: 63
    description: name of the feed the order is related to
    name: feedName
    type: string
  - description: ID of the posting the order is related to
    name: postingId
    optional: true
    type: string
  - description: ID of the comment the order is related to
    name: commentId
    optional: true
    type: string
  - description: category of the order
    enum: SheriffOrderCategory
    name: category
  - description: reason of the order
    enum: SheriffOrderReason
    name: reasonCode
    optional: true
  - constraints:
    - length:
        error: sheriff-order.reason-details.wrong-size
        max: 4096
    description: detailed explanation of reason of the order in user-readable form
    name: reasonDetails
    optional: true
    type: string
  - constraints:
    - other:
        description: is too far from now
        error: sheriff-order.created-at.out-of-range
    description: order creation timestamp - the real time when the order was created
    name: createdAt
    type: number
  - description: 'the sheriff''s signature (use <code><a href="fingerprints.html#SheriffOrder">SheriffOrder</a></code>
      fingerprint)

      '
    name: signature
    type: string
  - description: signature version (i.e. fingerprint version)
    name: signatureVersion
    type: number
  name: SheriffOrderDetails
- fields:
  - name: id
    type: string
  - description: '<code>true</code>, if the order is to cancel the previous order
      of this type, <code>false</code> otherwise

      '
    name: delete
    optional: true
    type: boolean
  - description: node name of the sheriff
    name: sheriffName
    type: string
  - description: name of the node the order was sent to
    name: nodeName
    type: string
  - description: full name of the node the order was sent to
    name: nodeFullName
    optional: true
    type: string
  - description: name of the feed the order is related to
    name: feedName
    type: string
  - description: ID of the posting the order is related to
    name: postingId
    optional: true
    type: string
  - description: ID of the posting's revision the order is related to
    name: postingRevisionId
    optional: true
    type: string
  - description: posting owner's node name
    name: postingOwnerName
    optional: true
    type: string
  - description: posting owner's full name
    name: postingOwnerFullName
    optional: true
    type: string
  - description: posting owner's gender
    name: postingOwnerGender
    optional: true
    type: string
  - description: heading of the posting
    name: postingHeading
    optional: true
    type: string
  - description: ID of the comment the order is related to
    name: commentId
    optional: true
    type: string
  - description: ID of the comment's revision the order is related to
    name: commentRevisionId
    optional: true
    type: string
  - description: comment owner's node name
    name: commentOwnerName
    optional: true
    type: string
  - description: comment owner's full name
    name: commentOwnerFullName
    optional: true
    type: string
  - description: comment owner's gender
    name: commentOwnerGender
    optional: true
    type: string
  - description: heading of the comment
    name: commentHeading
    optional: true
    type: string
  - description: category of the order
    enum: SheriffOrderCategory
    name: category
  - description: reason of the order
    enum: SheriffOrderReason
    name: reasonCode
    optional: true
  - description: detailed explanation of reason of the order in user-readable form
    name: reasonDetails
    optional: true
    type: string
  - description: order creation timestamp - the real time when the order was created
    name: createdAt
    type: number
  - description: moment of the order
    name: moment
    type: number
  - description: 'the sheriff''s signature (use <code><a href="fingerprints.html#SheriffOrder">SheriffOrder</a></code>
      fingerprint)

      '
    name: signature
    type: string
  - description: signature version (i.e. fingerprint version)
    name: signatureVersion
    type: number
  - description: ID of the groups of complaints that were the cause of the order
    name: complaintGroupId
    optional: true
    type: string
  name: SheriffOrderInfo
- fields:
  - description: the slice contains all orders before this moment, inclusive. May
      be the far future.
    name: before
    type: number
  - description: the slice contains all orders after this moment, exclusive. May be
      the far past.
    name: after
    type: number
  - array: true
    description: the orders
    name: orders
    struct: SheriffOrderInfo
  - description: total number of orders
    name: total
    type: number
  - description: number of orders before this slice till the far past
    name: totalInPast
    type: number
  - description: number of orders after this slice till the far future
    name: totalInFuture
    type: number
  name: SheriffOrdersSliceInfo
- fields:
  - description: name of the feed
    name: feedName
    optional: true
    type: string
  - description: story publication timestamp - the time the story must be published
      under in the feed
    name: publishAt
    optional: true
    type: number
  - description: '<code>true</code>, if the story is pinned (should appear before
      any non-pinned story in the feed), <code>false</code> otherwise

      '
    name: pinned
    optional: true
    type: boolean
  - description: value of the <code>viewed</code> flag (<code>null</code>, if the
      flag is not changed)
    name: viewed
    optional: true
    type: boolean
  - description: value of the <code>read</code> flag (<code>null</code>, if the flag
      is not changed)
    name: read
    optional: true
    type: boolean
  - description: value of the <code>satisfied</code> flag (<code>null</code>, if the
      flag is not changed)
    name: satisfied
    optional: true
    type: boolean
  name: StoryAttributes
- fields:
  - name: id
    type: string
  - description: name of the feed
    name: feedName
    type: string
  - description: type of the story
    enum: StoryType
    name: storyType
  - description: story creation timestamp - the real time when the story was created
    name: createdAt
    type: number
  - description: story publication timestamp - the time the story is published under
      in the feed
    name: publishedAt
    type: number
  - description: '<code>true</code>, if the story is pinned (should appear before
      any non-pinned story in the feed), <code>false</code> otherwise

      '
    name: pinned
    optional: true
    type: boolean
  - name: moment
    type: number
  - description: <code>true</code>, if the story has been viewed by node owner, <code>false</code>
      otherwise
    name: viewed
    optional: true
    type: boolean
  - description: <code>true</code>, if the story has been read by node owner, <code>false</code>
      otherwise
    name: read
    optional: true
    type: boolean
  - description: 'if the story is associated with a user action (for example, it contains
      a form that should be submitted), this flag is set to <code>true</code> if the
      action is done already, and <code>false</code> otherwise

      '
    name: satisfied
    optional: true
    type: boolean
  - description: name of the node related to the summary of the story
    name: summaryNodeName
    optional: true
    type: string
  - description: full name of the node related to the summary of the story
    name: summaryFullName
    optional: true
    type: string
  - description: avatar of the summary of the story
    name: summaryAvatar
    optional: true
    struct: AvatarImage
  - description: 'user-readable summary of the story - this field is <b>deprecated</b>
      in favor of <code>summaryData</code>

      '
    name: summary
    optional: true
    type: string
  - description: details of the story; they are used by the client to build a user-readable
      summary of the story
    name: summaryData
    optional: true
    struct: StorySummaryData
  - description: the posting this story is about
    name: posting
    optional: true
    struct: PostingInfo
  - description: ID of the posting this story is about, used if the whole posting
      is not returned
    name: postingId
    optional: true
    type: string
  - description: the comment this story is about
    name: comment
    optional: true
    struct: CommentInfo
  - description: ID of the comment this story is about, used if the whole posting
      is not returned
    name: commentId
    optional: true
    type: string
  - description: name of the node this story is about
    name: remoteNodeName
    optional: true
    type: string
  - description: full name of the node this story is about
    name: remoteFullName
    optional: true
    type: string
  - description: ID of the posting at remote node this story is about
    name: remotePostingId
    optional: true
    type: string
  - description: ID of the comment at remote node this story is about
    name: remoteCommentId
    optional: true
    type: string
  - description: ID of the media at remote node this story is about
    name: remoteMediaId
    optional: true
    type: string
  - description: the supported operations and the corresponding principals
    name: operations
    optional: true
    struct: StoryOperations
  name: StoryInfo
- fields:
  - description: a node
    name: node
    optional: true
    struct: StorySummaryNode
  - description: a posting
    name: posting
    optional: true
    struct: StorySummaryEntry
  - description: a comment
    name: comment
    optional: true
    struct: StorySummaryEntry
  - array: true
    description: list of comments
    name: comments
    optional: true
    struct: StorySummaryEntry
  - description: total number of comments
    name: totalComments
    optional: true
    type: number
  - description: the comment replied to
    name: repliedTo
    optional: true
    struct: StorySummaryEntry
  - description: the parent posting of the media
    name: parentPosting
    optional: true
    struct: StorySummaryEntry
  - description: a reaction
    name: reaction
    optional: true
    struct: StorySummaryReaction
  - array: true
    description: list of reactions
    name: reactions
    optional: true
    struct: StorySummaryReaction
  - description: total number of reactions
    name: totalReactions
    optional: true
    type: number
  - description: name of a feed
    name: feedName
    optional: true
    type: string
  - description: subscription reason
    enum: SubscriptionReason
    name: subscriptionReason
    optional: true
  - description: a group of friends
    name: friendGroup
    optional: true
    struct: StorySummaryFriendGroup
  - description: summary of blocking a user
    name: blocked
    optional: true
    struct: StorySummaryBlocked
  - description: summary of an action of a sheriff
    name: sheriff
    optional: true
    struct: StorySummarySheriff
  - description: additional descriptive text
    name: description
    optional: true
    type: string
  - array: true
    description: list of pages with number of clicks on each of them
    name: clicks
    optional: true
    struct: StorySummaryPageClicks
  name: StorySummaryData
- fields:
  - array: true
    description: list of the operations blocked
    enum: BlockedOperation
    name: operations
  - description: the period of blocking in seconds
    name: period
    optional: true
    type: number
  name: StorySummaryBlocked
- fields:
  - description: ID of the group of friends
    name: id
    optional: true
    type: string
  - description: title of the group of friends
    name: title
    optional: true
    type: string
  name: StorySummaryFriendGroup
- fields:
  - description: entry owner's name
    name: ownerName
    optional: true
    type: string
  - description: entry owner's full name
    name: ownerFullName
    optional: true
    type: string
  - description: entry owner's gender
    name: ownerGender
    optional: true
    type: string
  - description: entry heading
    name: heading
    optional: true
    type: string
  - description: list of sheriffs supervising the entry
    name: sheriffs
    optional: true
    type: string[]
  - array: true
    description: list of sheriff marks on the entry
    name: sheriffMarks
    optional: true
    struct: SheriffMark
  name: StorySummaryEntry
- fields:
  - description: node owner's name
    name: ownerName
    optional: true
    type: string
  - description: node owner's full name
    name: ownerFullName
    optional: true
    type: string
  - description: node owner's gender
    name: ownerGender
    optional: true
    type: string
  name: StorySummaryNode
- fields:
  - description: page heading, <code>null</code> for the blog itself
    name: heading
    optional: true
    type: string
  - description: page URL
    name: href
    type: string
  - description: number of clicks on the page
    name: clicks
    type: number
  name: StorySummaryPageClicks
- fields:
  - description: reaction owner's name
    name: ownerName
    optional: true
    type: string
  - description: reaction owner's full name
    name: ownerFullName
    optional: true
    type: string
  - description: reaction owner's gender
    name: ownerGender
    optional: true
    type: string
  - description: reaction code
    name: emoji
    optional: true
    type: number
  name: StorySummaryReaction
- fields:
  - description: name of the sheriff
    name: sheriffName
    type: string
  - description: ID of the sheriff's order
    name: orderId
    optional: true
    type: string
  - description: ID of the complaint, if any
    name: complaintId
    optional: true
    type: string
  name: StorySummarySheriff
- fields:
  - constraints:
    - notnull:
        error: subscriber.type.missing
    description: subscription type
    enum: SubscriptionType
    name: type
  - constraints:
    - other:
        description: is empty
        error: subscriber.feed-name.blank
    - length:
        error: subscriber.feed-name.wrong-size
        max: 63
    description: feed name, if the subscription type requires one
    name: feedName
    optional: true
    type: string
  - constraints:
    - other:
        description: is empty
        error: subscriber.posting-id.blank
    description: posting ID, if the subscription type requires one
    name: postingId
    optional: true
    type: string
  - description: timestamp of the latest known state of the object
    name: lastUpdatedAt
    optional: true
    type: number
  - constraints:
    - other:
        description: contain an incorrect principal
        error: subscriber.operations.wrong-principal
    description: the operations and the corresponding principals
    name: operations
    optional: true
    struct: SubscriberOperations
  name: SubscriberDescription
- fields:
  - description: subscriber ID
    name: id
    type: string
  - description: subscription type
    enum: SubscriptionType
    name: type
  - description: feed name, if the subscription type requires one
    name: feedName
    optional: true
    type: string
  - description: posting ID, if the subscription type requires one
    name: postingId
    optional: true
    type: string
  - description: name of the subscribed node
    name: nodeName
    type: string
  - description: information known about the subscribed node
    name: contact
    optional: true
    struct: ContactInfo
  - description: subscription creation timestamp
    name: createdAt
    type: number
  - description: the supported operations and the corresponding principals
    name: operations
    optional: true
    struct: SubscriberOperations
  - description: the supported operations and the corresponding principals as defined
      by the subscriber
    name: ownerOperations
    optional: true
    struct: SubscriberOperations
  - description: the operations and the corresponding principals that are overridden
      by the node administrator
    name: adminOperations
    optional: true
    struct: SubscriberOperations
  name: SubscriberInfo
- fields:
  - constraints:
    - other:
        description: contain an incorrect principal
        error: subscriber.operations.wrong-principal
    description: the supported operations and the corresponding principals
    name: operations
    optional: true
    struct: SubscriberOperations
  - constraints:
    - other:
        description: contain an incorrect principal
        error: subscriber.admin-operations.wrong-principal
    description: the operations and the corresponding principals that are overridden
      by the node administrator
    name: adminOperations
    optional: true
    struct: SubscriberOperations
  name: SubscriberOverride
- fields:
  - constraints:
    - notnull:
        error: subscription.type.missing
    description: subscription type
    enum: SubscriptionType
    name: type
  - constraints:
    - other:
        description: is empty
        error: subscription.feed-name.blank
    - length:
        error: subscription.feed-name.wrong-size
        max: 63
    description: the name of the feed on this node that receives notifications
    name: feedName
    optional: true
    type: string
  - constraints:
    - notblank:
        error: subscription.remote-node-name.blank
    - length:
        error: subscription.remote-node-name.wrong-size
        max: 63
    description: the name of the node this node is subscribed to
    name: remoteNodeName
    type: string
  - constraints:
    - length:
        error: subscription.remote-feed-name.wrong-size
        max: 63
    description: the name of the feed on the remote node, if the subscription type
      requires one
    name: remoteFeedName
    optional: true
    type: string
  - constraints:
    - length:
        error: subscription.remote-posting-id.wrong-size
        max: 40
    description: posting ID on the remote node, if the subscription type requires
      one
    name: remotePostingId
    optional: true
    type: string
  - description: subscription reason
    enum: SubscriptionReason
    name: reason
    optional: true
  - constraints:
    - other:
        description: contain an incorrect principal
        error: subscription.operations.wrong-principal
    description: the operations and the corresponding principals
    name: operations
    optional: true
    struct: SubscriptionOperations
  name: SubscriptionDescription
- fields:
  - description: subscription type
    enum: SubscriptionType
    name: type
    optional: true
  - array: true
    description: list of feeds
    name: feeds
    optional: true
    struct: RemoteFeed
  - array: true
    description: list of postings
    name: postings
    optional: true
    struct: RemotePosting
  name: SubscriptionFilter
- fields:
  - description: subscription ID
    name: id
    type: string
  - description: subscription type
    enum: SubscriptionType
    name: type
  - description: feed name on this node that receives notifications
    name: feedName
    optional: true
    type: string
  - description: name of the node this node is subscribed to
    name: remoteNodeName
    type: string
  - description: information known about the remote node
    name: contact
    optional: true
    struct: ContactInfo
  - description: feed name on the remote node, if the subscription type requires one
    name: remoteFeedName
    optional: true
    type: string
  - description: posting ID on the remote node, if the subscription type requires
      one
    name: remotePostingId
    optional: true
    type: string
  - description: subscription creation timestamp
    name: createdAt
    type: number
  - description: subscription reason
    enum: SubscriptionReason
    name: reason
  - description: the supported operations and the corresponding principals
    name: operations
    optional: true
    struct: SubscriptionOperations
  name: SubscriptionInfo
- fields:
  - constraints:
    - other:
        description: contain an incorrect principal
        error: subscription.operations.wrong-principal
    description: the supported operations and the corresponding principals
    name: operations
    optional: true
    struct: SubscriptionOperations
  name: SubscriptionOverride
- fields:
  - constraints:
    - notblank:
        error: credentials.login.blank
    name: login
    type: string
  - constraints:
    - notblank:
        error: credentials.password.blank
    name: password
    type: string
  - array: true
    description: 'a bit mask describing which permissions should be granted to the
      token; if not set, all permissions of the administrator are granted.

      '
    enum: Scope
    name: permissions
    optional: true
  - description: a user-readable name of the token
    name: name
    optional: true
    type: string
  name: TokenAttributes
- fields:
  - description: token ID (this is not the token, just an ID)
    name: id
    type: string
  - description: the token
    name: token
    type: string
  - description: a user-readable name of the token
    name: name
    optional: true
    type: string
  - array: true
    description: the list of permissions granted to the token
    enum: Scope
    js-default: '[]'
    name: permissions
    optional: true
  - description: a plugin the token belongs to; if set, only this plugin may use the
      token
    name: pluginName
    optional: true
    type: string
  - description: token creation timestamp
    name: createdAt
    type: number
  - description: timestamp of the end of the token's life
    name: deadline
    optional: true
    type: number
  - description: timestamp of the last time the token was used
    name: lastUsedAt
    optional: true
    type: number
  - description: name of the browser used by the latest user of the token
    name: lastUsedBrowser
    optional: true
    type: string
  - description: IP address of the latest user of the token
    name: lastUsedIp
    optional: true
    type: string
  name: TokenInfo
- fields:
  - description: a user-readable name of the token
    name: name
    optional: true
    type: string
  - array: true
    description: 'a bit mask describing which permissions should be granted to the
      token; if not set, the token permissions are left untouched

      '
    enum: Scope
    name: permissions
    optional: true
  name: TokenUpdate
- fields:
  - description: <code>true</code>, if the update is important, <code>false</code>
      (the default) otherwise
    name: important
    optional: true
    type: boolean
  - constraints:
    - length:
        error: update.description.wrong-size
        max: 128
    description: description of the update
    name: description
    optional: true
    type: string
  name: UpdateInfo
- fields:
  - description: name of the user list
    name: name
    type: string
  - description: number of items in the user list
    name: total
    type: number
  name: UserListInfo
- fields:
  - constraints:
    - notblank:
        error: user-list-item.node-name.blank
    - length:
        error: user-list-item.node-name.wrong-size
        max: 63
    description: the name of the node
    name: nodeName
    type: string
  name: UserListItemAttributes
- fields:
  - description: the name of the node
    name: nodeName
    type: string
  - description: the node addition timestamp - the real time when the node was added
      to the list
    name: createdAt
    type: number
  - description: moment of the node
    name: moment
    type: number
  name: UserListItemInfo
- fields:
  - description: the name of the list
    name: listName
    type: string
  - description: the slice contains all items before this moment, inclusive. May be
      the far future.
    name: before
    type: number
  - description: the slice contains all items after this moment, exclusive. May be
      the far past.
    name: after
    type: number
  - array: true
    description: the items
    name: items
    struct: UserListItemInfo
  - description: total number of items
    name: total
    type: number
  - description: number of items before this slice till the far past
    name: totalInPast
    type: number
  - description: number of items after this slice till the far future
    name: totalInFuture
    type: number
  name: UserListSliceInfo
- fields:
  - name: nodeName
    optional: true
    type: string
  - description: <code>true</code> if node name is about to be changed
    name: nodeNameChanging
    optional: true
    type: boolean
  - description: node owner's full name
    name: fullName
    optional: true
    type: string
  - description: node owner's gender
    name: gender
    optional: true
    type: string
  - description: node title
    name: title
    optional: true
    type: string
  - description: node owner's avatar
    name: avatar
    optional: true
    struct: AvatarImage
  - description: '<code>true</code> if the node is frozen due to inactivity, <code>false</code>
      (the default) otherwise

      '
    name: frozen
    optional: true
    type: boolean
  name: WhoAmI
