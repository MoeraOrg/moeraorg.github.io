enums:
- name: AskSubject
  values:
  - description: '"subscribe to me" - asking remote node to subscribe to this node

      '
    name: subscribe
  - description: '"add me to your friends" - asking remote node to add this node to
      friends

      '
    name: friend
- name: BlockedEntryOperation
  values:
  - description: add a comment
    name: addComment
  - description: add a reaction
    name: addReaction
- name: BlockedOperation
  values:
  - description: add reactions to entries on the node
    name: reaction
  - description: add comments to postings on the node
    name: comment
  - description: add postings to the node
    name: posting
  - description: be visible to the node
    name: visibility
  - description: be visible in stories added to the instants feed of the node
    name: instant
- name: BodyFormat
  values:
  - description: <code><a href="#Body">Body</a></code> structure
    name: message
  - description: an application-specific structure
    name: application
- name: DraftType
  values:
  - description: draft of a new posting
    name: new-posting
  - description: draft of an update to a posting
    name: posting-update
  - description: draft of a new comment
    name: new-comment
  - description: draft of an update to a comment
    name: comment-update
- name: OperationStatus
  values:
  - description: the operation is waiting to be sent to the naming server
    name: waiting
  - description: the operation was accepted by the naming server
    name: added
  - description: the naming server started to proceed the operation
    name: started
  - description: the operation completed successfully
    name: succeeded
  - description: the operation failed
    name: failed
  - description: the operation status is unknown
    name: unknown
- name: PrincipalFlag
  values:
  - description: null
    name: none
  - description: null
    name: private
  - description: null
    name: admin
  - description: null
    name: owner
  - description: null
    name: secret
  - description: null
    name: senior
  - description: null
    name: enigma
  - description: null
    name: major
  - description: null
    name: signed
  - description: null
    name: subscribed
  - description: null
    name: public
  - description: null
    name: friends
  - description: null
    name: unset
- name: PushContentType
  values:
  - description: a story was added to a feed
    name: story-added
  - description: a story was deleted from a feed
    name: story-deleted
  - description: feed status was updated
    name: feed-updated
- name: SettingType
  values:
  - description: boolean, may have value <code>true</code> or <code>false</code>
    name: bool
  - description: integer
    name: int
  - description: string
    name: string
  - description: string representation of a JSON structure
    name: json
  - description: "period of time, an non-negative integer followed by a single character\
      \ designating a measurement unit: <ul>\n  <li><code>s</code> - seconds;</li>\n\
      \  <li><code>m</code> - minutes;</li>\n  <li><code>h</code> - hours;</li>\n\
      \  <li><code>d</code> - days.</li>\n</ul>\n"
    name: Duration
  - description: a private cryptographic key
    name: PrivateKey
  - description: a public cryptographic key
    name: PublicKey
  - description: timestamp
    name: Timestamp
  - description: UUID
    name: UUID
  - description: <a href="access-controls.html#principals">principal</a>
    name: Principal
- name: SheriffComplainStatus
  values:
  - description: the group is just added
    name: posted
  - description: automatic preprocessing is done
    name: prepared
  - description: automatic preprocessing is failed
    name: prepare-failed
  - description: the entry the group is related to is not found
    name: not-found
  - description: the entry the group is related to is specified incorrectly
    name: invalid-target
  - description: the posting the group is related to is a copy of the original posting
    name: not-original
  - description: the entry the group is related to is not under supervision of the
      sheriff
    name: not-sheriff
  - description: the group is approved by the sheriff
    name: approved
  - description: the group is rejected by the sheriff
    name: rejected
- name: SheriffOrderCategory
  values:
  - description: hide the feed or the entry
    name: visibility
- name: SheriffOrderReason
  values:
  - description: violation of a law
    name: unlawful
  - description: defamatory content
    name: defamatory
  - description: contains a threat against a person
    name: threat
  - description: spam
    name: spam
  - description: fraudulent content
    name: scam
  - description: distribution of a malware
    name: malware
  - description: copyright infringement
    name: copyright
  - description: the author pretends to be someone else
    name: impersonating
  - description: violation of someone's privacy
    name: privacy
  - description: any other reason
    name: other
- name: SourceFormat
  values:
  - description: plain text with newlines and paragraphs delimited by empty line
    name: plain-text
  - description: HTML-formatted text, the node may allow only limited set of tags
    name: html
  - description: text in Markdown format
    name: markdown
  - description: application-specific format
    name: application
- name: StoryType
  values:
  - description: a remote node asked to add it to friends
    name: asked-to-friend
  - description: a remote node asked to subscribe to it
    name: asked-to-subscribe
  - description: a remote node has blocked the user globally
    name: blocked-user
  - description: a remote node has blocked the user in a posting
    name: blocked-user-in-posting
  - description: a comment was added under the user's posting
    name: comment-added
  - description: a positive reaction was added to a media attached to a comment
    name: comment-media-reaction-added-negative
  - description: a positive reaction was added to a media attached to a comment
    name: comment-media-reaction-added-positive
  - description: a failed attempt to add a reaction to a media attached to a comment
    name: comment-media-reaction-failed
  - description: a failed attempt to post a comment
    name: comment-post-task-failed
  - description: a negative reaction was added to the user's comment
    name: comment-reaction-added-negative
  - description: a positive reaction was added to the user's comment
    name: comment-reaction-added-positive
  - description: a failed attempt to post a reaction to a comment
    name: comment-reaction-task-failed
  - description: a failed attempt to update a comment
    name: comment-update-task-failed
  - description: a remote node has added the user to friends
    name: friend-added
  - description: a remote node has removed the user from friends
    name: friend-deleted
  - description: a remote group of friends, the user was a member of, has been deleted
    name: friend-group-deleted
  - description: the user was mentioned in a comment
    name: mention-comment
  - description: the user was mentioned in a posting on another node
    name: mention-posting
  - description: a posting was added; **stories of this type are used for feeds containing
      postings**
    name: posting-added
  - description: a negative reaction was added to a media attached to a posting
    name: posting-media-reaction-added-negative
  - description: a positive reaction was added to a media attached to a posting
    name: posting-media-reaction-added-positive
  - description: a failed attempt to add a reaction to a media attached to a posting
    name: posting-media-reaction-failed
  - description: a failed attempt to create a posting
    name: posting-post-task-failed
  - description: a failed attempt to post a reaction to a posting
    name: posting-reaction-task-failed
  - description: a failed attempt to subscribe to a posting
    name: posting-subscribe-task-failed
  - description: a failed attempt to update a posting
    name: posting-update-task-failed
  - description: a posting was updated
    name: posting-updated
  - description: a negative reaction was added to the user's posting
    name: reaction-added-negative
  - description: a positive reaction was added to the user's posting
    name: reaction-added-positive
  - description: a comment was added under a posting the user is subscribed to
    name: remote-comment-added
  - description: a reply was added to the user's comment
    name: reply-comment
  - description: a new complaint was received
    name: sheriff-complain-added
  - description: a decision was made on the user's complaint
    name: sheriff-complain-decided
  - description: user's entry was marked by a sheriff
    name: sheriff-marked
  - description: user's entry was unmarked by a sheriff
    name: sheriff-unmarked
  - description: another node subscribed to user's feed
    name: subscriber-added
  - description: another node unsubscribed from user's feed
    name: subscriber-deleted
  - description: a remote node has unblocked the user globally
    name: unblocked-user
  - description: a remote node has unblocked the user in a posting
    name: unblocked-user-in-posting
- name: SubscriptionReason
  values:
  - description: node owner asked to subscribe
    name: user
  - description: node name was mentioned
    name: mention
  - description: node owner commented the posting
    name: comment
- name: SubscriptionType
  values:
  - description: subscribe to new stories in the feed
    name: feed
  - description: subscribe to updates to the posting
    name: posting
  - description: subscribe to new comments to the posting
    name: posting-comments
  - description: subscribe to updates to the node profile
    name: profile
  - description: subscribe to updates to the user list (its name is passed in <code>feedName</code>
      field)
    name: user-list
- name: VerificationStatus
  values:
  - description: the verification is pending
    name: running
  - description: the signature is correct
    name: correct
  - description: the signature is incorrect
    name: incorrect
  - description: the verification cannot be performed due to an error
    name: error
objects:
- description: General-purpose methods.
  name: General
  requests:
  - auth: irrelevant
    description: Set node URL.
    function: node_url(url)
    params:
    - name: url
      type: str
  - auth: irrelevant
    description: Generic method for making node API requests.
    function: 'call(name, location, params=None, method=''GET'', body=None, body_file=None,
      body_file_type=None, auth=True, schema=None, bodies=False, src_bodies=False)

      '
    out:
      description: the decoded response
      type: Any
    params:
    - description: request name (for error messages)
      name: name
      type: str
    - description: request path
      name: location
      type: str
    - description: query parameters, mapping name to value, None values are skipped
      name: params
      optional: true
      type: Mapping[str, str | int | None]
    - description: 'request method (one of <code>''GET''</code>, <code>''POST''</code>,
        <code>''PUT''</code>, <code>''DELETE''</code>)

        '
      name: method
      optional: true
      type: str
    - description: request body
      name: body
      optional: true
      type: Structure | Sequence[Structure]
    - description: file to read the request body from
      name: body_file
      optional: true
      type: IO
    - description: content-type of the request body, when read from a file
      name: body_file_type
      optional: true
      type: str
    - description: <code>True</code> to authenticate the request, <code>False</code>
        otherwise
      name: auth
      optional: true
      type: bool
    - description: JSON schema to validate the response
      name: schema
      optional: true
      type: Any
    - description: '<code>True</code> to decode <code>Body</code> structures in the
        response, <code>False</code> otherwise

        '
      name: bodies
      optional: true
      type: bool
    - description: '<code>True</code> to encode <code>Body</code> structures in the
        request, <code>False</code> otherwise

        '
      name: src_bodies
      optional: true
      type: bool
- description: Methods related to authentication.
  name: Authentication
  requests:
  - auth: irrelevant
    description: Set root secret for authentication.
    function: root_secret(secret)
    params:
    - name: secret
      type: str
  - auth: irrelevant
    description: Set admin token for authentication.
    function: token(token)
    params:
    - name: token
      type: str
  - auth: irrelevant
    description: Set carte for authentication.
    function: carte(carte)
    params:
    - name: carte
      type: str
  - auth: irrelevant
    description: Set a source of cartes for authentication.
    function: carte_source(carte_source)
    params:
    - class: CarteSource
      name: carte_source
  - auth: irrelevant
    description: Select authentication method for the following requests.
    function: auth_method(auth_method)
    params:
    - class: NodeAuth
      name: auth_method
  - auth: irrelevant
    description: Switch off authentication for the following requests.
    function: no_auth()
  - auth: irrelevant
    description: Select carte authentication for the following requests.
    function: auth()
  - auth: irrelevant
    description: Select admin token authentication for the following requests.
    function: auth_admin()
  - auth: irrelevant
    description: Select root admin secret authentication for the following requests.
    function: auth_root_admin()
- description: Local registry of all activity in the form of reactions performed by
    the node.
  name: Activity Reactions
  requests:
  - auth: admin
    description: Get the list of all reactions performed by the node, filtered by
      some criteria.
    function: search_activity_reactions(filter)
    out:
      array: true
      struct: ActivityReactionInfo
    params:
    - name: filter
      struct: ActivityReactionFilter
- description: Asyncronous operations pending or just finished on the node.
  name: Asyncronous Operations
  requests:
  - auth: admin
    description: Get status of the asynchronous operation that performs verification
      of a remote posting signature.
    errors:
    - code: async-operation.not-found
      description: async operation with the given ID is not found
    function: get_remote_posting_verification_status(id)
    out:
      struct: RemotePostingVerificationInfo
    params:
    - description: asynchronous operation ID
      name: id
      type: str
  - auth: admin
    description: 'Get status of the asynchronous operation that performs verification
      of the signature of a reaction to a remote posting.

      '
    errors:
    - code: async-operation.not-found
      description: async operation with the given ID is not found
    function: get_remote_reaction_verification_status(id)
    out:
      struct: RemoteReactionVerificationInfo
    params:
    - description: asynchronous operation ID
      name: id
      type: str
- description: 'Avatars of the node''s owner. The list of avatars is ordered using
    ordinals that every avatar has. <br><br> Every avatar has a shape. It is stored
    and returned solely for client''s interpretation. The shape has no meaning for
    the node and does not affect the avatar image stored at the node.

    '
  name: Avatars
  requests:
  - description: Get the list of avatars in the ascending order of their ordinals.
    function: get_avatars()
    out:
      array: true
      struct: AvatarInfo
    params: []
  - auth: admin
    description: 'Create a new avatar from a public media file that exists on the
      node. New public media file is created for the avatar. If avatar''s ordinal
      is not provided in the input, the avatar is assigned an ordinal that is greater
      than ordinals of all existing avatars.

      '
    errors:
    - code: media.storage-error
      description: media file cannot be stored
    - code: avatar.media-unsupported
      description: the type of the source media file is not supported for avatars
    function: create_avatar(avatar)
    out:
      struct: AvatarInfo
    params:
    - name: avatar
      struct: AvatarAttributes
  - description: Get an individual avatar.
    errors:
    - code: avatar.not-found
      description: avatar is not found
    function: get_avatar(id)
    out:
      struct: AvatarInfo
    params:
    - description: avatar ID
      name: id
      type: str
  - auth: admin
    description: Delete an avatar.
    errors:
    - code: avatar.not-found
      description: avatar is not found
    function: delete_avatar(id)
    out:
      struct: Result
    params:
    - description: avatar ID
      name: id
      type: str
  - auth: admin
    description: 'Reorder avatars. Every avatar mentioned in the input is assigned
      an ordinal in ascending order as they appear in the input. Ordinals of avatars
      not mentioned in the input are not touched.

      '
    errors:
    - code: avatar.not-found
      description: avatar is not found
    function: reorder_avatars(order)
    out:
      array: true
      struct: AvatarOrdinal
    params:
    - name: order
      struct: AvatarsOrdered
- description: It is possible to block creation of some types of stories in the instants
    feed.
  name: Blocked Instants
  requests:
  - auth: admin
    description: 'Blocks creation of instants of the given story type, related to
      the given entry, optionally unblocking at the given time in the future.

      '
    errors:
    - code: entry.not-found
      description: entry is not found
    function: block_instant(instant)
    out:
      struct: BlockedInstantInfo
    params:
    - name: instant
      struct: BlockedInstantAttributes
  - auth: admin
    description: Get details about the given blocked instant.
    errors:
    - code: blocked-instant.not-found
      description: blocked instant is not found
    function: get_blocked_instant(id)
    out:
      struct: BlockedInstantInfo
    params:
    - description: ID of the blocked instant
      name: id
      type: str
  - auth: admin
    description: Unblock the given instant.
    errors:
    - code: blocked-instant.not-found
      description: blocked instant is not found
    function: unblock_instant(id)
    out:
      struct: Result
    params:
    - description: ID of the blocked instant
      name: id
      type: str
  - auth: admin
    description: Search blocked instants by the given criteria.
    function: search_blocked_instants(filter)
    out:
      array: true
      struct: BlockedInstantInfo
    params:
    - name: filter
      struct: BlockedInstantFilter
- description: 'It is possible to block particular nodes from performing some operations
    on this node, even if they are otherwise permitted to do so. It is also possible
    to mark some nodes to be invisible (in discussions, for example), the client should
    fetch the list of invisible nodes to perform filtering on the client side.

    '
  name: Blocked Users
  requests:
  - auth: admin
    description: 'Blocks the given node from performing the given operations, in a
      particular posting or globally, optionally unblocking at the given time in the
      future.

      '
    errors:
    - code: entry.not-found
      description: entry is not found
    function: block_user(user)
    out:
      struct: BlockedUserInfo
    params:
    - name: user
      struct: BlockedUserAttributes
  - auth: optional
    description: Get details about the given blocked user.
    errors:
    - code: blocked-user.not-found
      description: blocked user is not found
    function: get_blocked_user(id)
    out:
      struct: BlockedUserInfo
    params:
    - description: ID of the blocked user
      name: id
      type: str
  - auth: admin
    description: Unblock the given user.
    errors:
    - code: blocked-user.not-found
      description: blocked user is not found
    function: unblock_user(id)
    out:
      struct: Result
    params:
    - description: ID of the blocked user
      name: id
      type: str
  - auth: optional
    description: Search blocked users by the given criteria.
    function: search_blocked_users(filter)
    out:
      array: true
      struct: BlockedUserInfo
    params:
    - name: filter
      struct: BlockedUserFilter
  - auth: admin
    description: 'Get checksums of the information about the blocked users. This request
      may be used to quickly detect the changes in the blocked users list to update
      the cache on the client side.

      '
    function: get_blocked_users_checksums()
    out:
      struct: BlockedUsersChecksums
    params: []
- description: 'The node receives notifications from nodes that blocked it. This information
    is stored on the node and can be requested.

    '
  name: Blocked-by Users
  requests:
  - auth: optional
    description: Get details about the given node that blocked this node.
    errors:
    - code: blocked-by-user.not-found
      description: blocked-by user is not found
    function: get_blocked_by_user(id)
    out:
      struct: BlockedByUserInfo
    params:
    - description: ID of the blocked-by user
      name: id
      type: str
  - auth: optional
    description: Search nodes, that blocked this node, by the given criteria.
    function: search_blocked_by_users(filter)
    out:
      array: true
      struct: BlockedByUserInfo
    params:
    - name: filter
      struct: BlockedByUserFilter
- description: '<a href="authentication.html#carte">Cartes</a> - cryptographic tokens
    used to authenticate on any node besides the home node.

    '
  name: Cartes
  requests:
  - auth: admin
    description: 'Get a set of cartes that correspond to successive periods of time.
      Two sequences of cartes are returned: one with all permissions and another with
      `view-media` permission only. The node may decide to return less cartes than
      the given <code>limit</code>.

      '
    function: get_cartes(limit=None)
    out:
      struct: CarteSet
    params:
    - description: maximum number of sequential cartes returned
      name: limit
      optional: true
      type: int
- description: Comments to a posting.
  name: Comments
  requests:
  - auth: optional
    description: 'Get a slice of the list of comments, delimited by <code>before</code>
      or <code>after</code> moments (but not both) and the given <code>limit</code>.
      If neither <code>before</code> nor <code>after</code> are provided, the latest
      comments are returned. The node may decide to return less comments than the
      given <code>limit</code>. The stories are always sorted by moment, ascending.

      '
    errors:
    - code: posting.not-found
      description: there is no posting with the given ID
    - code: comments.before-after-exclusive
      description: <code>before</code> and <code>after</code> parameters are not allowed
        together
    - code: limit.invalid
      description: <code>limit</code> parameter has an invalid value
    function: get_comments_slice(posting_id, after=None, before=None, limit=None)
    out:
      struct: CommentsSliceInfo
    params:
    - description: ID of the posting
      name: posting_id
      type: str
    - description: filter comments posted strongly after this moment
      name: after
      optional: true
      type: int
    - description: filter comments posted at or before this moment
      name: before
      optional: true
      type: int
    - description: maximum number of comments returned
      name: limit
      optional: true
      type: int
  - auth: required or signature
    description: 'Create a comment from the given text and add it to the given posting.
      The comment owner must authenticate in some way. If the comment is not signed,
      it will be kept for a limited period of time and then erased. If authenticated
      as admin, the comment is signed by the node.

      '
    errors:
    - code: posting.not-found
      description: there is no posting with the given ID
    - code: posting.not-signed
      description: the posting is not signed, so it is impossible to add comments
        to it
    function: create_comment(posting_id, comment)
    out:
      struct: CommentCreated
    params:
    - description: ID of the posting
      name: posting_id
      type: str
    - name: comment
      struct: CommentText
  - auth: optional
    description: Get an individual comment.
    errors:
    - code: posting.not-found
      description: there is no posting with the given ID
    - code: comment.not-found
      description: there is no comment with the given ID
    - code: comment.wrong-posting
      description: the comment is not related to the given posting
    function: get_comment(posting_id, comment_id, with_source=False)
    out:
      struct: CommentInfo
    params:
    - description: ID of the posting
      name: posting_id
      type: str
    - description: ID of the comment
      name: comment_id
      type: str
    - description: include source text of the comment
      name: with_source
      optional: true
      type: bool
  - auth: optional
    description: 'Update operation overrides for all comments in the posting.

      '
    errors:
    - code: posting.not-found
      description: there is no posting with the given ID
    function: update_all_comments(posting_id, attributes)
    out:
      struct: Result
    params:
    - description: ID of the posting
      name: posting_id
      type: str
    - name: attributes
      struct: CommentMassAttributes
  - auth: required or signature
    description: 'Update the comment, creating a new revision of it. The text is processed
      just like in the <code>POST</code> request.

      '
    errors:
    - code: posting.not-found
      description: there is no posting with the given ID
    - code: comment.not-found
      description: there is no comment with the given ID
    - code: comment.wrong-posting
      description: the comment is not related to the given posting
    function: update_comment(posting_id, comment_id, comment)
    out:
      struct: CommentInfo
    params:
    - description: ID of the posting
      name: posting_id
      type: str
    - description: ID of the comment
      name: comment_id
      type: str
    - name: comment
      struct: CommentText
  - auth: required
    description: 'Delete the comment. The comment may not be purged from the database
      immediately, but preserved for some period of time to give a chance to restore
      it.

      '
    errors:
    - code: posting.not-found
      description: there is no posting with the given ID
    - code: comment.not-found
      description: there is no comment with the given ID
    - code: comment.wrong-posting
      description: the comment is not related to the given posting
    function: delete_comment(posting_id, comment_id)
    out:
      struct: CommentTotalInfo
    params:
    - description: ID of the posting
      name: posting_id
      type: str
    - description: ID of the comment
      name: comment_id
      type: str
  - auth: optional
    description: Get all postings linked to media attached to the given comment.
    errors:
    - code: posting.not-found
      description: there is no posting with the given ID
    - code: comment.not-found
      description: there is no comment with the given ID
    - code: comment.wrong-posting
      description: the comment is not related to the given posting
    function: get_postings_attached_to_comment(posting_id, comment_id)
    out:
      array: true
      struct: PostingInfo
    params:
    - description: ID of the posting
      name: posting_id
      type: str
    - description: ID of the comment
      name: comment_id
      type: str
- description: All revisions of the comment.
  name: Comment Revisions
  requests:
  - auth: optional
    description: Get all revisions of the comment.
    errors:
    - code: comment.not-found
      description: there is no comment with the given ID
    - code: comment.wrong-posting
      description: the comment is not related to the given posting
    function: get_comment_revisions(posting_id, comment_id)
    out:
      array: true
      struct: CommentRevisionInfo
    params:
    - description: ID of the posting
      name: posting_id
      type: str
    - description: ID of the comment
      name: comment_id
      type: str
  - auth: optional
    description: Get an individual revision of the comment.
    errors:
    - code: comment.not-found
      description: there is no comment with the given ID
    - code: comment.wrong-posting
      description: the comment is not related to the given posting
    - code: comment-revision.not-found
      description: there is no revision with the given ID
    function: get_comment_revision(posting_id, comment_id, id)
    out:
      struct: CommentRevisionInfo
    params:
    - description: ID of the posting
      name: posting_id
      type: str
    - description: ID of the comment
      name: comment_id
      type: str
    - description: ID of the revision
      name: id
      type: str
- description: Reactions ("Likes") - simple textless answers to a comment.
  name: Comment Reactions
  requests:
  - auth: required or signature
    description: 'Add a reaction to the given comment. The reaction owner must authenticate
      in some way. Only one reaction is allowed from each owner to a particular comment.
      If a reaction from the same owner to this comment already exists, it is overwritten.
      If the reaction is not signed, the reaction will be kept for a limited period
      of time and then erased (the previous reaction of the same owner will be restored,
      if any).

      '
    errors:
    - code: comment.not-found
      description: there is no comment with the given ID
    - code: comment.wrong-posting
      description: the comment is not related to the given posting
    - code: comment.not-signed
      description: cannot add a reaction to an unsigned comment
    - code: reaction.not-accepted
      description: the reaction is not acceptable
    function: create_comment_reaction(posting_id, comment_id, reaction)
    out:
      struct: ReactionCreated
    params:
    - description: ID of the posting
      name: posting_id
      type: str
    - description: ID of the comment
      name: comment_id
      type: str
    - name: reaction
      struct: ReactionDescription
  - auth: optional
    description: 'Update the reaction''s operations or set operations'' overrides.

      '
    errors:
    - code: posting.not-found
      description: there is no posting with the given ID
    - code: comment.not-found
      description: there is no comment with the given ID
    - code: comment.wrong-posting
      description: the comment is not related to the given posting
    function: update_comment_reaction(posting_id, comment_id, owner_name, reaction)
    out:
      struct: ReactionInfo
    params:
    - description: ID of the posting
      name: posting_id
      type: str
    - description: ID of the comment
      name: comment_id
      type: str
    - description: reaction owner node name
      name: owner_name
      type: str
    - name: reaction
      struct: ReactionOverride
  - auth: optional
    description: 'Get a slice of the list of reactions to the given comment, optionally
      filtered by reaction type, delimited by <code>before</code> moment and the given
      <code>limit</code>. If <code>before</code> is not provided, the latest reactions
      are returned. The node may decide to return less reactions than the given <code>limit</code>.
      The reactions are always sorted by moment, descending.

      '
    errors:
    - code: comment.not-found
      description: there is no comment with the given ID
    - code: comment.wrong-posting
      description: the comment is not related to the given posting
    - code: limit.invalid
      description: <code>limit</code> parameter has an invalid value
    function: get_comment_reactions_slice(posting_id, comment_id, negative=None, emoji=None,
      before=None, limit=None)
    out:
      struct: ReactionsSliceInfo
    params:
    - description: ID of the posting
      name: posting_id
      type: str
    - description: ID of the comment
      name: comment_id
      type: str
    - description: <code>True</code>, to filter negative reactions, <code>False</code>,
        to filter positive ones
      name: negative
      optional: true
      type: bool
    - description: filter by reaction code, usually interpreted by clients as emoji
        code point
      name: emoji
      optional: true
      type: int
    - description: filter reactions created at or before this moment
      name: before
      optional: true
      type: int
    - description: maximum number of reactions returned
      name: limit
      optional: true
      type: int
  - auth: optional
    description: 'Get the detailed information about the reaction of the given owner
      to the given comment. If no reaction with such owner exist, an empty structure
      with just <code>commentId</code> is returned.

      '
    errors:
    - code: comment.not-found
      description: there is no comment with the given ID
    - code: comment.wrong-posting
      description: the comment is not related to the given posting
    function: get_comment_reaction(posting_id, comment_id, owner_name)
    out:
      struct: ReactionInfo
    params:
    - description: ID of the posting
      name: posting_id
      type: str
    - description: ID of the comment
      name: comment_id
      type: str
    - description: reaction owner node name
      name: owner_name
      type: str
  - auth: admin
    description: Delete all reactions to the given comment.
    errors:
    - code: comment.not-found
      description: there is no comment with the given ID
    - code: comment.wrong-posting
      description: the comment is not related to the given posting
    function: delete_all_comment_reactions(posting_id, comment_id)
    out:
      struct: Result
    params:
    - description: ID of the posting
      name: posting_id
      type: str
    - description: ID of the comment
      name: comment_id
      type: str
  - auth: optional
    description: Delete the reaction of the given owner to the given comment.
    errors:
    - code: comment.not-found
      description: there is no comment with the given ID
    - code: comment.wrong-posting
      description: the comment is not related to the given posting
    function: delete_comment_reaction(posting_id, comment_id, owner_name)
    out:
      struct: ReactionTotalsInfo
    params:
    - description: ID of the posting
      name: posting_id
      type: str
    - description: ID of the comment
      name: comment_id
      type: str
    - description: reaction owner node name
      name: owner_name
      type: str
- description: Summary of reactions to a comment.
  name: Comment Reaction Totals
  requests:
  - auth: optional
    description: Get summary of reactions to the comment given.
    errors:
    - code: comment.not-found
      description: there is no comment with the given ID
    - code: comment.wrong-posting
      description: the comment is not related to the given posting
    function: get_comment_reaction_totals(posting_id, comment_id)
    out:
      struct: ReactionTotalsInfo
    params:
    - description: ID of the posting
      name: posting_id
      type: str
    - description: ID of the comment
      name: comment_id
      type: str
- description: Information about all nodes having a relationship with the node.
  name: Contacts
  requests:
  - auth: admin
    description: 'Search for contacts matching the search <code>query</code>. Every
      space-delimited word in the query must case-insensitively match a beginning
      of the contact''s node name or a beginning of any space-delimited word in the
      contact''s full name. The order of words is not significant. <br><br> The node
      may decide to return less contacts than the given <code>limit</code>. <br><br>
      The contacts are sorted by their <i>closeness</i> to the node, which is calculated
      from the number of reactions and comments and their age.

      '
    errors:
    - code: limit.invalid
      description: <code>limit</code> parameter has an invalid value
    function: get_contacts(query=None, limit=None)
    out:
      array: true
      struct: ContactInfo
    params:
    - description: the search query
      name: query
      optional: true
      type: str
    - description: maximum number of contacts returned
      name: limit
      optional: true
      type: int
- description: Credentials used to authenticate the administrator of the node.
  name: Credentials
  requests:
  - description: Check whether the credentials are initialized already.
    function: check_credentials()
    out:
      struct: CredentialsCreated
    params: []
  - description: 'Initialize credentials, if they are not set yet. Note that this
      operation can be executed without authentication, so this should be done as
      soon as possible after the node installation. Sign in is not allowed until the
      credentials are set.

      '
    errors:
    - code: credentials.already-created
      description: credentials are already created
    function: create_credentials(credentials)
    out:
      struct: Result
    params:
    - name: credentials
      struct: Credentials
  - description: 'Update credentials. Either old password or credentials reset token
      should be set in the input for the operation to succeed. Credentials reset token
      is not related to the authentication token and usually is sent to the user by
      E-mail.

      '
    errors:
    - code: credentials.login-incorrect
      description: login incorrect (the old password is wrong)
    - code: credentials.wrong-reset-token
      description: credentials reset token is wrong
    - code: credentials.reset-token-expired
      description: credentials reset token is expired
    function: update_credentials(credentials)
    out:
      struct: Result
    params:
    - name: credentials
      struct: CredentialsChange
  - auth: root admin
    description: Delete credentials.
    function: delete_credentials()
    out:
      struct: Result
    params: []
  - description: 'The node generates credentials reset token that is sent to the node
      admin by E-mail or using any other way that is defined for credentials recovery.
      This token then may be used to change the credentials without knowing the password.

      '
    errors:
    - code: credentials.email-not-set
      description: E-mail address is not set for the node
    function: reset_credentials()
    out:
      struct: EmailHint
    params: []
- description: 'All deleted postings, that are not purged from the database yet.

    '
  name: Deleted Postings
  requests:
  - auth: admin
    description: 'Get the list of deleted postings, page by page. The node may decide
      to use smaller page size than the given <code>limit</code>. The postings are
      always sorted by the deletion timestamp, descending.

      '
    errors:
    - code: page.invalid
      description: <code>page</code> parameter has an invalid value
    - code: limit.invalid
      description: <code>limit</code> parameter has an invalid value
    function: get_deleted_postings(page=None, limit=None)
    out:
      array: true
      struct: PostingInfo
    params:
    - description: page number, 0 by default
      name: page
      optional: true
      type: int
    - description: page size (maximum number of postings returned), the default is
        defined by the node
      name: limit
      optional: true
      type: int
  - auth: admin
    description: Get an individual deleted posting.
    errors:
    - code: posting.not-found
      description: there is no deleted posting with the given ID
    function: get_deleted_posting(id)
    out:
      struct: PostingInfo
    params:
    - description: ID of the posting
      name: id
      type: str
  - auth: admin
    description: 'Restore a posting. A new revision is created with the same content
      as in the latest revision.

      '
    errors:
    - code: posting.not-found
      description: there is no posting with the given ID
    function: restore_deleted_posting(id)
    out:
      struct: PostingInfo
    params:
    - description: ID of the posting
      name: id
      type: str
- description: 'All revisions of the deleted posting.

    '
  name: Deleted Posting Revisions
  requests:
  - auth: optional
    description: 'Get all revisions of the deleted posting, but not more than <code>limit</code>.
      The node may decide to return less revisions than the given <code>limit</code>.

      '
    errors:
    - code: posting.not-found
      description: there is no posting with the given ID
    function: get_delete_posting_revisions(posting_id, limit=None)
    out:
      array: true
      struct: PostingRevisionInfo
    params:
    - description: ID of the posting
      name: posting_id
      type: str
    - description: maximum number of revisions returned
      name: limit
      optional: true
      type: int
  - auth: optional
    description: Get an individual revision of the deleted posting.
    errors:
    - code: posting.not-found
      description: there is no posting with the given ID
    - code: posting-revision.not-found
      description: there is no revision with the given ID
    function: get_deleted_posting_revision(posting_id, id)
    out:
      struct: PostingRevisionInfo
    params:
    - description: ID of the posting
      name: posting_id
      type: str
    - description: ID of the revision
      name: id
      type: str
  - auth: admin
    description: 'Restore a posting at a particular revision. A new revision is created
      with the same content as in the given revision.

      '
    errors:
    - code: posting.not-found
      description: there is no posting with the given ID
    - code: posting-revision.not-found
      description: there is no revision with the given ID
    - code: posting-revision.already-current
      description: the given revision is already the current one
    function: restore_deleted_posting_revision(posting_id, id)
    out:
      struct: PostingRevisionInfo
    params:
    - description: ID of the posting
      name: posting_id
      type: str
    - description: ID of the revision
      name: id
      type: str
- description: 'One instance of Moera node software can serve several virtual nodes.
    These virtual nodes are called <i>domains</i> and distinguished by the hostname
    passed in the HTTP request. Each virtual node has <i>node ID</i>, it is used in
    the database to designate the data that belongs to a particular node. The hostname
    is mapped to the node ID when the request is processed, using the list of registered
    domains. If there is no domain with such a name, the special <code>_default_</code>
    domain is used.

    '
  name: Domains
  requests:
  - auth: root admin
    description: Get the list of registered domains.
    function: get_domains()
    out:
      array: true
      struct: DomainInfo
    params: []
  - auth: root admin or none
    description: 'Get information about the domain with the given hostname. If domain
      registration for this server is public, this request does not require authentication.

      '
    errors:
    - code: domain.not-found
      description: there is no domain with the given hostname
    function: get_domain(name)
    out:
      struct: DomainInfo
    params:
    - description: domain name
      name: name
      type: str
  - auth: root admin or none
    description: 'Create a new domain with the given hostname. If <code>nodeId</code>
      is not passed, it is generated automatically. If domain registration for this
      server is public, this request does not require authentication.

      '
    errors:
    - code: domain.already-exists
      description: a domain with the given hostname already exists
    - code: domain.node-id-used
      description: a domain with the given node ID already exists
    function: create_domain(domain)
    out:
      struct: DomainInfo
    params:
    - name: domain
      struct: DomainAttributes
  - auth: root admin
    description: 'Update the domain with the given hostname. If the new hostname is
      not passed, the old hostname is preserved. (Note that you cannot pass a new
      name for the default hostname, because it cannot be renamed and <code>_default_</code>
      is not a valid hostname. Skip this field if you want to update the default hostname.)
      If <code>nodeId</code> is not passed, it is generated automatically.

      '
    errors:
    - code: domain.not-found
      description: there is no domain with the given hostname
    - code: domain.cannot-rename-default
      description: cannot change the name of the default domain
    function: update_domain(name, domain)
    out:
      struct: DomainInfo
    params:
    - description: domain's hostname
      name: name
      type: str
    - name: domain
      struct: DomainAttributes
  - auth: root admin
    description: 'Delete the domain with the given hostname. This operation deletes
      the domain record only, the user''s data related to the domain is preserved.

      '
    errors:
    - code: domain.not-found
      description: there is no domain with the given hostname
    - code: domain.cannot-delete-default
      description: cannot delete the default domain
    function: delete_domain(name)
    out:
      struct: Result
    params:
    - description: domain name
      name: name
      type: str
  - description: 'Get an available domain name that is recommended for the given node
      name. The domain name is usually chosen to be close to the node name in English
      transcription. If domain registration for this server is not public, this request
      is not accessible.

      '
    function: is_domain_available(node_name)
    out:
      struct: DomainAvailable
    params:
    - description: node name
      name: node_name
      type: str
- description: 'All drafts. This is an universal interface for managing all types
    for drafts to all types of entries. Drafts of entries located on remote nodes
    are all stored on the home node.

    '
  name: Drafts
  requests:
  - auth: admin
    description: 'Get the list of drafts, page by page, filtered by the given criteria.
      The node may decide to use smaller page size than the given <code>limit</code>.
      The drafts are always sorted by the creation timestamp, descending.

      '
    errors:
    - code: page.invalid
      description: <code>page</code> parameter has an invalid value
    - code: limit.invalid
      description: <code>limit</code> parameter has an invalid value
    function: get_drafts(draft_type, node_name, posting_id=None, comment_id=None,
      page=None, limit=None)
    out:
      array: true
      struct: DraftInfo
    params:
    - description: type of the drafts
      enum: DraftType
      name: draft_type
    - description: name of the node the drafts are related to
      name: node_name
      type: str
    - description: ID of the posting, mandatory for all types, except <code>new-posting</code>
      name: posting_id
      optional: true
      type: str
    - description: ID of the comment, mandatory for <code>comment-update</code> type
      name: comment_id
      optional: true
      type: str
    - description: page number, 0 by default
      name: page
      optional: true
      type: int
    - description: page size (maximum number of postings returned), the default is
        defined by the node
      name: limit
      optional: true
      type: int
  - auth: admin
    description: Create a new draft from the text given.
    function: create_draft(draft)
    out:
      struct: DraftInfo
    params:
    - name: draft
      struct: DraftText
  - auth: admin
    description: Get an individual draft.
    errors:
    - code: draft.not-found
      description: there is no draft with the given ID
    function: get_draft(id)
    out:
      struct: DraftInfo
    params:
    - description: ID of the draft
      name: id
      type: str
  - auth: admin
    description: Update the draft.
    errors:
    - code: draft.not-found
      description: there is no draft with the given ID
    function: update_draft(id, draft)
    out:
      struct: DraftInfo
    params:
    - description: ID of the draft
      name: id
      type: str
    - name: draft
      struct: DraftText
  - auth: admin
    description: 'Delete the draft.

      '
    errors:
    - code: draft.not-found
      description: there is no draft with the given ID
    function: delete_draft(id)
    out:
      struct: Result
    params:
    - description: ID of the draft
      name: id
      type: str
- description: 'Information about features supported by the node.

    '
  name: Features
  requests:
  - auth: optional
    description: Get information about features supported by the node.
    function: get_features()
    out:
      struct: Features
    params: []
- description: "Feed is a set of stories collected for some purpose. The stories are\
    \ sorted by <a href=\"moment.html\">moment</a>, descending. </p><p> These are\
    \ the standard feeds that have special meaning: <ul>\n  <li><code>timeline</code>\
    \ - the main feed of publications;</li>\n  <li><code>instant</code> - the feed\
    \ of instant notifications;</li>\n  <li><code>news</code> - the main feed of publications\
    \ gathered from other nodes.</li>\n</ul>\n"
  name: Feeds
  requests:
  - auth: admin or none
    description: Get general information about all feeds accessible by client.
    function: get_feeds()
    out:
      array: true
      struct: FeedInfo
    params: []
  - auth: admin or none
    description: Get general information about the feed.
    errors:
    - code: feed.not-found
      description: there is no accessible feed with this name
    function: get_feed_general(feed_name)
    out:
      struct: FeedInfo
    params:
    - description: name of the feed
      name: feed_name
      type: str
  - auth: admin or none
    description: Get information about total number and number of non-read and non-viewed
      stories in the feed.
    errors:
    - code: feed.not-found
      description: there is no accessible feed with this name
    function: get_feed_status(feed_name)
    out:
      struct: FeedStatus
    params:
    - description: name of the feed
      name: feed_name
      type: str
  - auth: admin
    description: Update information about non-read and non-viewed stories in the feed.
    errors:
    - code: feed.not-found
      description: there is no accessible feed with this name
    function: update_feed_status(feed_name, change)
    out:
      struct: FeedStatus
    params:
    - description: name of the feed
      name: feed_name
      type: str
    - name: change
      struct: FeedStatusChange
  - auth: admin or none
    description: 'Get a slice of the feed, delimited by <code>before</code> or <code>after</code>
      moments (but not both) and the given <code>limit</code>. If neither <code>before</code>
      nor <code>after</code> are provided, the latest stories are returned. The node
      may decide to return less stories than the given <code>limit</code>. The stories
      are always sorted by moment, descending.

      '
    errors:
    - code: feed.not-found
      description: there is no accessible feed with this name
    - code: feed.before-after-exclusive
      description: <code>before</code> and <code>after</code> parameters are not allowed
        together
    - code: limit.invalid
      description: <code>limit</code> parameter has an invalid value
    function: get_feed_slice(feed_name, after=None, before=None, limit=None)
    out:
      struct: FeedSliceInfo
    params:
    - description: name of the feed
      name: feed_name
      type: str
    - description: filter stories posted strongly after this moment
      name: after
      optional: true
      type: int
    - description: filter stories posted at or before this moment
      name: before
      optional: true
      type: int
    - description: maximum number of stories returned
      name: limit
      optional: true
      type: int
- description: 'A friend may be member of one or more groups of friends. Each group
    as an ID and title. The group with a title <code>t:friends</code> is a standard
    group "Friends" that is created automatically for every node.

    '
  name: Friend Groups
  requests:
  - auth: optional
    description: Get the list of all groups of friends that exist on the node.
    function: get_friend_groups()
    out:
      array: true
      struct: FriendGroupInfo
    params: []
  - auth: optional
    description: Get the information about the group of friends.
    errors:
    - code: friend-group.not-found
      description: the group of friends is not found
    function: get_friend_group(id)
    out:
      struct: FriendGroupInfo
    params:
    - description: ID of the group of friends
      name: id
      type: str
  - auth: admin
    description: Create a group of friends.
    function: create_friend_group(friend_group)
    out:
      struct: FriendGroupInfo
    params:
    - name: friend_group
      struct: FriendGroupDescription
  - auth: admin
    description: Update the details of the group of friends.
    errors:
    - code: friend-group.not-found
      description: the group of friends is not found
    function: update_friend_group(id, friend_group)
    out:
      struct: FriendGroupInfo
    params:
    - description: ID of the group of friends
      name: id
      type: str
    - name: friend_group
      struct: FriendGroupDescription
  - auth: admin
    description: Delete the group of friends.
    errors:
    - code: friend-group.not-found
      description: the group of friends is not found
    function: delete_friend_group(id)
    out:
      struct: Result
    params:
    - description: ID of the group of friends
      name: id
      type: str
- description: 'Friends are nodes that may have special permissions on this node.
    It is possible to write "friends only" posts or to enable commenting to friends
    or to a group of friends only etc.

    '
  name: Friends
  requests:
  - auth: optional
    description: Get the list of all friends of the node or friends belonging to a
      particular group.
    errors:
    - code: friend-group.not-found
      description: the group of friends is not found
    function: get_friends(group_id=None)
    out:
      array: true
      struct: FriendInfo
    params:
    - description: ID of a group of friends
      name: group_id
      optional: true
      type: str
  - auth: optional
    description: Get the friendship information for the node given.
    function: get_friend(name)
    out:
      struct: FriendInfo
    params:
    - description: name of the node
      name: name
      type: str
  - auth: admin
    description: 'Update the friendship status of the nodes passed in the input. If
      some of the nodes passed in the input is not a member of some of the groups
      of friends listed for it, the node is added to them. If it is a member of some
      of the groups of friends that are not listed for it, the node is removed from
      them.

      '
    function: update_friends(friends)
    out:
      array: true
      struct: FriendInfo
    params:
    - array: true
      name: friends
      struct: FriendDescription
- description: 'The node receives notifications from nodes that added it to their
    friends. This information is stored on the node and can be requested.

    '
  name: Friend-ofs
  requests:
  - auth: optional
    description: Get the list of all nodes that added this node to their friends.
    function: get_friend_ofs()
    out:
      array: true
      struct: FriendOfInfo
    params: []
  - auth: optional
    description: Get the information for the node given, whether it has added this
      node to its friends.
    function: get_friend_of(name)
    out:
      struct: FriendOfInfo
    params:
    - description: name of the node
      name: name
      type: str
- description: 'Media files that are bound to a particular uploader and may be inaccessible
    to other clients. Private media files cannot be retrieved by their hash, only
    by their ID. The ID is unique to the client that uploaded the file and the node
    the file was uploaded to. A private media file may have a linked posting - it
    is used to store the media file description, reactions and comments. The linked
    posting is accessed as any other posting.

    '
  name: Media (private)
  requests:
  - auth: required
    description: 'Upload a new media file. Content of the file is passed in the request
      body

      '
    errors:
    - code: media.image-invalid
      description: media file is not a readable image
    - code: media.wrong-size
      description: media file is too large
    - code: media.storage-error
      description: media file cannot be stored
    function: upload_private_media(file, file_type)
    out:
      struct: PrivateMediaFileInfo
    params:
    - name: file
      type: IO
    - description: content-type of <code>file</code>
      name: file_type
      type: str
  - auth: optional
    description: 'Get media file content (returned in the response body).

      '
    errors:
    - code: media.not-found
      description: media file is not found
    function: get_private_media(id, width=None, download=None)
    out:
      type: blob
    params:
    - description: media file ID
      name: id
      type: str
    - description: 'preferred width of the media in pixels; if present, the node will
        try to return the smallest in size, but the best in quality variant of the
        media, according to the width provided

        '
      name: width
      optional: true
      type: int
    - description: 'if <code>True</code>, the node will add <code>Content-Disposition:
        attachment</code> header to the output

        '
      name: download
      optional: true
      type: bool
  - auth: optional
    description: 'Get media file details.

      '
    errors:
    - code: media.not-found
      description: media file is not found
    function: get_private_media_info(id)
    out:
      struct: PrivateMediaFileInfo
    params:
    - description: media file ID
      name: id
      type: str
  - auth: optional
    description: 'Get the list of all postings and comments the media file is attached
      to.

      '
    function: get_private_media_parent_entry(id)
    out:
      array: true
      struct: EntryInfo
    params:
    - description: media file ID
      name: id
      type: str
- description: 'Media files that should be accessible to any client. ID of a public
    media file is SHA-1 hash of its content.

    '
  name: Media (public)
  requests:
  - auth: required
    description: 'Upload a new media file. Content of the file is passed in the request
      body

      '
    errors:
    - code: media.image-invalid
      description: media file is not a readable image
    - code: media.wrong-size
      description: media file is too large
    - code: media.storage-error
      description: media file cannot be stored
    function: upload_public_media(file, file_type)
    out:
      struct: PublicMediaFileInfo
    params:
    - name: file
      type: IO
    - description: content-type of <code>file</code>
      name: file_type
      type: str
  - description: 'Get media file content (returned in the response body).

      '
    errors:
    - code: media.not-found
      description: media file is not found
    function: get_public_media(id, width=None, download=None)
    out:
      type: blob
    params:
    - description: media file ID
      name: id
      type: str
    - description: 'preferred width of the media in pixels; if present, the node will
        try to return the smallest in size, but the best in quality variant of the
        media, according to the width provided

        '
      name: width
      optional: true
      type: int
    - description: 'if <code>True</code>, the node will add <code>Content-Disposition:
        attachment</code> header to the output

        '
      name: download
      optional: true
      type: bool
  - description: 'Get media file details.

      '
    errors:
    - code: media.not-found
      description: media file is not found
    function: get_public_media_info(id)
    out:
      struct: PublicMediaFileInfo
    params:
    - description: media file ID
      name: id
      type: str
- description: 'The name of the node. <a href="/overview/naming.html">Read more</a>
    about it in the Architecture Overview section. Operations with the node name are
    performed asynchronously - need to poll the node periodically to get the current
    status of the operation. Only one operation with the node name may be performed
    by the node at any moment.

    '
  name: Node Name
  requests:
  - auth: admin or none
    description: 'Get the name of the node. Admin user receives also the current status
      of the latest operation with the node name.

      '
    function: get_node_name()
    out:
      struct: NodeNameInfo
    params: []
  - auth: admin
    description: 'Register a new name for the node. The corresponding signing key
      is generated automatically and stored at the node. The updating key is generated
      and returned in the encoded form and in the form of mnemonic (a sequence of
      English words) that need to be written down and stored securely to be able to
      perform further operations with the name.

      '
    errors:
    - code: naming.operation-pending
      description: another operation with the node name is pending currently
    function: create_node_name(name_to_register)
    out:
      struct: RegisteredNameSecret
    params:
    - name: name_to_register
      struct: NameToRegister
  - auth: admin
    description: 'Update the name of the node. May be used to assign an already-registered
      name to the node (the corresponding signing key is generated automatically and
      stored at the node), or to prolong the name. The secret or mnemonic of the updating
      key must be provided for this operation.

      '
    errors:
    - code: naming.operation-pending
      description: another operation with the node name is pending currently
    - code: registeredNameSecret.empty
      description: the registered name secret or mnemonic are not provided
    - code: node-name.name-absent
      description: the node name is not provided and not known by the node
    - code: node-name.<naming server error>
      description: 'various errors returned by naming server (<a href="/development/naming-api.html#error-codes">see
        the list</a>)

        '
    function: update_node_name(secret)
    out:
      struct: Result
    params:
    - name: secret
      struct: RegisteredNameSecret
  - auth: admin
    description: 'Delete all the information related to the node name (including the
      signing key) from the node. The name record on the naming server is not touched.

      '
    errors:
    - code: naming.operation-pending
      description: another operation with the node name is pending currently
    function: delete_node_name()
    out:
      struct: Result
    params: []
- description: Receiver of notifications from other nodes.
  name: Notifications
  requests:
  - auth: signature
    description: 'Accept a notification packet from other node. Notification packets
      older than 10 minutes are ignored. The sending node should update the packet
      timestamp and the signature and send the packet again. This mechanism prevents
      attackers from recording and resending old signed packets.

      '
    function: send_notification(packet)
    out:
      struct: Result
    params:
    - name: packet
      struct: NotificationPacket
- description: Information related to other nodes.
  name: People
  requests:
  - auth: optional
    description: Get general information about other nodes.
    function: get_people_general()
    out:
      struct: PeopleGeneralInfo
    params: []
- description: 'Plugins are web applications that integrate closely with the node
    or with the server as whole. Authenticating as root admin or node admin, they
    may perform operations, receive internal events, extend node API with new requests
    and add their own settings to the list of node settings. Every plugin registers
    its URL with the node, and the node uses this URL to call it when necessary.

    '
  name: Plugins
  requests:
  - auth: root admin or admin
    description: 'Register the plugin. If the plugin authenticates as root admin,
      the plugin is registered at the server level. If the plugin authenticates as
      node admin, the plugin is registered at the node level.

      '
    errors:
    - code: plugin.already-exists
      description: plugin with this name is already registered
    function: register_plugin(plugin)
    out:
      struct: PluginInfo
    params:
    - name: plugin
      struct: PluginDescription
  - auth: optional
    description: Get information about all plugins registered for the node and server.
    function: get_plugins()
    out:
      array: true
      struct: PluginInfo
    params: []
  - auth: optional
    description: Get information about the plugin.
    errors:
    - code: plugin.unknown
      description: unknown plugin
    function: get_plugin(plugin_name)
    out:
      struct: PluginInfo
    params:
    - description: name of the plugin
      name: plugin_name
      type: str
  - auth: root admin or admin
    description: Unregister the plugin.
    errors:
    - code: plugin.unknown
      description: unknown plugin
    function: unregister_plugin(plugin_name)
    out:
      struct: Result
    params:
    - description: name of the plugin
      name: plugin_name
      type: str
- description: 'All postings. Each posting may contain one or more revisions, a new
    revision is created every time the posting is updated. The latest revision is
    the current one, the previous ones are marked as deleted.

    '
  name: Postings
  requests:
  - auth: required or signature
    description: 'Create a new posting from the text given and publish it in the given
      feeds (if any). The heading and the preview of the posting are created automatically,
      if needed. The posting owner must authenticate in some way. If the posting is
      not signed, it will be kept for a limited period of time and then erased. If
      authenticated as admin, the posting is signed by the node.

      '
    function: create_posting(posting)
    out:
      struct: PostingInfo
    params:
    - name: posting
      struct: PostingText
  - auth: required or signature
    description: 'Update the posting, creating a new revision of it. The text is processed
      just like in the <code>POST</code> request.

      '
    errors:
    - code: posting.not-found
      description: there is no posting with the given ID
    - code: posting.not-original
      description: updating a non-original posting is not allowed
    function: update_posting(id, posting)
    out:
      struct: PostingInfo
    params:
    - description: ID of the posting
      name: id
      type: str
    - name: posting
      struct: PostingText
  - auth: optional
    description: Get an individual posting.
    errors:
    - code: posting.not-found
      description: there is no posting with the given ID
    function: get_posting(id, with_source=False)
    out:
      struct: PostingInfo
    params:
    - description: ID of the posting
      name: id
      type: str
    - description: include source text of the posting
      name: with_source
      optional: true
      type: bool
  - auth: optional
    description: 'Delete the posting. The posting may not be purged from the database
      immediately, but preserved for some period of time to give a chance to restore
      it.

      '
    errors:
    - code: posting.not-found
      description: there is no posting with the given ID
    function: delete_posting(id)
    out:
      struct: Result
    params:
    - description: ID of the posting
      name: id
      type: str
  - auth: optional
    description: Get all postings linked to media attached to the given posting.
    errors:
    - code: posting.not-found
      description: there is no posting with the given ID
    function: get_postings_attached_to_posting(id)
    out:
      array: true
      struct: PostingInfo
    params:
    - description: ID of the posting
      name: id
      type: str
- description: All revisions of the posting.
  name: Posting Revisions
  requests:
  - auth: optional
    description: 'Get all revisions of the posting, but not more than <code>limit</code>.
      The node may decide to return less revisions than the given <code>limit</code>.

      '
    errors:
    - code: posting.not-found
      description: there is no posting with the given ID
    function: get_posting_revisions(posting_id, limit=None)
    out:
      array: true
      struct: PostingRevisionInfo
    params:
    - description: ID of the posting
      name: posting_id
      type: str
    - description: maximum number of revisions returned
      name: limit
      optional: true
      type: int
  - auth: optional
    description: Get an individual revision of the posting.
    errors:
    - code: posting.not-found
      description: there is no posting with the given ID
    - code: posting-revision.not-found
      description: there is no revision with the given ID
    function: get_posting_revision(posting_id, id)
    out:
      struct: PostingRevisionInfo
    params:
    - description: ID of the posting
      name: posting_id
      type: str
    - description: ID of the revision
      name: id
      type: str
  - auth: admin
    description: 'Restore a revision of the posting. A new revision is created with
      the same content as in the given revision.

      '
    errors:
    - code: posting.not-found
      description: there is no posting with the given ID
    - code: posting-revision.not-found
      description: there is no revision with the given ID
    - code: posting-revision.already-current
      description: the given revision is already the current one
    function: restore_posting_revision(posting_id, id)
    out:
      struct: PostingRevisionInfo
    params:
    - description: ID of the posting
      name: posting_id
      type: str
    - description: ID of the revision
      name: id
      type: str
- description: Reactions ("Likes") - simple textless answers to a posting.
  name: Posting Reactions
  requests:
  - auth: required or signature
    description: 'Add a reaction to the given posting. The reaction owner must authenticate
      in some way. Only one reaction is allowed from each owner to a particular posting.
      If a reaction from the same owner to this posting already exists, it is overwritten.
      If the reaction is not signed, the reaction will be kept for a limited period
      of time and then erased (the previous reaction of the same owner will be restored,
      if any).

      '
    errors:
    - code: posting.not-found
      description: there is no posting with the given ID
    - code: posting.not-signed
      description: the posting is not signed, so it is impossible to add reactions
        to it
    - code: reaction.not-accepted
      description: the reaction is not acceptable
    function: create_posting_reaction(posting_id, reaction)
    out:
      struct: ReactionCreated
    params:
    - description: ID of the posting
      name: posting_id
      type: str
    - name: reaction
      struct: ReactionDescription
  - auth: optional
    description: 'Get a slice of the list of reactions to the given posting, optionally
      filtered by reaction type, delimited by <code>before</code> moment and the given
      <code>limit</code>. If <code>before</code> is not provided, the latest reactions
      are returned. The node may decide to return less reactions than the given <code>limit</code>.
      The reactions are always sorted by moment, descending.

      '
    errors:
    - code: posting.not-found
      description: there is no posting with the given ID
    - code: limit.invalid
      description: <code>limit</code> parameter has an invalid value
    function: get_posting_reactions_slice(posting_id, negative=None, emoji=None, before=None,
      limit=None)
    out:
      struct: ReactionsSliceInfo
    params:
    - description: ID of the posting
      name: posting_id
      type: str
    - description: <code>True</code>, to filter negative reactions, <code>False</code>,
        to filter positive ones
      name: negative
      optional: true
      type: bool
    - description: filter by reaction code, usually interpreted by clients as emoji
        code point
      name: emoji
      optional: true
      type: int
    - description: filter reactions created at or before this moment
      name: before
      optional: true
      type: int
    - description: maximum number of reactions returned
      name: limit
      optional: true
      type: int
  - auth: optional
    description: 'Update the reaction''s operations or set operations'' overrides.

      '
    errors:
    - code: posting.not-found
      description: there is no posting with the given ID
    function: update_posting_reaction(posting_id, owner_name, reaction)
    out:
      struct: ReactionInfo
    params:
    - description: ID of the posting
      name: posting_id
      type: str
    - description: reaction owner node name
      name: owner_name
      type: str
    - name: reaction
      struct: ReactionOverride
  - auth: optional
    description: 'Get the detailed information about the reaction of the given owner
      to the given posting. If no reaction with such owner exist, an empty structure
      with just <code>postingId</code> is returned.

      '
    errors:
    - code: posting.not-found
      description: there is no posting with the given ID
    function: get_posting_reaction(posting_id, owner_name)
    out:
      struct: ReactionInfo
    params:
    - description: ID of the posting
      name: posting_id
      type: str
    - description: reaction owner node name
      name: owner_name
      type: str
  - auth: optional
    description: Delete all reactions to the given posting.
    errors:
    - code: posting.not-found
      description: there is no posting with the given ID
    function: delete_all_posting_reactions(posting_id)
    out:
      struct: Result
    params:
    - description: ID of the posting
      name: posting_id
      type: str
  - auth: optional
    description: Delete the reaction of the given owner to the given posting.
    errors:
    - code: posting.not-found
      description: there is no posting with the given ID
    function: delete_posting_reaction(posting_id, owner_name)
    out:
      struct: ReactionTotalsInfo
    params:
    - description: ID of the posting
      name: posting_id
      type: str
    - description: reaction owner node name
      name: owner_name
      type: str
  - auth: optional
    description: 'Search reactions by criteria provided. Both reaction owner and at
      least one posting ID should be provided to search, otherwise an empty list is
      returned.

      '
    function: search_posting_reactions(filter)
    out:
      array: true
      struct: ReactionInfo
    params:
    - name: filter
      struct: ReactionsFilter
- description: Summary of reactions to a posting.
  name: Posting Reaction Totals
  requests:
  - auth: optional
    description: Get summary of reactions to the posting given.
    errors:
    - code: posting.not-found
      description: there is no posting with the given ID
    function: get_posting_reaction_totals(posting_id)
    out:
      struct: ReactionTotalsInfo
    params:
    - description: ID of the posting
      name: posting_id
      type: str
  - auth: optional
    description: 'Search summaries of reactions by criteria provided. At least one
      posting ID should be provided to search, otherwise an empty list is returned.

      '
    function: search_posting_reaction_totals(filter)
    out:
      array: true
      struct: ReactionTotalsInfo
    params:
    - name: filter
      struct: ReactionTotalsFilter
- description: The profile - the detailed information about the node's owner, node's
    purpose etc.
  name: Profile
  requests:
  - auth: optional
    description: Get the profile.
    function: get_profile(with_source=False)
    out:
      struct: ProfileInfo
    params:
    - description: include source text of the bio
      name: with_source
      optional: true
      type: bool
  - auth: admin
    description: 'Update the profile. Fields that are not set in the request body
      are left intact. Fields that are set to an empty value are reset to their defaults.

      '
    function: update_profile(profile)
    out:
      struct: ProfileInfo
    params:
    - name: profile
      struct: ProfileAttributes
- description: Communication with the provider (owner of the server).
  name: Provider
  requests:
  - auth: admin
    description: Get the current status of the request to delete the node.
    function: get_delete_node_request_status()
    out:
      struct: DeleteNodeStatus
    params: []
  - auth: admin
    description: Send a request to the provider to delete the node.
    function: send_delete_node_request(delete_node_text)
    out:
      struct: DeleteNodeStatus
    params:
    - name: delete_node_text
      struct: DeleteNodeText
  - auth: admin
    description: Cancel the request to delete the node.
    function: cancel_delete_node_request()
    out:
      struct: DeleteNodeStatus
    params: []
- description: Proxy, that may be used by web clients to workaround CORS restrictions
    of browsers
  name: Proxy
  requests:
  - auth: admin
    description: Open the URL passed in the parameters and pass to the client the
      media file returned by the server.
    errors:
    - code: proxy.request-failed
      description: HTTP request failed
    - code: proxy.resource-not-found
      description: resource is not found
    - code: proxy.resource-not-media
      description: resource is not a media file
    - code: proxy.error-status
      description: HTTP request returned an error status
    - code: proxy.url.invalid
      description: the URL is not valid
    function: proxy_media(url)
    out:
      type: blob
    params:
    - description: ''
      name: url
      type: str
  - auth: admin
    description: 'Parse the page located at the URL and return the title, the description
      and the picture that may be used to build a preview of the page.

      '
    errors:
    - code: proxy.resource-not-found
      description: resource is not found
    function: proxy_link_preview(url)
    out:
      struct: LinkPreviewInfo
    params:
    - description: ''
      name: url
      type: str
- description: 'SSE channels for delivering push notifications from the home node.
    When a client opens an SSE connection for the first time, an individual push notifications
    channel for this client is created (every client must generate a unique random
    identifier for its channel). After that, push notifications are stacked for this
    channel and the client should poll the channel periodically (or keep it open constantly)
    to receive them. If the client does not poll the channel for a long time, the
    channel is deleted.

    '
  name: Push Notifications
  requests: []
- description: 'The node may send requests to other nodes asking to subscribe to it,
    to add it to friends etc.

    '
  name: Remote Ask
  requests:
  - auth: admin
    description: Send a request to the remote node.
    function: ask_remote_node(node_name, details)
    out:
      struct: Result
    params:
    - description: name of the remote node
      name: node_name
      type: str
    - name: details
      struct: AskDescription
- description: Comments to postings located on other nodes.
  name: Remote Comments
  requests:
  - auth: admin
    description: Add a comment to the posting on the remote node and register it in
      the registry at the local node.
    function: create_remote_comment(node_name, posting_id, comment)
    out:
      struct: Result
    params:
    - description: name of the remote node
      name: node_name
      type: str
    - description: ID of the posting on the remote node
      name: posting_id
      type: str
    - name: comment
      struct: CommentSourceText
  - auth: admin
    description: Update a comment to the posting on the remote node.
    function: update_remote_comment(node_name, posting_id, comment_id, comment)
    out:
      struct: Result
    params:
    - description: name of the remote node
      name: node_name
      type: str
    - description: ID of the posting on the remote node
      name: posting_id
      type: str
    - description: ID of the comment on the remote node
      name: comment_id
      type: str
    - name: comment
      struct: CommentSourceText
  - auth: admin
    description: Delete a comment from the registry of all comments at the local node.
    function: delete_remote_comment(node_name, posting_id, comment_id)
    out:
      struct: Result
    params:
    - description: name of the remote node
      name: node_name
      type: str
    - description: ID of the posting on the remote node
      name: posting_id
      type: str
    - description: ID of the comment on the remote node
      name: comment_id
      type: str
  - auth: admin
    description: Verify the signature of the given comment to the posting on the remote
      node.
    function: verify_remote_comment(node_name, posting_id, comment_id)
    out:
      struct: AsyncOperationCreated
    params:
    - description: name of the remote node
      name: node_name
      type: str
    - description: ID of the posting on the remote node
      name: posting_id
      type: str
    - description: ID of the comment on the remote node
      name: comment_id
      type: str
- description: Reactions to comments located on other nodes.
  name: Remote Comment Reactions
  requests:
  - auth: admin
    description: Add a reaction to the comment on the remote node and register it
      in the registry at the local node.
    function: create_remote_comment_reaction(node_name, posting_id, comment_id, reaction)
    out:
      struct: Result
    params:
    - description: name of the remote node
      name: node_name
      type: str
    - description: ID of the posting on the remote node
      name: posting_id
      type: str
    - description: ID of the comment on the remote node
      name: comment_id
      type: str
    - name: reaction
      struct: ReactionAttributes
  - auth: admin
    description: Delete a reaction from the registry of all reactions at the local
      node.
    function: delete_remote_comment_reaction(node_name, posting_id, comment_id)
    out:
      struct: Result
    params:
    - description: name of the remote node
      name: node_name
      type: str
    - description: ID of the posting on the remote node
      name: posting_id
      type: str
    - description: ID of the comment on the remote node
      name: comment_id
      type: str
  - auth: admin
    description: Verify the signature of the reaction of the given owner to the comment
      on the remote node.
    function: verify_remote_comment_reaction(node_name, posting_id, comment_id, owner_name)
    out:
      struct: AsyncOperationCreated
    params:
    - description: name of the remote node
      name: node_name
      type: str
    - description: ID of the posting on the remote node
      name: posting_id
      type: str
    - description: ID of the comment on the remote node
      name: comment_id
      type: str
    - description: reaction owner node name
      name: owner_name
      type: str
- description: Postings located on other nodes.
  name: Remote Postings
  requests:
  - auth: admin
    description: Add a posting to the remote node and register it in the registry
      at the local node.
    function: create_remote_posting(node_name, posting)
    out:
      struct: Result
    params:
    - description: name of the remote node
      name: node_name
      type: str
    - name: posting
      struct: PostingSourceText
  - auth: admin
    description: Update a posting on the remote node.
    function: update_remote_posting(node_name, posting_id, posting)
    out:
      struct: Result
    params:
    - description: name of the remote node
      name: node_name
      type: str
    - description: ID of the posting on the remote node
      name: posting_id
      type: str
    - name: posting
      struct: PostingSourceText
  - auth: admin
    description: Delete a posting from the registry of all remote postings at the
      local node.
    function: delete_remote_posting(node_name, posting_id)
    out:
      struct: Result
    params:
    - description: name of the remote node
      name: node_name
      type: str
    - description: ID of the posting on the remote node
      name: posting_id
      type: str
  - auth: admin
    description: Verify the signature of the given posting.
    function: verify_remote_posting(node_name, id)
    out:
      struct: AsyncOperationCreated
    params:
    - description: name of the remote node
      name: node_name
      type: str
    - description: ID of the posting on the remote node
      name: id
      type: str
  - auth: admin
    description: Verify the signature of the given revision of a posting.
    function: verify_remote_posting_revision(node_name, id, revision_id)
    out:
      struct: AsyncOperationCreated
    params:
    - description: name of the remote node
      name: node_name
      type: str
    - description: ID of the posting on the remote node
      name: id
      type: str
    - description: ID of the posting revision
      name: revision_id
      type: str
- description: Reactions to postings located on other nodes.
  name: Remote Posting Reactions
  requests:
  - auth: admin
    description: Add a reaction to the posting on the remote node and register it
      in the registry at the local node.
    function: create_remote_posting_reaction(node_name, posting_id, reaction)
    out:
      struct: Result
    params:
    - description: name of the remote node
      name: node_name
      type: str
    - description: ID of the posting on the remote node
      name: posting_id
      type: str
    - name: reaction
      struct: ReactionAttributes
  - auth: admin
    description: Delete a reaction from the registry of all reactions at the local
      node.
    function: delete_remote_posting_reaction(node_name, posting_id)
    out:
      struct: Result
    params:
    - description: name of the remote node
      name: node_name
      type: str
    - description: ID of the posting on the remote node
      name: posting_id
      type: str
  - auth: admin
    description: Verify the signature of the reaction of the given owner to the posting
      on the remote node.
    function: verify_remote_posting_reaction(node_name, posting_id, owner_name)
    out:
      struct: AsyncOperationCreated
    params:
    - description: name of the remote node
      name: node_name
      type: str
    - description: ID of the posting on the remote node
      name: posting_id
      type: str
    - description: reaction owner node name
      name: owner_name
      type: str
- description: 'Sheriff API to send orders to remote nodes. Add orders are stored
    on the sheriff''s node and may be requested by anybody.

    '
  name: Remote Sheriff Orders
  requests:
  - auth: admin
    description: Sign and send the order to the remote node and store it in the registry
      at the local node.
    function: create_remote_sheriff_order(node_name, sheriff_order)
    out:
      struct: Result
    params:
    - description: name of the remote node
      name: node_name
      type: str
    - name: sheriff_order
      struct: SheriffOrderAttributes
  - description: Get the details of the given sheriff's order
    errors:
    - code: sheriff-order.not-found
      description: sheriff's order is not found
    - code: sheriff-order.wrong-node
      description: the sheriff's order is related to a different node
    function: get_remote_sheriff_order(node_name, id)
    out:
      struct: SheriffOrderInfo
    params:
    - description: name of the remote node
      name: node_name
      type: str
    - description: ID of the order
      name: id
      type: str
- description: 'Settings - the node and client settings. The node settings affect
    the node behavior. Only those settings are accepted that are known by the node,
    and their values are validated before saving. The node settings metadata can be
    obtained by request. The client settings are saved without validation and their
    metadata is built into the client. All client settings must have names starting
    with <code>client.</code> to distinguish them from the node ones. By convention,
    the client name is added to the prefix (<code>client.&lt;client name>.</code>)
    to be able to store settings of several different clients at the same time.

    '
  name: Settings
  requests:
  - auth: admin or root admin
    description: Update the given settings. If the input contains node settings, they
      are validated and the first validation error is returned, if any. The update
      is always performed as whole - if there is an error saving any one of the settings
      in the input, none of them are updated. <br><br> If one of the settings to be
      updated is privileged, <i>root secret</i> authentication is required. If one
      of the settings to be updated is non-privileged, <i>admin</i> authentication
      is required.
    errors:
    - code: setting.deserialization-failed
      description: setting value deserialization failed
    - code: setting.cannot-convert
      description: cannot convert value to the setting type
    - code: setting.invalid-value
      description: invalid value for the setting
    - code: setting.internal
      description: cannot set value of an internal setting
    - code: setting.unknown
      description: unknown setting
    function: update_settings(settings)
    out:
      struct: Result
    params:
    - array: true
      name: settings
      struct: SettingInfo
  - auth: admin
    description: Get all client settings, sorted by name.
    function: get_client_settings(prefix=None)
    out:
      array: true
      struct: SettingInfo
    params:
    - description: 'filter settings whose names start with the given prefix, case-sensitive
        (<code>client.</code> prefix must be included)

        '
      name: prefix
      optional: true
      type: str
  - auth: admin
    description: 'Get all node settings, sorted by name. If a setting has not changed
      its value from the default, it is omitted.

      '
    function: get_node_settings(prefix=None)
    out:
      array: true
      struct: SettingInfo
    params:
    - description: filter settings whose names start with the given prefix, case-sensitive
      name: prefix
      optional: true
      type: str
  - auth: admin
    description: Get all node settings metadata, sorted by name.
    function: get_node_settings_metadata(prefix=None)
    out:
      array: true
      struct: SettingMetaInfo
    params:
    - description: filter settings whose names start with the given prefix, case-sensitive
      name: prefix
      optional: true
      type: str
  - auth: root admin
    description: Update node settings metadata, overriding built-in defaults.
    errors:
    - code: setting.deserialization-failed
      description: setting value deserialization failed
    - code: setting.cannot-convert
      description: cannot convert value to the setting type
    - code: setting.invalid-value
      description: invalid value for the setting
    - code: setting.internal
      description: cannot set value of an internal setting
    - code: setting.unknown
      description: unknown setting
    - code: setting.plugin
      description: plugin setting metadata cannot be modified
    function: update_node_settings_metadata(metadata)
    out:
      struct: Result
    params:
    - array: true
      name: metadata
      struct: SettingMetaAttributes
- description: 'Similar complaints sent to the sheriff are grouped together and the
    sheriff makes decisions on a group as whole. <a href="/overview/supervision.html">Read
    more</a> about sheriff supervision in the Architecture Overview section.

    '
  name: Sheriff Complaint Groups
  requests:
  - description: 'Get a slice of the list of groups of complaints, optionally filtered
      by status, delimited by <code>before</code> or <code>after</code> moment and
      the given <code>limit</code>. If neither <code>before</code> nor <code>after</code>
      are provided, the latest groups are returned. The node may decide to return
      less groups than the given <code>limit</code>. The groups are always sorted
      by moment, descending.

      '
    errors:
    - code: sheriff-complain-groups.before-after-exclusive
      description: before and after parameters are mutually exclusive
    function: get_sheriff_complaint_groups_slice(after=None, before=None, limit=None,
      status=None)
    out:
      struct: SheriffComplainGroupsSliceInfo
    params:
    - description: filter groups created strongly after this moment
      name: after
      optional: true
      type: int
    - description: filter groups created at or before this moment
      name: before
      optional: true
      type: int
    - description: maximum number of groups returned
      name: limit
      optional: true
      type: int
    - description: filter groups by status
      enum: SheriffComplainStatus
      name: status
      optional: true
  - description: Get details of the given group of complaints.
    errors:
    - code: sheriff-complain-group.not-found
      name: the group of complaints is not found
    function: get_sheriff_complaint_group(id)
    out:
      struct: SheriffComplainGroupInfo
    params:
    - description: ID of the group of complaints
      name: id
      type: str
  - description: Get complaints included into the given group of complaints.
    errors:
    - code: sheriff-complain-group.not-found
      name: the group of complaints is not found
    function: get_sheriff_complaints_by_group(id)
    out:
      array: true
      struct: SheriffComplainInfo
    params:
    - description: ID of the group of complaints
      name: id
      type: str
  - auth: admin
    description: Make decision on the given group of complaints.
    errors:
    - code: sheriff-complain-group.not-found
      name: the group of complaints is not found
    function: update_sheriff_complaint_group(id, decision)
    out:
      struct: SheriffComplainGroupInfo
    params:
    - description: ID of the group of complaints
      name: id
      type: str
    - name: decision
      struct: SheriffComplainDecisionText
- description: 'Complaints are sent to the sheriff via sheriff''s node. <a href="/overview/supervision.html">Read
    more</a> about sheriff supervision in the Architecture Overview section.

    '
  name: Sheriff Complaints
  requests:
  - auth: required
    description: Send a complaint to the sheriff.
    function: create_sheriff_complaint(complaint)
    out:
      struct: SheriffComplainInfo
    params:
    - name: complaint
      struct: SheriffComplainText
- description: 'Orders sent by a sheriff to the node. The node must obey the orders
    if it accepted supervision by the sheriff. <a href="/overview/supervision.html">Read
    more</a> about sheriff supervision in the Architecture Overview section.

    '
  name: Sheriff Orders
  requests:
  - auth: signature
    description: Receive and execute the sheriff's order.
    errors:
    - code: sheriff-order.wrong-feed
      description: the posting is not included into the designated feed
    - code: posting.not-found
      description: posting is not found
    - code: posting.not-signed
      description: posting is not signed
    - code: comment.not-found
      description: comment is not found
    - code: comment.wrong-posting
      description: comment is located under a different posting
    function: create_sheriff_order(sheriff_order)
    out:
      struct: Result
    params:
    - name: sheriff_order
      struct: SheriffOrderDetails
- description: 'All stories. Each story describes something happening in Moera, stories
    are building blocks for feeds. All stories have the same structure, but the meaning
    of fields depends on the story type. A story may reference a posting, a remote
    object, etc. Some feeds may not allow some types of stories.

    '
  name: Stories
  requests:
  - auth: optional
    description: Get an individual story.
    errors:
    - code: story.not-found
      description: there is no story with the given ID
    function: get_story(id)
    out:
      struct: StoryInfo
    params:
    - description: ID of the story
      name: id
      type: str
  - auth: admin
    description: 'Update the story.

      '
    errors:
    - code: story.not-found
      description: there is no story with the given ID
    function: update_story(id, story)
    out:
      struct: StoryInfo
    params:
    - description: ID of the story
      name: id
      type: str
    - name: story
      struct: StoryAttributes
- description: 'All nodes that have subscribed to notifications from this node.

    '
  name: Subscribers
  requests:
  - auth: optional
    description: Get the list of all subscribers, optionally filtered by some criteria.
    function: get_subscribers(node_name=None, type=None, feed_name=None, entry_id=None)
    out:
      array: true
      struct: SubscriberInfo
    params:
    - description: filter by subscribed node name
      name: node_name
      optional: true
      type: str
    - description: filter by subscription type
      enum: SubscriptionType
      name: type
      optional: true
    - description: filter by name of the feed subscribed to
      name: feed_name
      optional: true
      type: str
    - description: filter by ID of the entry subscribed to
      name: entry_id
      optional: true
      type: str
  - auth: required
    description: Subscribe to a particular group of notifications.
    function: create_subscriber(subscriber)
    out:
      struct: SubscriberInfo
    params:
    - name: subscriber
      struct: SubscriberDescription
  - auth: optional
    description: Get an individual subscriber.
    errors:
    - code: subscriber.not-found
      description: there is no subscriber with the given ID
    function: get_subscriber(id)
    out:
      struct: SubscriberInfo
    params:
    - description: ID of the subscriber
      name: id
      type: str
  - auth: required
    description: 'Update the subscriber''s operations or set operations'' overrides.

      '
    errors:
    - code: subscriber.not-found
      description: there is no subscriber with the given ID
    function: update_subscriber(id, subscriber)
    out:
      struct: SubscriberInfo
    params:
    - description: ID of the subscriber
      name: id
      type: str
    - name: subscriber
      struct: SubscriberOverride
  - auth: optional
    description: Delete the subscriber and return the updated information about the
      node that was subscribed.
    errors:
    - code: subscriber.not-found
      description: there is no subscriber with the given ID
    function: delete_subscriber(id)
    out:
      struct: ContactInfo
    params:
    - description: ID of the subscriber
      name: id
      type: str
- description: 'All nodes that send notifications to this node.

    '
  name: Subscriptions
  requests:
  - auth: optional
    description: Get the list of all subscriptions, optionally filtered by some criteria.
    function: get_subscriptions(node_name=None, type=None)
    out:
      array: true
      struct: SubscriptionInfo
    params:
    - description: filter by node name
      name: node_name
      optional: true
      type: str
    - description: filter by subscription type
      enum: SubscriptionType
      name: type
      optional: true
  - auth: admin
    description: Register a subscription to notifications from a particular node.
    errors:
    - code: subscription.already-exists
      description: an identical subscription already exists
    function: create_subscription(subscription)
    out:
      struct: SubscriptionInfo
    params:
    - name: subscription
      struct: SubscriptionDescription
  - auth: required
    description: 'Update the subscription''s operations or set operations'' overrides.

      '
    errors:
    - code: subscription.not-found
      description: there is no subscription with the given ID
    function: update_subscription(id, subscription)
    out:
      struct: SubscriptionInfo
    params:
    - description: ID of the subscription
      name: id
      type: str
    - name: subscription
      struct: SubscriptionOverride
  - auth: admin
    description: Delete the subscription and return the updated information about
      the node that was subscribed to.
    errors:
    - code: subscription.not-found
      description: there is no subscription with the given parameters.
    function: delete_subscription(id)
    out:
      struct: ContactInfo
    params:
    - description: ID of the subscription
      name: id
      type: str
  - auth: optional
    description: Search for subscriptions by the given criteria.
    errors:
    - code: subscription.filter.incomplete
      description: the filter should contain at least one feed or posting
    function: search_subscriptions(filter)
    out:
      array: true
      struct: SubscriptionInfo
    params:
    - name: filter
      struct: SubscriptionFilter
- description: 'The authentication token. <a href="authentication.html">Read more</a>
    about token-based authentication.

    '
  name: Tokens
  requests:
  - auth: admin
    description: Get the list of all existing tokens.
    function: get_tokens()
    out:
      array: true
      struct: TokenInfo
    params: []
  - description: Sign in and create a token.
    errors:
    - code: credentials.not-created
      description: credentials are not created yet
    - code: credentials.login-incorrect
      description: login or password is incorrect
    function: create_token(token)
    out:
      struct: TokenInfo
    params:
    - name: token
      struct: TokenAttributes
  - auth: admin
    description: Get information about the token.
    function: get_token_info(id)
    out:
      struct: TokenInfo
    params:
    - description: ID of the token
      name: id
      type: str
  - auth: admin
    description: Update the name of the token.
    function: update_token(id, token)
    out:
      struct: TokenInfo
    params:
    - description: ID of the token
      name: id
      type: str
    - name: token
      struct: TokenName
  - auth: admin
    description: Delete the token.
    function: delete_token(id)
    out:
      struct: Result
    params:
    - description: ID of the token
      name: id
      type: str
- description: 'Any node may keep lists of users, and all other nodes can read these
    lists, search in them and subscribe to them to receive notifications about changes.
    The lists may be used, for example, to fight spam or to create decentralized communities.
    The sheriff uses such a list to inform all nodes that some specific user violates
    the rules too often, and because of that all his comments should be marked by
    the sheriff''s mark automatically.

    '
  name: User Lists
  requests:
  - description: Get the general information about the user list given.
    function: get_user_list_general(name)
    out:
      struct: UserListInfo
    params:
    - description: the name of the list
      name: name
      type: str
  - description: 'Get a slice of the user list, delimited by <code>before</code> or
      <code>after</code> moment and the given <code>limit</code>. If neither <code>before</code>
      nor <code>after</code> are provided, the latest items are returned. The node
      may decide to return less items than the given <code>limit</code>. The items
      are always sorted by moment, descending.

      '
    errors:
    - code: user-list-items.before-after-exclusive
      description: before and after parameters are mutually exclusive
    function: get_user_list_slice(name, after=None, before=None, limit=None)
    out:
      struct: UserListSliceInfo
    params:
    - description: the name of the list
      name: name
      type: str
    - description: filter items created strongly after this moment
      name: after
      optional: true
      type: int
    - description: filter items created at or before this moment
      name: before
      optional: true
      type: int
    - description: maximum number of items returned
      name: limit
      optional: true
      type: int
  - description: Get the information from the user list about the node given.
    errors:
    - code: user-list-item.not-found
      description: user list item is not found
    function: get_user_list_item(name, node_name)
    out:
      struct: UserListItemInfo
    params:
    - description: the name of the list
      name: name
      type: str
    - description: the node name to get information about
      name: node_name
      type: str
  - auth: admin
    description: Add a node to the user list.
    errors:
    - code: user-list-item.already-exists
      description: node is in the user list already
    function: create_user_list_item(name, item)
    out:
      struct: UserListItemInfo
    params:
    - description: the name of the list
      name: name
      type: str
    - name: item
      struct: UserListItemAttributes
  - auth: admin
    description: Delete a node from the user list
    errors:
    - code: user-list-item.not-found
      description: user list item is not found
    function: delete_user_list_item(name, node_name)
    out:
      struct: Result
    params:
    - description: the name of the list
      name: name
      type: str
    - description: the node name to delete
      name: node_name
      type: str
- description: Brief information about the node.
  name: Who Am I
  requests:
  - description: Get brief information about the node.
    function: who_am_i()
    out:
      struct: WhoAmI
    params: []
operations:
- fields:
  - default: public
    description: view the comment
    name: view
  - default: owner
    description: edit the comment
    name: edit
  - default: private
    description: delete the comment
    name: delete
  - default: public
    description: view the comment's reactions
    name: view_reactions
  - default: public
    description: view the comment's negative reactions
    name: view_negative_reactions
  - default: public
    description: view the number of the comment's reactions
    name: view_reaction_totals
  - default: public
    description: view the number of the comment's negative reactions
    name: view_negative_reaction_totals
  - default: public
    description: view the relative number of different types of the comment's reactions
    name: view_reaction_ratios
  - default: public
    description: view the relative number of different types of the comment's negative
      reactions
    name: view_negative_reaction_ratios
  - default: signed
    description: add a reaction to the comment
    name: add_reaction
  - default: signed
    description: add a negative reaction to the comment
    name: add_negative_reaction
  name: CommentOperations
- fields:
  - default: public
    description: see the subscriber information
    name: view_feed_subscriber
  - default: public
    description: see the subscription information
    name: view_feed_subscription
  - default: public
    description: see the friend information
    name: view_friend
  - default: public
    description: see the friend-of information (this operation can be modified by
      admin only)
    name: view_friend_of
  - default: public
    description: see the blocking information (this operation can be modified by admin
      only)
    name: view_block
  - default: public
    description: see the blocked-by information (this operation can be modified by
      admin only)
    name: view_block_by
  name: ContactOperations
- fields:
  - default: null
    description: add stories to the feed
    name: add
  name: FeedOperations
- fields:
  - default: public
    description: view the membership of the node in the group of friends
    name: view
  name: FriendOperations
- fields:
  - default: public
    description: view the group of friends
    name: view
  name: FriendGroupOperations
- fields:
  - default: null
    description: any modification of the node name, prolonging it etc.
    name: manage
  name: NodeNameOperations
- fields:
  - default: public
    description: view the list of subscribers
    name: view_subscribers
  - default: public
    description: view the list of subscriptions
    name: view_subscriptions
  - default: public
    description: view the list of friends
    name: view_friends
  - default: public
    description: view the list of those who added this node to friends
    name: view_friend_ofs
  - default: public
    description: view the list of blocked nodes
    name: view_blocked
  - default: admin
    description: view the list of those who blocked this node
    name: view_blocked_by
  - default: public
    description: view the number of subscribers
    name: view_subscribers_total
  - default: public
    description: view the number of subscriptions
    name: view_subscriptions_total
  - default: public
    description: view the number of friends
    name: view_friends_total
  - default: public
    description: view the number of those who added this node to friends
    name: view_friend_ofs_total
  name: PeopleOperations
- fields:
  - default: public
    description: view the posting
    name: view
  - default: owner
    description: edit the posting
    name: edit
  - default: private
    description: delete the posting
    name: delete
  - default: public
    description: view the posting's comments
    name: view_comments
  - default: signed
    description: add a comment to the posting
    name: add_comment
  - default: owner
    description: override the permissions of the posting's comments
    name: override_comment
  - default: public
    description: view the posting's reactions
    name: view_reactions
  - default: public
    description: view the posting's negative reactions
    name: view_negative_reactions
  - default: public
    description: view the number of the posting's reactions
    name: view_reaction_totals
  - default: public
    description: view the number of the posting's negative reactions
    name: view_negative_reaction_totals
  - default: public
    description: view the relative number of different types of the posting's reactions
    name: view_reaction_ratios
  - default: public
    description: view the relative number of different types of the posting's negative
      reactions
    name: view_negative_reaction_ratios
  - default: signed
    description: add a reaction to the posting
    name: add_reaction
  - default: signed
    description: add a negative reaction to the posting
    name: add_negative_reaction
  - default: owner
    description: override the permissions of the posting's reactions
    name: override_reaction
  - default: owner
    description: override the permissions of the posting's comment's reactions
    name: override_comment_reaction
  name: PostingOperations
- fields:
  - default: public
    description: view the media file
    name: view
  name: PrivateMediaFileOperations
- fields:
  - default: null
    description: change the profile
    name: edit
  - default: null
    description: view the e-mail address in the profile
    name: view_email
  name: ProfileOperations
- fields:
  - default: public
    description: view the reaction
    name: view
  - default: private
    description: delete the reaction
    name: delete
  name: ReactionOperations
- fields:
  - default: admin
    description: update the story
    name: edit
  - default: admin
    description: delete the story
    name: delete
  name: StoryOperations
- fields:
  - default: public
    description: see the subscriber
    name: view
  - default: private
    description: delete the subscriber (this operation cannot be modified or overridden)
    name: delete
  name: SubscriberOperations
- fields:
  - default: public
    description: see the subscription
    name: view
  - default: admin
    description: delete the subscription (this operation cannot be modified or overridden)
    name: delete
  name: SubscriptionOperations
structures:
- fields:
  - description: 'comma-separated list of codes of the positive reactions that are
      accepted; a code may be prefixed by <code>0x</code> to designate hexadecimal
      number and <code>+</code> to designate a recommended reaction

      '
    name: positive
    type: str
  - description: 'comma-separated list of codes of the negative reactions that are
      accepted (the format is the same as above)

      '
    name: negative
    type: str
  name: AcceptedReactions
- fields:
  - array: true
    description: include only reactions to remote postings from this list
    name: postings
    optional: true
    struct: RemotePosting
  name: ActivityReactionFilter
- fields:
  - description: name of the remote node
    name: remote_node_name
    type: str
  - description: full name of the remote node
    name: remote_full_name
    optional: true
    type: str
  - description: avatar of the remote node
    name: remote_avatar
    optional: true
    struct: AvatarImage
  - description: ID of the posting on the remote node
    name: remote_posting_id
    type: str
  - description: <code>True</code>, if the reaction is negative, <code>False</code>,
      if positive
    name: negative
    type: bool
  - description: reaction code, usually interpreted by clients as emoji code point
    name: emoji
    type: int
  - description: reaction creation timestamp - the real time when the reaction was
      created
    name: created_at
    type: Timestamp
  name: ActivityReactionInfo
- errors:
  - code: askDescription.friendGroupId.blank
    description: friend group ID is empty
  - code: askDescription.friendGroupId.wrong-size
    description: friend group ID is too long
  - code: askDescription.message.wrong-size
    description: message is too long
  fields:
  - description: request subject
    enum: AskSubject
    name: subject
  - description: 'if the request is to add this node to friends, this field contains
      ID of the corresponding group of friends on the remote node

      '
    name: friend_group_id
    optional: true
    type: str
  - description: message to the node admin
    name: message
    optional: true
    type: str
  name: AskDescription
- fields:
  - description: ID of the asynchronous operation that was created
    name: id
    type: str
  name: AsyncOperationCreated
- errors:
  - code: avatarAttributes.mediaId.blank
    description: media ID is not set
  - code: avatarAttributes.mediaId.not-found
    description: the source media is not found
  - code: avatarAttributes.clipX.out-of-range
    description: clipping area left side is out of the image bounds
  - code: avatarAttributes.clipY.out-of-range
    description: clipping area top side is out of the image bounds
  - code: avatarAttributes.clipSize.out-of-range
    description: clipping area size is out of range (usually too small)
  - code: avatarAttributes.avatarSize.out-of-range
    description: avatar size is out of range (usually too small)
  fields:
  - description: ID of the public media file used as a source image
    name: media_id
    type: str
  - description: x coordinate of the top-left corner of the clipping square
    name: clip_x
    type: int
  - description: y coordinate of the top-left corner of the clipping square
    name: clip_y
    type: int
  - description: size of the clipping square
    name: clip_size
    type: int
  - description: size of the avatar to be created
    name: avatar_size
    type: int
  - description: rotation angle of the source image
    name: rotate
    type: float
  - description: shape of the avatar
    name: shape
    optional: true
    type: str
  - description: ordinal of the avatar
    name: ordinal
    optional: true
    type: int
  name: AvatarAttributes
- fields:
  - description: ID of the public media file used as an avatar image
    name: media_id
    type: str
  - description: shape of the avatar
    name: shape
    type: str
  - description: 'if set to <code>True</code>, the node will ignore the absence of
      the media file referenced in <code>mediaId</code> field (empty avatar will be
      used in this case); if set to <code>False</code> or absent, the node will return
      an error, if the media file referenced in <code>mediaId</code> field is absent

      '
    name: optional
    optional: true
    type: bool
  name: AvatarDescription
- fields:
  - description: ID of the media file
    name: media_id
    type: str
  - description: 'virtual location of the media file, relative to the <code>/media</code>
      <a href="virtual-pages.html">virtual page</a>

      '
    name: path
    type: str
  - description: width of the media in pixels (<code>None</code>, if the media file
      is not an image/video)
    name: width
    optional: true
    type: int
  - description: height of the media in pixels (<code>None</code>, if the media file
      is not an image/video)
    name: height
    optional: true
    type: int
  - description: shape of the avatar
    name: shape
    optional: true
    type: str
  name: AvatarImage
- fields:
  - description: ID of the avatar
    name: id
    type: str
  - description: ID of the media file
    name: media_id
    type: str
  - description: 'virtual location of the media file, relative to the <code>/media</code>
      <a href="virtual-pages.html">virtual page</a>

      '
    name: path
    type: str
  - description: width of the media in pixels (<code>None</code>, if the media file
      is not an image/video)
    name: width
    optional: true
    type: int
  - description: height of the media in pixels (<code>None</code>, if the media file
      is not an image/video)
    name: height
    optional: true
    type: int
  - description: shape of the avatar
    name: shape
    optional: true
    type: str
  - description: ordinal of the avatar
    name: ordinal
    type: int
  name: AvatarInfo
- fields:
  - description: ID of the avatar
    name: id
    type: str
  - description: ordinal of the avatar
    name: ordinal
    type: int
  name: AvatarOrdinal
- fields:
  - description: IDs of avatars
    name: ids
    type: List[str]
  name: AvatarsOrdered
- fields:
  - array: true
    description: operations that are blocked
    enum: BlockedOperation
    name: blocked_operations
    optional: true
  - array: true
    description: the postings or whole nodes, where the node is blocked
    name: postings
    optional: true
    struct: RemotePostingOrNode
  - description: 'if set to <code>True</code>, only the blockings that strictly fit
      the criteria are returned; otherwise global blockings are returned even if the
      search is limited to a particular posting

      '
    name: strict
    optional: true
    type: bool
  name: BlockedByUserFilter
- fields:
  - name: id
    type: str
  - description: operation that is blocked
    enum: BlockedOperation
    name: blocked_operation
  - description: information known about the blocking node
    name: contact
    optional: true
    struct: ContactInfo
  - description: name of the blocking node
    name: node_name
    type: str
  - description: 'ID of the posting, where the node is blocked; <code>None</code>
      or absent, if the node is blocked globally

      '
    name: posting_id
    optional: true
    type: str
  - description: blocking timestamp - the real time when the node was blocked
    name: created_at
    type: Timestamp
  - description: 'unblocking timestamp - the real time when the node will be unblocked;
      <code>None</code> or absent, if the node is blocked permanently

      '
    name: deadline
    optional: true
    type: Timestamp
  - description: reason of blocking
    name: reason
    optional: true
    type: str
  name: BlockedByUserInfo
- errors:
  - code: blockedInstantAttributes.storyType.blank
    description: story type is not set
  fields:
  - description: type of the story
    enum: StoryType
    name: story_type
  - description: ID of the local entry the blocked story should be related to
    name: entry_id
    optional: true
    type: str
  - description: node name of the remote posting the blocked story should be related
      to
    name: remote_node_name
    optional: true
    type: str
  - description: ID of the remote posting the blocked story should be related to
    name: remote_posting_id
    optional: true
    type: str
  - description: owner name of the remote object the blocked story should be related
      to
    name: remote_owner_name
    optional: true
    type: str
  - description: 'unblocking timestamp - the real time when the story will be unblocked;
      <code>None</code> or absent, if the story is blocked permanently

      '
    name: deadline
    optional: true
    type: Timestamp
  name: BlockedInstantAttributes
- fields:
  - description: type of the story
    enum: StoryType
    name: story_type
  - description: ID of the local entry the blocked story should be related to
    name: entry_id
    optional: true
    type: str
  - description: node name of the remote posting the blocked story should be related
      to
    name: remote_node_name
    optional: true
    type: str
  - description: ID of the remote posting the blocked story should be related to
    name: remote_posting_id
    optional: true
    type: str
  - description: owner name of the remote object the blocked story should be related
      to
    name: remote_owner_name
    optional: true
    type: str
  name: BlockedInstantFilter
- fields:
  - name: id
    type: str
  - description: type of the story
    enum: StoryType
    name: story_type
  - description: ID of the local entry the blocked story should be related to
    name: entry_id
    optional: true
    type: str
  - description: node name of the remote posting the blocked story should be related
      to
    name: remote_node_name
    optional: true
    type: str
  - description: ID of the remote posting the blocked story should be related to
    name: remote_posting_id
    optional: true
    type: str
  - description: owner name of the remote object the blocked story should be related
      to
    name: remote_owner_name
    optional: true
    type: str
  - description: blocking timestamp - the real time when the story was blocked
    name: created_at
    type: Timestamp
  - description: 'unblocking timestamp - the real time when the story will be unblocked;
      <code>None</code> or absent, if the story is blocked permanently

      '
    name: deadline
    optional: true
    type: Timestamp
  name: BlockedInstantInfo
- fields:
  - name: id
    type: str
  - description: type of the story
    enum: StoryType
    name: story_type
  - description: owner name of the remote object the blocked story should be related
      to
    name: remote_owner_name
    optional: true
    type: str
  - description: 'unblocking timestamp - the real time when the story will be unblocked;
      <code>None</code> or absent, if the story is blocked permanently

      '
    name: deadline
    optional: true
    type: Timestamp
  name: BlockedPostingInstantInfo
- errors:
  - code: blockedUserAttributes.blockedOperation.blank
    description: blocked operation is not set
  - code: blockedUserAttributes.reasonSrc.wrong-size
    description: reason is too long
  fields:
  - description: operation that is to be blocked
    enum: BlockedOperation
    name: blocked_operation
  - description: name of the blocked node
    name: node_name
    type: str
  - description: 'ID of the local entry, where the node is blocked; <code>None</code>
      or absent, if the node is blocked globally

      '
    name: entry_id
    optional: true
    type: str
  - description: 'node name of the remote posting, where the node is blocked; <code>None</code>
      or absent, if the node is blocked globally

      '
    name: entry_node_name
    optional: true
    type: str
  - description: 'ID of the remote posting, where the node is blocked; <code>None</code>
      or absent, if the node is blocked globally

      '
    name: entry_posting_id
    optional: true
    type: str
  - description: 'unblocking timestamp - the real time when the node will be unblocked;
      <code>None</code> or absent, if the node is blocked permanently

      '
    name: deadline
    optional: true
    type: Timestamp
  - description: source text of the reason of blocking
    name: reason_src
    optional: true
    type: str
  - description: 'format of the source text of the reason of blocking, the list of
      available formats is returned in <code><a href="#PostingFeatures">PostingFeatures</a></code>

      '
    enum: SourceFormat
    name: reason_src_format
    optional: true
  name: BlockedUserAttributes
- fields:
  - array: true
    description: operations that are blocked
    enum: BlockedOperation
    name: blocked_operations
    optional: true
  - description: name of the blocked node
    name: node_name
    optional: true
    type: str
  - description: 'ID of the local entry, where the node is blocked; <code>None</code>
      or absent, if the node is blocked globally

      '
    name: entry_id
    optional: true
    type: str
  - description: 'node name of the remote posting, where the node is blocked; <code>None</code>
      or absent, if the node is blocked globally

      '
    name: entry_node_name
    optional: true
    type: str
  - description: 'ID of the remote posting, where the node is blocked; <code>None</code>
      or absent, if the node is blocked globally

      '
    name: entry_posting_id
    optional: true
    type: str
  - description: 'if set to <code>True</code>, only the blockings that strictly fit
      the criteria are returned; otherwise global blockings are returned even if the
      search is limited to a particular posting

      '
    name: strict
    optional: true
    type: bool
  name: BlockedUserFilter
- fields:
  - name: id
    type: str
  - description: operation that is blocked
    enum: BlockedOperation
    name: blocked_operation
  - description: name of the blocked node
    name: node_name
    type: str
  - description: information known about the blocked node
    name: contact
    optional: true
    struct: ContactInfo
  - description: 'ID of the local entry, where the node is blocked; <code>None</code>
      or absent, if the node is blocked globally

      '
    name: entry_id
    optional: true
    type: str
  - description: 'node name of the remote posting, where the node is blocked; <code>None</code>
      or absent, if the node is blocked globally

      '
    name: entry_node_name
    optional: true
    type: str
  - description: 'ID of the remote posting, where the node is blocked; <code>None</code>
      or absent, if the node is blocked globally

      '
    name: entry_posting_id
    optional: true
    type: str
  - description: blocking timestamp - the real time when the node was blocked
    name: created_at
    type: Timestamp
  - description: 'unblocking timestamp - the real time when the node will be unblocked;
      <code>None</code> or absent, if the node is blocked permanently

      '
    name: deadline
    optional: true
    type: Timestamp
  - description: source text of the reason of blocking
    name: reason_src
    optional: true
    type: str
  - description: 'format of the source text of the reason of blocking, the list of
      available formats is returned in <code><a href="#PostingFeatures">PostingFeatures</a></code>

      '
    enum: SourceFormat
    name: reason_src_format
    optional: true
  - description: reason of blocking
    name: reason
    optional: true
    type: str
  name: BlockedUserInfo
- fields:
  - description: checksum of the list of users that are hidden
    name: visibility
    type: int
  name: BlockedUsersChecksums
- fields:
  - description: the subject (plain text)
    name: subject
    optional: true
    type: str
  - description: the text (HTML)
    name: text
    optional: true
    type: str
  - array: true
    description: link previews
    name: link_previews
    optional: true
    struct: LinkPreview
  name: Body
- fields:
  - name: carte
    type: str
  - description: timestamp of the beginning of the carte's life
    name: beginning
    type: Timestamp
  - description: timestamp of the end of the carte's life
    name: deadline
    type: Timestamp
  - description: "the list of permissions granted to the carte; the possible values\
      \ are:  <ul>\n  <li><code>other</code> - any other permission not listed below;</li>\n\
      \  <li><code>view-media</code> - view media files.</li>\n</ul>\n"
    name: permissions
    optional: true
    type: List[str]
  name: CarteInfo
- fields:
  - description: the client IP address the cartes are bound to
    name: cartes_ip
    optional: true
    type: str
  - array: true
    description: the cartes
    name: cartes
    struct: CarteInfo
  - description: cartes creation timestamp
    name: created_at
    type: Timestamp
  name: CarteSet
- fields:
  - description: <code>True</code>, if the reaction is negative, <code>False</code>,
      if positive
    name: negative
    type: bool
  - description: reaction code, usually interpreted by clients as emoji code point
    name: emoji
    type: int
  - description: reaction creation timestamp - the real time when the reaction was
      created
    name: created_at
    type: Timestamp
  - description: if present, the reaction will be erased at this time
    name: deadline
    optional: true
    type: Timestamp
  name: ClientReactionInfo
- fields:
  - description: details of the comment created
    name: comment
    struct: CommentInfo
  - description: total number of comments in the posting after the creation
    name: total
    type: int
  name: CommentCreated
- fields:
  - name: id
    type: str
  - description: node name of the comment's owner
    name: owner_name
    type: str
  - description: full name of the comment's owner
    name: owner_full_name
    optional: true
    type: str
  - description: gender of the comment's owner
    name: owner_gender
    optional: true
    type: str
  - description: avatar of the comment's owner
    name: owner_avatar
    optional: true
    struct: AvatarImage
  - description: ID of the parent posting of the comment
    name: posting_id
    type: str
  - description: ID of the revision of parent posting that was current when the comment
      was created
    name: posting_revision_id
    type: str
  - description: ID of the current revision of the comment
    name: revision_id
    type: str
  - description: total number of revisions the comment has
    name: total_revisions
    type: int
  - description: preview of the comment's body, a string representation of a JSON
      structure
    name: body_preview
    optional: true
    struct: Body
  - description: 'the source text of the comment, a string representation of a JSON
      structure, may be absent if not requested

      '
    name: body_src
    optional: true
    struct: Body
  - description: hash of the source text of the comment
    name: body_src_hash
    type: bytes
  - description: 'format of the source text of the comment, the list of available
      formats is returned in <code><a href="#PostingFeatures">PostingFeatures</a></code>

      '
    enum: SourceFormat
    name: body_src_format
    optional: true
  - description: body of the comment, a string representation of a JSON structure
    name: body
    struct: Body
  - description: format of the body of the comment, may have any value meaningful
      for the client
    enum: BodyFormat
    name: body_format
    optional: true
  - array: true
    description: list of the media attached to the comment
    name: media
    optional: true
    struct: MediaAttachment
  - description: heading of the comment
    name: heading
    type: str
  - description: information about the comment this comment is replying to
    name: replied_to
    optional: true
    struct: RepliedTo
  - name: moment
    type: int
  - description: comment creation timestamp - the real time when the comment was created
    name: created_at
    type: Timestamp
  - description: comment editing timestamp - the last time the comment was updated
    name: edited_at
    optional: true
    type: Timestamp
  - description: comment deletion timestamp - the time when the comment was deleted
    name: deleted_at
    optional: true
    type: Timestamp
  - description: creation timestamp of the current revision of the comment
    name: revision_created_at
    type: Timestamp
  - description: comment purging timestamp - the time when the deleted comment will
      be purged from the database
    name: deadline
    optional: true
    type: Timestamp
  - description: 'cryptographic digest of the comment (use <code><a href="fingerprints.html#Comment">Comment</a></code>
      fingerprint)

      '
    name: digest
    optional: true
    type: bytes
  - description: 'the comment''s owner signature (use <code><a href="fingerprints.html#Comment">Comment</a></code>
      fingerprint)

      '
    name: signature
    optional: true
    type: bytes
  - description: signature version (i.e. fingerprint version)
    name: signature_version
    optional: true
    type: int
  - description: the supported operations and the corresponding principals
    name: operations
    optional: true
    struct: CommentOperations
  - description: the operations and the corresponding principals that are overridden
      in reactions to the comment
    name: reaction_operations
    optional: true
    struct: ReactionOperations
  - description: the supported operations and the corresponding principals as defined
      by the comment's owner
    name: owner_operations
    optional: true
    struct: CommentOperations
  - description: 'the operations and the corresponding principals that are overridden
      by the posting''s owner ("senior")

      '
    name: senior_operations
    optional: true
    struct: CommentOperations
  - array: true
    description: operations on the comment that are blocked for the client
    enum: BlockedEntryOperation
    name: blocked_operations
    optional: true
  - array: true
    description: list of sheriff marks on the comment
    name: sheriff_marks
    optional: true
    struct: SheriffMark
  - description: types of reactions that the comment accepts
    name: accepted_reactions
    optional: true
    struct: AcceptedReactions
  - description: details of the existing reaction (if any) of the client's owner
    name: client_reaction
    optional: true
    struct: ClientReactionInfo
  - description: details of the existing reaction (if any) of the posting's owner
      ("senior") to the comment
    name: senior_reaction
    optional: true
    struct: ClientReactionInfo
  - description: reactions summary of the comment
    name: reactions
    optional: true
    struct: ReactionTotalsInfo
  name: CommentInfo
- errors:
  - code: commentMassAttributes.seniorOperations.wrong-principal
    description: principal for one of senior operations is invalid
  fields:
  - description: 'the operations and the corresponding principals that are overridden
      by the comment''s owner ("senior")

      '
    name: senior_operations
    optional: true
    struct: CommentOperations
  name: CommentMassAttributes
- fields:
  - name: id
    type: str
  - description: ID of the posting revision that was actual at the moment of creation
      of this comment revision
    name: posting_revision_id
    type: str
  - description: preview of the revision's body, a string representation of a JSON
      structure
    name: body_preview
    optional: true
    struct: Body
  - description: hash of the source text of the revision
    name: body_src_hash
    type: bytes
  - description: 'format of the source text of the revision, the list of available
      formats is returned in <code><a href="#PostingFeatures">PostingFeatures</a></code>

      '
    enum: SourceFormat
    name: body_src_format
    optional: true
  - description: body of the revision, a string representation of a JSON structure
    name: body
    struct: Body
  - description: format of the body of the revision, may have any value meaningful
      for the client
    enum: BodyFormat
    name: body_format
    optional: true
  - description: heading of the revision
    name: heading
    type: str
  - description: revision creation timestamp - the real time when the revision was
      created
    name: created_at
    type: Timestamp
  - description: revision deletion timestamp - the time when the revision was deleted
    name: deleted_at
    optional: true
    type: Timestamp
  - description: 'revision deletion timestamp - the time when the revision will be
      deleted and the previous revision will take its place

      '
    name: deadline
    optional: true
    type: Timestamp
  - description: 'cryptographic digest of the revision (use <code><a href="fingerprints.html#Comment">Comment</a></code>
      fingerprint)

      '
    name: digest
    optional: true
    type: bytes
  - description: 'the comment''s owner signature (use <code><a href="fingerprints.html#Comment">Comment</a></code>
      fingerprint)

      '
    name: signature
    optional: true
    type: bytes
  - description: signature version (i.e. fingerprint version)
    name: signature_version
    optional: true
    type: int
  - description: details of the existing reaction (if any) of the client's owner
    name: client_reaction
    optional: true
    struct: ClientReactionInfo
  - description: reactions summary of the revision
    name: reactions
    optional: true
    struct: ReactionTotalsInfo
  name: CommentRevisionInfo
- fields:
  - description: the slice contains all comments before this moment, inclusive. May
      be the far future.
    name: before
    type: int
  - description: the slice contains all comments after this moment, exclusive. May
      be the far past.
    name: after
    type: int
  - array: true
    description: the comments
    name: comments
    struct: CommentInfo
  - description: total number of comments
    name: total
    type: int
  - description: number of comments before this slice till the far past
    name: total_in_past
    type: int
  - description: number of comments after this slice till the far future
    name: total_in_future
    type: int
  name: CommentsSliceInfo
- errors:
  - code: commentText.bodySrc.blank
    description: body text is empty
  - code: commentText.bodySrc.wrong-size
    description: body text is too long
  - code: commentText.bodySrc.wrong-encoding
    description: body text is formatted incorrectly
  - code: commentText.acceptedReactions.positive.wrong-size
    description: list of accepted positive reactions is too long
  - code: commentText.acceptedReactions.positive.wrong-pattern
    description: list of accepted positive reactions has wrong format
  - code: commentText.acceptedReactions.negative.wrong-size
    description: list of accepted negative reactions is too long
  - code: commentText.acceptedReactions.negative.wrong-pattern
    description: list of accepted negative reactions has wrong format
  fields:
  - description: avatar of the comment's owner
    name: owner_avatar
    optional: true
    struct: AvatarDescription
  - description: the source text of the comment, a string representation of a JSON
      structure
    name: body_src
    optional: true
    struct: Body
  - description: 'format of the source text of the comment, <code>plain-text</code>
      by default; the list of available formats is returned in <code><a href="#PostingFeatures">PostingFeatures</a></code>

      '
    enum: SourceFormat
    name: body_src_format
    optional: true
  - array: true
    description: array of IDs and digests of private media to be attached to the comment
    name: media
    optional: true
    struct: MediaWithDigest
  - description: types of reactions that the comment accepts
    name: accepted_reactions
    optional: true
    struct: AcceptedReactions
  - description: ID of the comment this comment is replying to
    name: replied_to_id
    optional: true
    type: str
  - description: the operations and the corresponding principals
    name: operations
    optional: true
    struct: CommentOperations
  - description: 'the operations and the corresponding principals that are overridden
      by the posting''s owner ("senior"); only the senior may set this

      '
    name: senior_operations
    optional: true
    struct: CommentOperations
  name: CommentSourceText
- errors:
  - code: commentText.ownerAvatar.mediaId.not-found
    description: owner's avatar is not found
  - code: commentText.bodySrc.blank
    description: body text is empty
  - code: commentText.bodySrc.wrong-size
    description: body text is too long
  - code: commentText.bodySrc.wrong-encoding
    description: body text is formatted incorrectly
  - code: commentText.bodySrcFormat.unknown
    description: unknown body text format
  - code: commentText.body.blank
    description: body is empty
  - code: commentText.body.wrong-size
    description: body is too long
  - code: commentText.body.wrong-encoding
    description: body encoding is incorrect
  - code: commentText.bodyPreview.wrong-encoding
    description: body preview encoding is incorrect
  - code: commentText.bodyFormat.blank
    description: body format is not set
  - code: commentText.bodyFormat.wrong-size
    description: body format is too long
  - code: commentText.media.not-found
    description: media attachment is not found
  - code: commentText.media.not-compressed
    description: 'media attachment is not compressed as the node requires, the parameters
      of the desired compression are returned in <code><a href="#PostingFeatures">PostingFeatures</a></code>

      '
  - code: commentText.createdAt.blank
    description: body creation timestamp is not set
  - code: commentText.createdAt.out-of-range
    description: body creation timestamp is too far from the current timestamp
  - code: commentText.acceptedReactions.positive.wrong-size
    description: list of accepted positive reactions is too long
  - code: commentText.acceptedReactions.positive.wrong-pattern
    description: list of accepted positive reactions has wrong format
  - code: commentText.acceptedReactions.negative.wrong-size
    description: list of accepted negative reactions is too long
  - code: commentText.acceptedReactions.negative.wrong-pattern
    description: list of accepted negative reactions has wrong format
  - code: commentText.repliedToId.not-found
    description: comment referred in `repliedToId` is not found
  - code: commentText.operations.wrong-principal
    description: principal for one of operations is invalid
  - code: commentText.reactionOperations.wrong-principal
    description: principal for one of reaction operations is invalid
  - code: commentText.seniorOperations.wrong-principal
    description: principal for one of senior operations is invalid
  fields:
  - description: node name of the comment's owner
    name: owner_name
    optional: true
    type: str
  - description: full name of the comment's owner
    name: owner_full_name
    optional: true
    type: str
  - description: gender of the comment's owner
    name: owner_gender
    optional: true
    type: str
  - description: avatar of the comment's owner
    name: owner_avatar
    optional: true
    struct: AvatarDescription
  - description: preview of the comment's body, a string representation of a JSON
      structure
    name: body_preview
    optional: true
    struct: Body
  - description: the source text of the comment, a string representation of a JSON
      structure
    name: body_src
    optional: true
    struct: Body
  - description: 'format of the source text of the comment, <code>plain-text</code>
      by default; the list of available formats is returned in <code><a href="#PostingFeatures">PostingFeatures</a></code>

      '
    enum: SourceFormat
    name: body_src_format
    optional: true
  - description: body of the comment, a string representation of a JSON structure
    name: body
    optional: true
    struct: Body
  - description: format of the body of the comment, may have any value meaningful
      for the client
    enum: BodyFormat
    name: body_format
    optional: true
  - description: array of IDs of private media to be attached to the comment
    name: media
    optional: true
    type: List[str]
  - description: comment creation timestamp - the real time when the comment was created
    name: created_at
    optional: true
    type: Timestamp
  - description: types of reactions that the comment accepts
    name: accepted_reactions
    optional: true
    struct: AcceptedReactions
  - description: ID of the comment this comment is replying to
    name: replied_to_id
    optional: true
    type: str
  - description: 'the comment''s owner signature (use <code><a href="fingerprints.html#Comment">Comment</a></code>
      fingerprint)

      '
    name: signature
    optional: true
    type: bytes
  - description: signature version (i.e. fingerprint version)
    name: signature_version
    optional: true
    type: int
  - description: the operations and the corresponding principals
    name: operations
    optional: true
    struct: CommentOperations
  - description: the operations and the corresponding principals that are overridden
      in reactions to the comment
    name: reaction_operations
    optional: true
    struct: ReactionOperations
  - description: 'the operations and the corresponding principals that are overridden
      by the posting''s owner ("senior"); only the senior may set this

      '
    name: senior_operations
    optional: true
    struct: CommentOperations
  name: CommentText
- fields:
  - description: total number of comments in the posting after the operation
    name: total
    type: int
  name: CommentTotalInfo
- fields:
  - name: node_name
    type: str
  - name: full_name
    optional: true
    type: str
  - name: gender
    optional: true
    type: str
  - name: avatar
    optional: true
    struct: AvatarImage
  - description: 'closeness of the contact to the node, which is calculated from the
      number of reactions and comments and their age

      '
    name: closeness
    type: float
  - description: the contact is subscribed to at least one of the node's feeds
    name: has_feed_subscriber
    optional: true
    type: bool
  - description: the node is subscribed to at least one of the contact's feeds
    name: has_feed_subscription
    optional: true
    type: bool
  - description: the contact is a friend of the node
    name: has_friend
    optional: true
    type: bool
  - description: the node is a friend of the contact
    name: has_friend_of
    optional: true
    type: bool
  - description: the contact is blocked by the node
    name: has_block
    optional: true
    type: bool
  - description: the node is blocked by the contact
    name: has_block_by
    optional: true
    type: bool
  - description: the supported operations and the corresponding principals
    name: operations
    optional: true
    struct: ContactOperations
  - description: the supported operations and the corresponding principals as defined
      by the contact's owner
    name: owner_operations
    optional: true
    struct: ContactOperations
  - description: the operations and the corresponding principals that are overridden
      by the node administrator
    name: admin_operations
    optional: true
    struct: ContactOperations
  name: ContactInfo
- errors:
  - code: credentials.login.blank
    description: the login is empty
  - code: credentials.password.blank
    description: the password is empty
  fields:
  - name: login
    type: str
  - name: password
    type: str
  name: Credentials
- errors:
  - code: credentials.login.blank
    description: the login is empty
  - code: credentials.password.blank
    description: the password is empty
  fields:
  - description: credentials reset token
    name: token
    optional: true
    type: str
  - description: the current password
    name: old_password
    optional: true
    type: str
  - name: login
    type: str
  - name: password
    type: str
  name: CredentialsChange
- fields:
  - description: <code>True</code> if the credentials are initialized already, <code>False</code>
      otherwise
    name: created
    type: bool
  name: CredentialsCreated
- fields:
  - description: <code>True</code> if the request is sent, <code>False</code> otherwise
    name: requested
    type: bool
  name: DeleteNodeStatus
- errors:
  - code: delete-node.no-email
    description: e-mail is required to be set in the profile to communicate with the
      provider
  - code: deleteNodeText.message.wrong-size
    description: the message is too long
  fields:
  - description: text message for the provider
    name: message
    optional: true
    type: str
  name: DeleteNodeText
- errors:
  - code: domainAttributes.name.blank
    description: the domain name is empty
  - code: domainAttributes.name.wrong-hostname
    description: the domain name is not a valid hostname
  - code: domainAttributes.nodeId.wrong-uuid
    description: the node ID is not a valid UUID
  fields:
  - description: domain's hostname or <code>_default_</code> for the default domain
    name: name
    optional: true
    type: str
  - description: domain's node ID
    name: node_id
    optional: true
    type: str
  name: DomainAttributes
- fields:
  - description: fully-qualified domain name
    name: name
    type: str
  name: DomainAvailable
- errors:
  - code: domainInfo.name.blank
    description: the domain name is empty
  - code: domainInfo.name.wrong-hostname
    description: the domain name is not a valid hostname
  - code: domainInfo.nodeId.wrong-uuid
    description: the node ID is not a valid UUID
  fields:
  - description: domain's hostname or <code>_default_</code> for the default domain
    name: name
    type: str
  - description: domain's node ID
    name: node_id
    type: str
  - description: domain creation timestamp
    name: created_at
    type: Timestamp
  name: DomainInfo
- fields:
  - name: id
    type: str
  - description: type of the draft
    enum: DraftType
    name: draft_type
  - description: name of the node the draft is related to
    name: receiver_name
    type: str
  - description: ID of the posting, set for all types, except <code>new-posting</code>
    name: receiver_posting_id
    optional: true
    type: str
  - description: ID of the comment, set for <code>comment-update</code> type
    name: receiver_comment_id
    optional: true
    type: str
  - description: ID of the comment replied to, set for comment drafts, if needed
    name: replied_to_id
    optional: true
    type: str
  - description: draft creation timestamp - the real time when the draft was created
    name: created_at
    type: Timestamp
  - description: draft editing timestamp - the last time the draft was updated
    name: edited_at
    optional: true
    type: Timestamp
  - description: draft purging timestamp - the time when the draft will be purged
      from the database, if not updated
    name: deadline
    optional: true
    type: Timestamp
  - description: full name of the posting's/comment's owner
    name: owner_full_name
    optional: true
    type: str
  - description: avatar of the posting's/comment's owner
    name: owner_avatar
    optional: true
    struct: AvatarImage
  - description: types of reactions that the posting accepts
    name: accepted_reactions
    optional: true
    struct: AcceptedReactions
  - description: the source text of the draft, a string representation of a JSON structure
    name: body_src
    optional: true
    struct: Body
  - description: 'format of the source text of the draft, <code>plain-text</code>
      by default; the list of available formats is returned in <code><a href="#PostingFeatures">PostingFeatures</a></code>

      '
    enum: SourceFormat
    name: body_src_format
    optional: true
  - description: body of the draft, a string representation of a JSON structure
    name: body
    struct: Body
  - description: format of the body of the draft
    enum: BodyFormat
    name: body_format
    optional: true
  - array: true
    description: list of the media attached to the draft
    name: media
    optional: true
    struct: MediaAttachment
  - description: heading of the draft
    name: heading
    type: str
  - description: story publication timestamp - the time the story must be published
      under in the feed
    name: publish_at
    optional: true
    type: int
  - description: description of the update
    name: update_info
    optional: true
    struct: UpdateInfo
  - description: draft of the list of operations and the corresponding principals
    name: operations
    optional: true
    struct: PostingOperations
  - description: 'draft of the list of operations and the corresponding principals
      that are overridden in the posting''s comments, set for posting drafts, if needed

      '
    name: comment_operations
    optional: true
    struct: CommentOperations
  name: DraftInfo
- errors:
  - code: draftText.postingId.blank
    description: posting ID is not set
  - code: draftText.commentId.blank
    description: comment ID is not set
  - code: draftText.ownerFullName.wrong-size
    description: owner's full name is too long
  - code: draftText.ownerAvatar.mediaId.not-found
    description: owner's avatar is not found
  - code: draftText.bodySrc.wrong-size
    description: body text is too long
  - code: draftText.bodySrc.wrong-encoding
    description: body text encoding is incorrect
  - code: draftText.bodySrcFormat.unknown
    description: unknown body text format
  - code: draftText.acceptedReactions.positive.wrong-size
    description: list of accepted positive reactions is too long
  - code: draftText.acceptedReactions.positive.wrong-pattern
    description: list of accepted positive reactions has wrong format
  - code: draftText.acceptedReactions.negative.wrong-size
    description: list of accepted negative reactions is too long
  - code: draftText.acceptedReactions.negative.wrong-pattern
    description: list of accepted negative reactions has wrong format
  fields:
  - description: type of the draft
    enum: DraftType
    name: draft_type
  - description: name of the node the draft is related to
    name: receiver_name
    type: str
  - description: ID of the posting, mandatory for all types, except <code>new-posting</code>
    name: receiver_posting_id
    optional: true
    type: str
  - description: ID of the comment, mandatory for <code>comment-update</code> type
    name: receiver_comment_id
    optional: true
    type: str
  - description: ID of the comment replied to
    name: replied_to_id
    optional: true
    type: str
  - description: full name of the posting's/comment's owner
    name: owner_full_name
    optional: true
    type: str
  - description: avatar of the posting's/comment's owner
    name: owner_avatar
    optional: true
    struct: AvatarDescription
  - description: types of reactions that the posting accepts
    name: accepted_reactions
    optional: true
    struct: AcceptedReactions
  - description: the source text of the draft, a string representation of a JSON structure
    name: body_src
    optional: true
    struct: Body
  - description: 'format of the source text of the draft, <code>plain-text</code>
      by default; the list of available formats is returned in <code><a href="#PostingFeatures">PostingFeatures</a></code>

      '
    enum: SourceFormat
    name: body_src_format
    optional: true
  - array: true
    description: list of the media attached to the draft, the media may be located
      on another node
    name: media
    optional: true
    struct: RemoteMedia
  - description: story publication timestamp - the time the story must be published
      under in the feed
    name: publish_at
    optional: true
    type: int
  - description: description of the update
    name: update_info
    optional: true
    struct: UpdateInfo
  - description: draft of the list of operations and the corresponding principals
    name: operations
    optional: true
    struct: PostingOperations
  - description: 'draft of the list of operations and the corresponding principals
      that are overridden in the posting''s comments

      '
    name: comment_operations
    optional: true
    struct: CommentOperations
  name: DraftText
- fields:
  - description: 'a masked E-mail address that should help user to understand which
      E-mail address was used without revealing it

      '
    name: email_hint
    type: str
  name: EmailHint
- fields:
  - description: posting details, set if the entry is a posting
    name: posting
    optional: true
    struct: PostingInfo
  - description: comment details, set if the entry is a comment
    name: comment
    optional: true
    struct: CommentInfo
  name: EntryInfo
- fields:
  - description: features of a posting
    name: posting
    struct: PostingFeatures
  - description: list of names of plugins enabled for the node
    name: plugins
    optional: true
    type: List[str]
  - description: width of the feed in pixels
    name: feed_width
    type: int
  - description: features of groups of friends
    name: friend_groups
    optional: true
    struct: FriendGroupsFeatures
  - array: true
    description: list of requests to the node owner that are accepted by the node
    enum: AskSubject
    name: ask
    optional: true
  - description: <code>True</code>, if the node is subscribed to the client, <code>False</code>
      otherwise
    name: subscribed
    optional: true
    type: bool
  name: Features
- fields:
  - description: name of the feed
    name: feed_name
    type: str
  - description: title of the feed
    name: title
    optional: true
    type: str
  - description: total number of stories in the feed
    name: total
    type: int
  - description: creation timestamp of the earliest story in the feed
    name: first_created_at
    optional: true
    type: Timestamp
  - description: creation timestamp of the latest story in the feed
    name: last_created_at
    optional: true
    type: Timestamp
  - description: the supported operations and the corresponding principals
    name: operations
    optional: true
    struct: FeedOperations
  - description: list of sheriffs supervising the feed
    name: sheriffs
    optional: true
    type: List[str]
  - array: true
    description: list of sheriff marks on the feed
    name: sheriff_marks
    optional: true
    struct: SheriffMark
  name: FeedInfo
- fields:
  - description: name of the feed
    name: feed_name
    type: str
  - description: story publication timestamp - the time the story is published under
      in the feed
    name: published_at
    type: Timestamp
  - description: '<code>True</code>, if the story is pinned (should appear before
      any non-pinned story in the feed), <code>False</code> otherwise

      '
    name: pinned
    optional: true
    type: bool
  - name: moment
    type: int
  - description: ID of the story
    name: story_id
    type: str
  - description: the supported operations and the corresponding principals for the
      story in the feed
    name: operations
    optional: true
    struct: StoryOperations
  name: FeedReference
- fields:
  - description: the slice contains all stories before this moment, inclusive. May
      be the far future.
    name: before
    type: int
  - description: the slice contains all stories after this moment, exclusive. May
      be the far past.
    name: after
    type: int
  - array: true
    description: the stories
    name: stories
    struct: StoryInfo
  - description: total number of stories in the feed before this slice
    name: total_in_past
    type: int
  - description: total number of stories in the feed after this slice
    name: total_in_future
    type: int
  name: FeedSliceInfo
- fields:
  - description: total number of stories
    name: total
    type: int
  - description: total number of pinned stories
    name: total_pinned
    type: int
  - description: moment of the most recent story
    name: last_moment
    optional: true
    type: int
  - description: number of stories that have not been viewed yet, admin only
    name: not_viewed
    optional: true
    type: int
  - description: number of stories that have not been read yet, admin only
    name: not_read
    optional: true
    type: int
  - description: moment of the oldest non-viewed story, admin only
    name: not_viewed_moment
    optional: true
    type: int
  - description: moment of the oldest non-read story, admin only
    name: not_read_moment
    optional: true
    type: int
  name: FeedStatus
- fields:
  - description: new value of the <code>viewed</code> flag (<code>None</code>, if
      the flag is not changed)
    name: viewed
    optional: true
    type: bool
  - description: new value of the <code>read</code> flag (<code>None</code>, if the
      flag is not changed)
    name: read
    optional: true
    type: bool
  - description: change flags for all stories before this moment, inclusive
    name: before
    type: int
  name: FeedStatusChange
- fields:
  - description: name of the feed
    name: feed_name
    type: str
  - description: number of stories in the feed that have not been viewed yet
    name: not_viewed
    type: int
  - description: number of stories in the feed that have not been read yet
    name: not_read
    type: int
  name: FeedWithStatus
- errors:
  - code: friendDescription.nodeName.blank
    description: friend's node name is empty
  - code: friendDescription.nodeName.wrong-size
    description: friend's node name is too long
  - code: friendDescription.groups.wrong-principal
    description: principal for one of operations is invalid
  fields:
  - description: name of the node
    name: node_name
    type: str
  - array: true
    description: groups of friends the node is to be included into
    name: groups
    optional: true
    struct: FriendGroupAssignment
  name: FriendDescription
- fields:
  - description: ID of the group of friends
    name: id
    type: str
  - description: the operations and the corresponding principals
    name: operations
    optional: true
    struct: FriendOperations
  name: FriendGroupAssignment
- errors:
  - code: friendGroupDescription.title.blank
    description: title of group of friends is empty
  - code: friendGroupDescription.title.wrong-size
    description: title of group of friends is too long
  - code: friendGroupDescription.operations.wrong-principal
    description: principal for one of operations is invalid
  fields:
  - description: title of the group of friends
    name: title
    type: str
  - description: the operations and the corresponding principals
    name: operations
    optional: true
    struct: FriendGroupOperations
  name: FriendGroupDescription
- fields:
  - description: ID of the group of friends
    name: id
    type: str
  - description: title of the group of friends
    name: title
    optional: true
    type: str
  - description: the friendship timestamp - the real time when the node was added
      to the group of friends
    name: added_at
    type: Timestamp
  - description: list of the supported operations and the corresponding principals
    name: operations
    optional: true
    struct: FriendOperations
  name: FriendGroupDetails
- fields:
  - name: id
    type: str
  - description: title of the group of friends
    name: title
    optional: true
    type: str
  - description: the group creation timestamp - the real time when the group of friends
      was created
    name: created_at
    type: Timestamp
  - description: list of the supported operations and the corresponding principals
    name: operations
    optional: true
    struct: FriendGroupOperations
  name: FriendGroupInfo
- fields:
  - array: true
    description: list of groups of friends existing on the node
    name: available
    struct: FriendGroupInfo
  - array: true
    description: list of groups of friends the client is member of
    name: member_of
    optional: true
    struct: FriendGroupDetails
  name: FriendGroupsFeatures
- fields:
  - description: name of the node
    name: node_name
    type: str
  - description: information about the node
    name: contact
    optional: true
    struct: ContactInfo
  - array: true
    description: groups of friends the node belongs to
    name: groups
    optional: true
    struct: FriendGroupDetails
  name: FriendInfo
- fields:
  - description: name of the remote node
    name: remote_node_name
    type: str
  - description: information about the remote node
    name: contact
    optional: true
    struct: ContactInfo
  - array: true
    description: groups of friends on the remote node this node was added to
    name: groups
    optional: true
    struct: FriendGroupDetails
  name: FriendOfInfo
- fields:
  - description: fundraiser title
    name: title
    type: str
  - description: text or URI to be encoded and displayed as QR-code
    name: qr_code
    optional: true
    type: str
  - description: arbitrary text to be displayed
    name: text
    optional: true
    type: str
  - description: link to the fundraiser
    name: href
    optional: true
    type: str
  name: FundraiserInfo
- fields:
  - description: name of the site
    name: site_name
    optional: true
    type: str
  - description: canonical URL of the page
    name: url
    optional: true
    type: str
  - description: title of the page
    name: title
    optional: true
    type: str
  - description: description of the page
    name: description
    optional: true
    type: str
  - description: hash of the image presenting the page
    name: image_hash
    optional: true
    type: str
  name: LinkPreview
- fields:
  - description: name of the site
    name: site_name
    optional: true
    type: str
  - description: canonical URL of the page
    name: url
    optional: true
    type: str
  - description: title of the page
    name: title
    optional: true
    type: str
  - description: description of the page
    name: description
    optional: true
    type: str
  - description: URL of the image presenting the page
    name: image_url
    optional: true
    type: str
  name: LinkPreviewInfo
- fields:
  - description: details of the attached media, may be absent, if the media is not
      located on the node
    name: media
    optional: true
    struct: PrivateMediaFileInfo
  - description: details of the media, if it is located on another node
    name: remote_media
    optional: true
    struct: RemoteMediaInfo
  - description: '<code>True</code> if the media is used in the body of the posting/comment,
      <code>False</code> otherwise

      '
    name: embedded
    type: bool
  name: MediaAttachment
- fields:
  - description: the width the preview was prepared for viewing at
    name: target_width
    type: int
  - description: actual width of the preview in pixels
    name: width
    type: int
  - description: actual height of the preview in pixels
    name: height
    type: int
  - description: <code>True</code> if the preview is identical to the original media,
      <code>False</code> otherwise
    name: original
    optional: true
    type: bool
  name: MediaFilePreviewInfo
- fields:
  - description: ID of the media file
    name: id
    type: str
  - description: cryptographic digest of the media file
    name: digest
    optional: true
    type: str
  name: MediaWithDigest
- errors:
  - code: nameToRegister.name.blank
    description: the name is empty
  - code: nameToRegister.name.invalid
    description: the name is reserved, too long or contains invalid characters
  fields:
  - name: name
    type: str
  name: NameToRegister
- fields:
  - description: ID of the notification packet on the sending node (used to filter
      out duplicates)
    name: id
    type: str
  - description: name of the sending node
    name: node_name
    type: str
  - description: full name of the sending node
    name: full_name
    optional: true
    type: str
  - description: gender of the sending node
    name: gender
    optional: true
    type: str
  - description: avatar of the sending node
    name: avatar
    optional: true
    struct: AvatarImage
  - description: notification packet creation timestamp
    name: created_at
    type: Timestamp
  - description: notification type
    name: type
    type: str
  - description: 'the notification, a string representation of a JSON structure (see
      <a href="notifications.html">Notifications</a> page for details)

      '
    name: notification
    type: str
  - description: 'the notification packet sender signature (use <code><a href="fingerprints.html#NotificationPacket">NotificationPacket</a></code>
      fingerprint)

      '
    name: signature
    type: bytes
  - description: signature version (i.e. fingerprint version)
    name: signature_version
    type: int
  name: NotificationPacket
- fields:
  - name: name
    optional: true
    type: str
  - description: status of the latest operation with the node name
    enum: OperationStatus
    name: operation_status
    optional: true
  - description: the last time the operation status was updated
    name: operation_status_updated
    optional: true
    type: Timestamp
  - description: if the operation with the node name was failed, the code of the failure
    name: operation_error_code
    optional: true
    type: str
  - description: if the operation with the node name was failed, the human-readable
      description of the failure
    name: operation_error_message
    optional: true
    type: str
  - description: the supported operations and the corresponding principals
    name: operations
    optional: true
    struct: NodeNameOperations
  name: NodeNameInfo
- fields:
  - description: total number of subscribers of the node
    name: feed_subscribers_total
    optional: true
    type: int
  - description: total number of subscriptions of the node
    name: feed_subscriptions_total
    optional: true
    type: int
  - description: total number of friends in every group
    name: friends_total
    optional: true
    type: Mapping[str, int]
  - description: total number of nodes that added this node to their friends
    name: friend_ofs_total
    optional: true
    type: int
  - description: total number of blocked nodes
    name: blocked_total
    optional: true
    type: int
  - description: total number of nodes that blocked this node
    name: blocked_by_total
    optional: true
    type: int
  - description: the supported operations and the corresponding principals
    name: operations
    optional: true
    struct: PeopleOperations
  name: PeopleGeneralInfo
- fields:
  - description: <code>True</code>, if the client has authenticated as root admin,
      <code>False</code> otherwise
    name: root_admin
    type: bool
  - description: <code>True</code>, if the client has authenticated as node admin,
      <code>False</code> otherwise
    name: admin
    type: bool
  - description: 'the list of permissions granted to the client, if it has authenticated
      as node admin; see <code><a href="#TokenInfo">TokenInfo</a>.permissions</code>
      for the list of possible values

      '
    name: auth_categories
    type: List[str]
  - description: node name of the client
    name: client_name
    type: str
  - description: IP address of the client
    name: remote_address
    type: str
  - description: user agent (browser) used by the client
    name: user_agent
    type: str
  - description: operating system used by the client
    name: user_agent_os
    type: str
  - description: ID of the current node
    name: node_id
    type: str
  - description: node name of the current node
    name: node_name
    type: str
  - description: domain name of the current node
    name: domain_name
    type: str
  - description: full URL of the request
    name: origin_url
    type: str
  name: PluginContext
- errors:
  - code: pluginDescription.name.blank
    description: plugin name is empty
  - code: pluginDescription.name.wrong-size
    description: plugin name is too long
  - code: pluginDescription.name.wrong-pattern
    description: plugin name format is incorrect
  - code: pluginDescription.title.wrong-size
    description: plugin title is too long
  - code: pluginDescription.description.wrong-size
    description: plugin description is too long
  - code: pluginDescription.options.unknown-type
    description: option has an unknown type
  fields:
  - description: a unique plugin name; can contain only small latin letters, digits
      or hyphen
    name: name
    type: str
  - description: user-readable title of the plugin
    name: title
    optional: true
    type: str
  - description: user-readable description of purpose of the plugin
    name: description
    optional: true
    type: str
  - description: URL of the plugin; used by the node to call the plugin API
    name: location
    optional: true
    type: str
  - description: 'list of types of internal events the plugin wants to receive; <a
      href="#internal-events">Read more about internal events.</a>

      '
    name: accepted_events
    optional: true
    type: List[str]
  - array: true
    description: 'plugin settings to be added to the list of node settings, the settings
      appear in the list with a prefix <code>plugin.&lt;plugin name>.</code>

      '
    name: options
    optional: true
    struct: SettingDescriptor
  name: PluginDescription
- fields:
  - description: ID of the node this plugin is connected to
    name: node_id
    type: str
  - description: '<code>True</code> if the plugin is enabled for a particular node
      only, <code>False</code>, if it is enabled for the whole server

      '
    name: local
    type: bool
  - description: a unique plugin name
    name: name
    type: str
  - description: user-readable title of the plugin
    name: title
    optional: true
    type: str
  - description: user-readable description of purpose of the plugin
    name: description
    optional: true
    type: str
  - description: URL of the plugin; used by the node to call the plugin API
    name: location
    optional: true
    type: str
  - description: 'list of types of internal events the plugin wants to receive; <a
      href="#internal-events">Read more about internal events.</a>

      '
    name: accepted_events
    optional: true
    type: List[str]
  - array: true
    description: plugin settings to be added to the list of node settings
    name: settings
    optional: true
    struct: SettingMetaInfo
  - description: ID of the token used to authenticate the plugin
    name: token_id
    optional: true
    type: str
  name: PluginInfo
- fields:
  - description: <code>True</code> if the client is allowed to create postings, <code>False</code>
      otherwise
    name: post
    optional: true
    type: bool
  - description: <code>True</code> if new postings are recommended to have a subject,
      <code>False</code> otherwise
    name: subject_present
    type: bool
  - array: true
    description: list of source text formats the node understands
    enum: SourceFormat
    name: source_formats
  - description: maximal size of a media attachment in a post
    name: media_max_size
    type: int
  - description: maximal size of a compressed image in a post
    name: image_recommended_size
    type: int
  - description: maximal resolution of a compressed image in a post (in pixels)
    name: image_recommended_pixels
    type: int
  - description: list of image formats (in MIME type form) the node understands
    name: image_formats
    type: List[str]
  name: PostingFeatures
- fields:
  - name: id
    type: str
  - description: ID of the current revision of the posting
    name: revision_id
    type: str
  - description: ID of the current revision of the original posting (for cached copies
      of remote postings only)
    name: receiver_revision_id
    optional: true
    type: str
  - description: total number of revisions the posting has
    name: total_revisions
    type: int
  - description: name of the node where the posting was published (for cached copies
      of remote postings only)
    name: receiver_name
    optional: true
    type: str
  - description: full name of the node where the posting was published (for cached
      copies of remote postings only)
    name: receiver_full_name
    optional: true
    type: str
  - description: gender of the node where the posting was published (for cached copies
      of remote postings only)
    name: receiver_gender
    optional: true
    type: str
  - description: avatar of the node where the posting was published (for cached copies
      of remote postings only)
    name: receiver_avatar
    optional: true
    struct: AvatarImage
  - description: ID of the original posting (for cached copies of remote postings
      only)
    name: receiver_posting_id
    optional: true
    type: str
  - description: ID of the media the posting is linked to, if any
    name: parent_media_id
    optional: true
    type: str
  - description: node name of the posting's owner
    name: owner_name
    type: str
  - description: full name of the posting's owner
    name: owner_full_name
    optional: true
    type: str
  - description: gender of the posting's owner
    name: owner_gender
    optional: true
    type: str
  - description: avatar of the posting's owner
    name: owner_avatar
    optional: true
    struct: AvatarImage
  - description: preview of the posting's body, a string representation of a JSON
      structure
    name: body_preview
    optional: true
    struct: Body
  - description: 'the source text of the posting, a string representation of a JSON
      structure, may be absent if not requested

      '
    name: body_src
    optional: true
    struct: Body
  - description: hash of the source text of the posting
    name: body_src_hash
    type: bytes
  - description: 'format of the source text of the posting, the list of available
      formats is returned in <code><a href="#PostingFeatures">PostingFeatures</a></code>

      '
    enum: SourceFormat
    name: body_src_format
    optional: true
  - description: body of the posting, a string representation of a JSON structure
    name: body
    struct: Body
  - description: format of the body of the posting, may have any value meaningful
      for the client
    enum: BodyFormat
    name: body_format
    optional: true
  - array: true
    description: list of the media attached to the posting
    name: media
    optional: true
    struct: MediaAttachment
  - description: heading of the posting
    name: heading
    type: str
  - description: description of the latest update
    name: update_info
    optional: true
    struct: UpdateInfo
  - description: posting creation timestamp - the real time when the posting was created
    name: created_at
    type: Timestamp
  - description: posting editing timestamp - the last time the posting was updated
    name: edited_at
    optional: true
    type: Timestamp
  - description: posting deletion timestamp - the time when the posting was deleted
    name: deleted_at
    optional: true
    type: Timestamp
  - description: original posting creation timestamp (for cached copies of remote
      postings only)
    name: receiver_created_at
    optional: true
    type: Timestamp
  - description: original posting editing timestamp (for cached copies of remote postings
      only)
    name: receiver_edited_at
    optional: true
    type: Timestamp
  - description: original posting deletion timestamp (for cached copies of remote
      postings only)
    name: receiver_deleted_at
    optional: true
    type: Timestamp
  - description: creation timestamp of the current revision of the posting
    name: revision_created_at
    type: Timestamp
  - description: 'creation timestamp of the current revision of the original posting
      (for cached copies of remote postings only)

      '
    name: receiver_revision_created_at
    optional: true
    type: Timestamp
  - description: 'posting purging timestamp - the time when the deleted posting will
      be purged from the database

      '
    name: deadline
    optional: true
    type: Timestamp
  - description: 'cryptographic digest of the posting (use <code><a href="fingerprints.html#Posting">Posting</a></code>
      fingerprint)

      '
    name: digest
    optional: true
    type: bytes
  - description: 'the posting''s owner signature (use <code><a href="fingerprints.html#Posting">Posting</a></code>
      fingerprint)

      '
    name: signature
    optional: true
    type: bytes
  - description: signature version (i.e. fingerprint version)
    name: signature_version
    optional: true
    type: int
  - array: true
    description: array of references to the posting from stories in feeds
    name: feed_references
    optional: true
    struct: FeedReference
  - array: true
    description: instants related to the posting that are blocked (for admin only)
    name: blocked_instants
    optional: true
    struct: BlockedPostingInstantInfo
  - description: the supported operations and the corresponding principals
    name: operations
    optional: true
    struct: PostingOperations
  - description: 'the supported operations for the original posting and the corresponding
      principals (for cached copies of remote postings only)

      '
    name: receiver_operations
    optional: true
    struct: PostingOperations
  - description: the operations and the corresponding principals that are overridden
      in the posting's comments
    name: comment_operations
    optional: true
    struct: CommentOperations
  - description: the operations and the corresponding principals that are overridden
      in reactions to the posting
    name: reaction_operations
    optional: true
    struct: ReactionOperations
  - description: 'the operations and the corresponding principals that are overridden
      in reactions to the posting''s comments

      '
    name: comment_reaction_operations
    optional: true
    struct: ReactionOperations
  - array: true
    description: operations on the posting that are blocked for the client
    enum: BlockedEntryOperation
    name: blocked_operations
    optional: true
  - array: true
    description: operations on the posting's comments that are blocked for the client
    enum: BlockedEntryOperation
    name: blocked_comment_operations
    optional: true
  - description: list of sheriffs supervising the posting
    name: sheriffs
    optional: true
    type: List[str]
  - array: true
    description: list of sheriff marks on the posting
    name: sheriff_marks
    optional: true
    struct: SheriffMark
  - description: types of reactions that the posting accepts
    name: accepted_reactions
    optional: true
    struct: AcceptedReactions
  - description: details of the existing reaction (if any) of the client's owner
    name: client_reaction
    optional: true
    struct: ClientReactionInfo
  - description: reactions summary of the posting
    name: reactions
    optional: true
    struct: ReactionTotalsInfo
  - array: true
    description: details of the sources the posting was received from (for cached
      copies of remote postings only)
    name: sources
    optional: true
    struct: PostingSourceInfo
  - description: total number of comments to the posting
    name: total_comments
    optional: true
    type: int
  name: PostingInfo
- fields:
  - name: id
    type: str
  - description: ID of the original revision (for cached copies of remote postings
      only)
    name: receiver_id
    optional: true
    type: str
  - description: preview of the revision's body, a string representation of a JSON
      structure
    name: body_preview
    optional: true
    struct: Body
  - description: hash of the source text of the revision
    name: body_src_hash
    type: bytes
  - description: 'format of the source text of the revision, the list of available
      formats is returned in <code><a href="#PostingFeatures">PostingFeatures</a></code>

      '
    enum: SourceFormat
    name: body_src_format
    optional: true
  - description: body of the revision, a string representation of a JSON structure
    name: body
    struct: Body
  - description: format of the body of the revision
    enum: BodyFormat
    name: body_format
    optional: true
  - array: true
    description: list of the media attached to the revision
    name: media
    optional: true
    struct: MediaAttachment
  - description: heading of the revision
    name: heading
    type: str
  - description: description of the latest update
    name: update_info
    optional: true
    struct: UpdateInfo
  - description: revision creation timestamp - the real time when the revision was
      created
    name: created_at
    type: Timestamp
  - description: revision deletion timestamp - the time when the revision was deleted
    name: deleted_at
    optional: true
    type: Timestamp
  - description: original revision creation timestamp (for cached copies of remote
      postings only)
    name: receiver_created_at
    optional: true
    type: Timestamp
  - description: original revision deletion timestamp (for cached copies of remote
      postings only)
    name: receiver_deleted_at
    optional: true
    type: Timestamp
  - description: 'cryptographic digest of the revision (use <code><a href="fingerprints.html#Posting">Posting</a></code>
      fingerprint)

      '
    name: digest
    optional: true
    type: bytes
  - description: 'the revision''s owner signature (use <code><a href="fingerprints.html#Posting">Posting</a></code>
      fingerprint)

      '
    name: signature
    optional: true
    type: bytes
  - description: signature version (i.e. fingerprint version)
    name: signature_version
    optional: true
    type: int
  - description: details of the existing reaction (if any) of the client's owner
    name: client_reaction
    optional: true
    struct: ClientReactionInfo
  - description: reactions summary of the posting revision
    name: reactions
    optional: true
    struct: ReactionTotalsInfo
  name: PostingRevisionInfo
- fields:
  - description: name of the remote node
    name: node_name
    type: str
  - description: full name of the remote node
    name: full_name
    optional: true
    type: str
  - description: avatar of the remote node
    name: avatar
    optional: true
    struct: AvatarImage
  - description: name of the feed on the remote node
    name: feed_name
    type: str
  - description: ID of the posting on the remote node
    name: posting_id
    type: str
  - description: timestamp when the posting was received from this source
    name: created_at
    type: Timestamp
  name: PostingSourceInfo
- fields:
  - description: avatar of the posting's owner
    name: owner_avatar
    optional: true
    struct: AvatarDescription
  - description: the source text of the posting, a string representation of a JSON
      structure
    name: body_src
    optional: true
    struct: Body
  - description: 'format of the source text of the posting, <code>plain-text</code>
      by default; the list of available formats is returned in <code><a href="#PostingFeatures">PostingFeatures</a></code>

      '
    enum: SourceFormat
    name: body_src_format
    optional: true
  - array: true
    description: array of IDs and digests of private media to be attached to the posting
    name: media
    optional: true
    struct: MediaWithDigest
  - description: types of reactions that the posting accepts
    name: accepted_reactions
    optional: true
    struct: AcceptedReactions
  - description: the operations and the corresponding principals
    name: operations
    optional: true
    struct: PostingOperations
  - description: the operations and the corresponding principals that are overridden
      in the posting's comments
    name: comment_operations
    optional: true
    struct: CommentOperations
  name: PostingSourceText
- errors:
  - code: postingText.ownerAvatar.mediaId.not-found
    description: owner's avatar is not found
  - code: postingText.bodySrc.blank
    description: body source text is empty
  - code: postingText.bodySrc.wrong-size
    description: body source text is too long
  - code: postingText.bodySrc.wrong-encoding
    description: body source text is formatted incorrectly
  - code: postingText.bodySrcFormat.unknown
    description: unknown body source text format
  - code: postingText.body.blank
    description: body text is empty
  - code: postingText.body.wrong-size
    description: body text is too long
  - code: postingText.bodyPreview.wrong-encoding
    description: body preview encoding is incorrect
  - code: postingText.bodyFormat.blank
    description: body format is not set
  - code: postingText.bodyFormat.wrong-size
    description: body format is too long
  - code: postingText.media.not-found
    description: media attachment is not found
  - code: postingText.media.not-compressed
    description: 'media attachment is not compressed as the node requires, the parameters
      of the desired compression are returned in <code><a href="#PostingFeatures">PostingFeatures</a></code>

      '
  - code: postingText.createdAt.blank
    description: body creation timestamp is not set
  - code: postingText.createdAt.out-of-range
    description: body creation timestamp is too far from the current timestamp
  - code: postingText.acceptedReactions.positive.wrong-size
    description: list of accepted positive reactions is too long
  - code: postingText.acceptedReactions.positive.wrong-pattern
    description: list of accepted positive reactions has wrong format
  - code: postingText.acceptedReactions.negative.wrong-size
    description: list of accepted negative reactions is too long
  - code: postingText.acceptedReactions.negative.wrong-pattern
    description: list of accepted negative reactions has wrong format
  - code: postingText.publications.cannot-modify
    description: <code>publications</code> field is not allowed in posting modification
      query
  - code: postingText.operations.wrong-principal
    description: principal for one of operations is invalid
  - code: postingText.commentOperations.wrong-principal
    description: principal for one of comment operations is invalid
  - code: postingText.reactionOperations.wrong-principal
    description: principal for one of reaction operations is invalid
  - code: postingText.commentReactionOperations.wrong-principal
    description: principal for one of comment reaction operations is invalid
  fields:
  - description: node name of the posting's owner
    name: owner_name
    optional: true
    type: str
  - description: full name of the posting's owner
    name: owner_full_name
    optional: true
    type: str
  - description: gender of the posting's owner
    name: owner_gender
    optional: true
    type: str
  - description: avatar of the posting's owner
    name: owner_avatar
    optional: true
    struct: AvatarDescription
  - description: preview of the posting's body, a string representation of a JSON
      structure
    name: body_preview
    optional: true
    struct: Body
  - description: the source text of the posting, a string representation of a JSON
      structure
    name: body_src
    optional: true
    struct: Body
  - description: 'format of the source text of the posting, <code>plain-text</code>
      by default; the list of available formats is returned in <code><a href="#PostingFeatures">PostingFeatures</a></code>

      '
    enum: SourceFormat
    name: body_src_format
    optional: true
  - description: body of the posting, a string representation of a JSON structure
    name: body
    optional: true
    struct: Body
  - description: format of the body of the posting, may have any value meaningful
      for the client
    enum: BodyFormat
    name: body_format
    optional: true
  - description: array of IDs of private media to be attached to the posting
    name: media
    optional: true
    type: List[str]
  - description: posting creation timestamp - the real time when the posting was created
    name: created_at
    optional: true
    type: Timestamp
  - description: types of reactions that the posting accepts
    name: accepted_reactions
    optional: true
    struct: AcceptedReactions
  - array: true
    description: list of publications in feeds that must be made after creating the
      posting (for new postings only)
    name: publications
    optional: true
    struct: StoryAttributes
  - description: description of the update
    name: update_info
    optional: true
    struct: UpdateInfo
  - description: 'the posting''s owner signature (use <code><a href="fingerprints.html#Posting">Posting</a></code>
      fingerprint)

      '
    name: signature
    optional: true
    type: bytes
  - description: signature version (i.e. fingerprint version)
    name: signature_version
    optional: true
    type: int
  - description: the operations and the corresponding principals
    name: operations
    optional: true
    struct: PostingOperations
  - description: the operations and the corresponding principals that are overridden
      in the posting's comments
    name: comment_operations
    optional: true
    struct: CommentOperations
  - description: the operations and the corresponding principals that are overridden
      in reactions to the posting
    name: reaction_operations
    optional: true
    struct: ReactionOperations
  - description: 'the operations and the corresponding principals that are overridden
      in reactions to the posting''s comments

      '
    name: comment_reaction_operations
    optional: true
    struct: ReactionOperations
  name: PostingText
- fields:
  - description: ID of the media file
    name: id
    type: str
  - description: SHA-1 hash of the media file
    name: hash
    type: str
  - description: 'virtual location of the media file, relative to the <code>/media</code>
      <a href="virtual-pages.html">virtual page</a>

      '
    name: path
    type: str
  - description: MIME type of the media
    name: mime_type
    type: str
  - description: width of the media in pixels (<code>None</code>, if the media file
      is not an image or video)
    js-default: '0'
    name: width
    optional: true
    type: int
  - description: height of the media in pixels (<code>None</code>, if the media file
      is not an image or video)
    js-default: '0'
    name: height
    optional: true
    type: int
  - description: 'media orientation, the value should be interpreted like <a href="https://jdhao.github.io/2019/07/31/image_rotation_exif_info/">the
      orientation value present in JPEG EXIF data</a> (<code>None</code>, if the media
      file is not an image or video)

      '
    js-default: '1'
    name: orientation
    optional: true
    type: int
  - description: size of the media file in bytes
    name: size
    type: int
  - description: ID of the posting linked to the media
    name: posting_id
    optional: true
    type: str
  - array: true
    description: list of media previews - downscaled versions of the media
    name: previews
    optional: true
    struct: MediaFilePreviewInfo
  - description: the supported operations and the corresponding principals
    name: operations
    optional: true
    struct: PrivateMediaFileOperations
  name: PrivateMediaFileInfo
- errors:
  - code: profileAttributes.fullName.wrong-size
    description: the full name is too long
  - code: profileAttributes.gender.wrong-size
    description: the gender string is too long
  - code: profileAttributes.email.wrong-size
    description: the E-mail is too long
  - code: profileAttributes.email.wrong-email
    description: the E-mail is not a well-formed E-mail address
  - code: profileAttributes.title.wrong-size
    description: the title is too long
  - code: profileAttributes.bioSrc.wrong-size
    description: the bio is too long
  - code: profileAttributes.operations.wrong-principal
    description: principal for one of operations is invalid
  fields:
  - description: node owner's full name
    name: full_name
    optional: true
    type: str
  - description: node owner's gender
    name: gender
    optional: true
    type: str
  - description: node owner's E-mail address
    name: email
    optional: true
    type: str
  - description: node title
    name: title
    optional: true
    type: str
  - description: the source text of node owner's bio (arbitrary text)
    name: bio_src
    optional: true
    type: str
  - description: 'format of the source text of node owner''s bio, <code>markdown</code>
      by default; the list of available formats is returned in <code><a href="#PostingFeatures">PostingFeatures</a></code>

      '
    enum: SourceFormat
    name: bio_src_format
    optional: true
  - description: node owner's avatar ID
    name: avatar_id
    optional: true
    type: str
  - array: true
    description: list of fundraisers - methods of giving a donation to the node owner
    name: fundraisers
    optional: true
    struct: FundraiserInfo
  - description: the operations and the corresponding principals
    name: operations
    optional: true
    struct: ProfileOperations
  name: ProfileAttributes
- fields:
  - description: node owner's full name
    name: full_name
    optional: true
    type: str
  - description: node owner's gender
    name: gender
    optional: true
    type: str
  - description: node owner's E-mail address
    name: email
    optional: true
    type: str
  - description: node title
    name: title
    optional: true
    type: str
  - description: the source text of node owner's bio (arbitrary text), may be absent
      if not requested
    name: bio_src
    optional: true
    type: str
  - description: 'format of the source text of node owner''s bio, <code>markdown</code>
      by default, may be absent if not requested; the list of available formats is
      returned in <code><a href="#PostingFeatures">PostingFeatures</a></code>

      '
    enum: SourceFormat
    name: bio_src_format
    optional: true
  - description: HTML representation of node owner's bio
    name: bio_html
    optional: true
    type: str
  - description: node owner's avatar
    name: avatar
    optional: true
    struct: AvatarInfo
  - array: true
    description: list of fundraisers - methods of giving a donation to the node owner
    name: fundraisers
    optional: true
    struct: FundraiserInfo
  - description: the supported operations and the corresponding principals
    name: operations
    optional: true
    struct: ProfileOperations
  name: ProfileInfo
- fields:
  - description: ID of the media file
    name: id
    type: str
  - description: 'virtual location of the media file, relative to the <code>/media</code>
      <a href="virtual-pages.html">virtual page</a>

      '
    name: path
    type: str
  - description: width of the media in pixels (<code>None</code>, if the media file
      is not an image or video)
    js-default: '0'
    name: width
    optional: true
    type: int
  - description: height of the media in pixels (<code>None</code>, if the media file
      is not an image or video)
    js-default: '0'
    name: height
    optional: true
    type: int
  - description: 'media orientation, the value should be interpreted like <a href="https://jdhao.github.io/2019/07/31/image_rotation_exif_info/">the
      orientation value present in JPEG EXIF data</a> (<code>None</code>, if the media
      file is not an image or video)

      '
    js-default: '1'
    name: orientation
    optional: true
    type: int
  - description: size of the media file in bytes
    name: size
    type: int
  name: PublicMediaFileInfo
- fields:
  - description: type of the notification
    enum: PushContentType
    name: type
  - description: ID of the story (<code>story-deleted</code> notifications only)
    name: id
    optional: true
    type: str
  - description: the story (<code>story-added</code> notifications only)
    name: story
    optional: true
    struct: StoryInfo
  - description: status of the feed (<code>feed-updated</code> notifications only)
    name: feed_status
    optional: true
    struct: FeedWithStatus
  name: PushContent
- fields:
  - description: <code>True</code>, if the reaction is negative, <code>False</code>,
      if positive
    name: negative
    type: bool
  - description: reaction code, usually interpreted by clients as emoji code point
    name: emoji
    type: int
  - description: the operations and the corresponding principals
    name: operations
    optional: true
    struct: ReactionOperations
  name: ReactionAttributes
- fields:
  - description: details of the reaction created
    name: reaction
    optional: true
    struct: ReactionInfo
  - description: summary of reactions after the creation
    name: totals
    struct: ReactionTotalsInfo
  name: ReactionCreated
- errors:
  - code: reactionDescription.ownerAvatar.mediaId.not-found
    description: owner's avatar is not found
  - code: reactionDescription.operations.wrong-principal
    description: principal for one of operations is invalid
  fields:
  - description: reaction owner's node name
    name: owner_name
    optional: true
    type: str
  - description: reaction owner's full name
    name: owner_full_name
    optional: true
    type: str
  - description: reaction owner's gender
    name: owner_gender
    optional: true
    type: str
  - description: reaction owner's avatar
    name: owner_avatar
    optional: true
    struct: AvatarDescription
  - description: <code>True</code>, if the reaction is negative, <code>False</code>,
      if positive
    name: negative
    type: bool
  - description: reaction code, usually interpreted by clients as emoji code point
    name: emoji
    type: int
  - description: 'the reaction owner signature (use <code><a href="fingerprints.html#Reaction">Reaction</a></code>
      fingerprint)

      '
    name: signature
    optional: true
    type: bytes
  - description: signature version (i.e. fingerprint version)
    name: signature_version
    optional: true
    type: int
  - description: the operations and the corresponding principals
    name: operations
    optional: true
    struct: ReactionOperations
  name: ReactionDescription
- fields:
  - description: reaction owner's name
    name: owner_name
    optional: true
    type: str
  - description: list of IDs of postings
    name: postings
    optional: true
    type: List[str]
  name: ReactionsFilter
- fields:
  - description: reaction owner's node name
    name: owner_name
    optional: true
    type: str
  - description: reaction owner's full name
    name: owner_full_name
    optional: true
    type: str
  - description: reaction owner's gender
    name: owner_gender
    optional: true
    type: str
  - description: reaction owner's avatar
    name: owner_avatar
    optional: true
    struct: AvatarImage
  - description: ID of the posting
    name: posting_id
    optional: true
    type: str
  - description: ID of the posting revision, if relevant
    name: posting_revision_id
    optional: true
    type: str
  - description: ID of the comment, if relevant
    name: comment_id
    optional: true
    type: str
  - description: ID of the comment revision, if relevant
    name: comment_revision_id
    optional: true
    type: str
  - description: <code>True</code>, if the reaction is negative, <code>False</code>,
      if positive
    name: negative
    optional: true
    type: bool
  - description: reaction code, usually interpreted by clients as emoji code point
    name: emoji
    optional: true
    type: int
  - name: moment
    optional: true
    type: int
  - description: reaction creation timestamp - the real time when the reaction was
      created
    name: created_at
    optional: true
    type: Timestamp
  - description: if present, the reaction will be erased at this time
    name: deadline
    optional: true
    type: Timestamp
  - description: 'the reaction owner signature (use <code><a href="fingerprints.html#Reaction">Reaction</a></code>
      fingerprint)

      '
    name: signature
    optional: true
    type: bytes
  - description: signature version (i.e. fingerprint version)
    name: signature_version
    optional: true
    type: int
  - description: the supported operations and the corresponding principals
    name: operations
    optional: true
    struct: ReactionOperations
  - description: the supported operations and the corresponding principals as defined
      by the reaction's owner
    name: owner_operations
    optional: true
    struct: ReactionOperations
  - description: 'the operations and the corresponding principals that are overridden
      by the reaction''s "senior": the posting''s owner in the case of reaction to
      a posting or the comment''s owner in the case of reaction to a comment

      '
    name: senior_operations
    optional: true
    struct: ReactionOperations
  - description: 'the operations and the corresponding principals that are overridden
      by the posting''s owner ("major") in the case of reaction to a comment; not
      set in the case of reaction to a posting

      '
    name: major_operations
    optional: true
    struct: ReactionOperations
  name: ReactionInfo
- fields:
  - description: the slice contains all reactions before this moment, inclusive. May
      be the far future.
    name: before
    type: int
  - description: the slice contains all reactions after this moment, exclusive. May
      be the far past.
    name: after
    type: int
  - description: total number of reactions in the whole list
    name: total
    type: int
  - array: true
    description: the reactions
    name: reactions
    struct: ReactionInfo
  name: ReactionsSliceInfo
- fields:
  - description: reaction code, usually interpreted by clients as emoji code point
    name: emoji
    type: int
  - description: total number of reactions with the given code
    name: total
    optional: true
    type: int
  - description: 'share the reactions with the given code stand from the total number
      of reactions (may be absent, if <code>total</code> is present)

      '
    max: 1
    min: 0
    name: share
    optional: true
    type: float
  name: ReactionTotalInfo
- fields:
  - description: list of IDs of postings
    name: postings
    type: List[str]
  name: ReactionTotalsFilter
- fields:
  - description: ID of the entry
    name: entry_id
    type: str
  - array: true
    description: summary of positive reactions
    js-default: '[]'
    name: positive
    optional: true
    struct: ReactionTotalInfo
  - array: true
    description: summary of negative reactions
    js-default: '[]'
    name: negative
    optional: true
    struct: ReactionTotalInfo
  name: ReactionTotalsInfo
- errors:
  - code: reactionOverride.operations.wrong-principal
    description: principal for one of operations is invalid
  - code: reactionOverride.seniorOperations.wrong-principal
    description: principal for one of senior operations is invalid
  - code: reactionOverride.majorOperations.wrong-principal
    description: principal for one of major operations is invalid
  fields:
  - description: the supported operations and the corresponding principals
    name: operations
    optional: true
    struct: ReactionOperations
  - description: 'the operations and the corresponding principals that are overridden
      by the reaction''s "senior": the posting''s owner in the case of reaction to
      a posting or the comment''s owner in the case of reaction to a comment

      '
    name: senior_operations
    optional: true
    struct: ReactionOperations
  - description: 'the operations and the corresponding principals that are overridden
      by the posting''s owner ("major") in the case of reaction to a comment; not
      set in the case of reaction to a posting

      '
    name: major_operations
    optional: true
    struct: ReactionOperations
  name: ReactionOverride
- fields:
  - name: name
    type: str
  - description: human-friendly mnemonic of the updating key
    max-items: 24
    min-items: 24
    name: mnemonic
    optional: true
    type: List[str]
  - description: base64-encoded secret of the updating key
    name: secret
    optional: true
    type: str
  name: RegisteredNameSecret
- fields:
  - description: name of the node
    name: node_name
    type: str
  - description: name of the feed on the node
    name: feed_name
    type: str
  name: RemoteFeed
- fields:
  - description: ID of the media file
    name: id
    type: str
  - description: SHA-1 hash of the media file
    name: hash
    optional: true
    type: str
  - description: cryptographic digest of the media file
    name: digest
    optional: true
    type: str
  name: RemoteMedia
- fields:
  - description: ID of the media file
    name: id
    type: str
  - description: SHA-1 hash of the media file
    name: hash
    optional: true
    type: str
  - description: cryptographic digest of the media file
    name: digest
    optional: true
    type: str
  name: RemoteMediaInfo
- fields:
  - description: name of the node
    name: node_name
    type: str
  - description: ID of the posting on the node
    name: posting_id
    type: str
  name: RemotePosting
- fields:
  - description: name of the node
    name: node_name
    type: str
  - description: ID of the posting on the node
    name: posting_id
    optional: true
    type: str
  name: RemotePostingOrNode
- fields:
  - description: asynchronous operation ID
    name: id
    type: str
  - name: node_name
    type: str
  - name: posting_id
    type: str
  - name: revision_id
    optional: true
    type: str
  - description: status of the operation
    enum: VerificationStatus
    name: status
    optional: true
  - description: error code
    name: error_code
    optional: true
    type: str
  - description: human-readable error message
    name: error_message
    optional: true
    type: str
  name: RemotePostingVerificationInfo
- fields:
  - description: asynchronous operation ID
    name: id
    type: str
  - name: node_name
    type: str
  - name: posting_id
    type: str
  - description: node name of the reaction's owner
    name: reaction_owner_name
    type: str
  - description: status of the operation
    enum: VerificationStatus
    name: status
    optional: true
  - description: error code
    name: error_code
    optional: true
    type: str
  - description: human-readable error message
    name: error_message
    optional: true
    type: str
  name: RemoteReactionVerificationInfo
- fields:
  - description: ID of the comment
    name: id
    type: str
  - description: ID of the comment revision
    name: revision_id
    optional: true
    type: str
  - description: node name of the comment's owner
    name: name
    type: str
  - description: full name of the comment's owner
    name: full_name
    optional: true
    type: str
  - description: gender of the comment's owner
    name: gender
    optional: true
    type: str
  - description: avatar of the comment's owner
    name: avatar
    optional: true
    struct: AvatarImage
  - description: heading of the comment
    name: heading
    optional: true
    type: str
  - description: 'cryptographic digest of the comment (use <code><a href="fingerprints.html#Comment">Comment</a></code>
      fingerprint)

      '
    name: digest
    type: bytes
  name: RepliedTo
- fields:
  - description: error code
    name: error_code
    type: str
  - description: human-readable error message
    js-default: '""'
    name: message
    optional: true
    type: str
  name: Result
- fields:
  - description: name of the sheriff that added the mark
    name: sheriff_name
    type: str
  name: SheriffMark
- fields:
  - description: name of the setting
    name: name
    type: str
  - description: value of the setting
    name: value
    optional: true
    type: str
  name: SettingInfo
- fields:
  - description: name of the setting
    name: name
    type: str
  - description: 'default value of the setting (if absent or <code>None</code>, the
      built-in default value will be used)

      '
    name: default_value
    optional: true
    type: str
  - description: 'the setting should be privileged (if absent or <code>None</code>,
      the built-in value of the flag will be used)

      '
    name: privileged
    optional: true
    type: bool
  name: SettingMetaAttributes
- fields:
  - description: name of the setting
    name: name
    type: str
  - description: type of the setting
    enum: SettingType
    name: type
  - description: default value of the setting
    name: default_value
    optional: true
    type: str
  - description: the setting is internal - not displayed to the user
    name: internal
    optional: true
    type: bool
  - description: the setting is privileged - may be changed by server owner only
    name: privileged
    optional: true
    type: bool
  - description: human-friendly description of the setting
    name: title
    optional: true
    type: str
  - description: 'additional modifiers that may help to choose a proper UI component
      for the setting value and to validate the input; meaning of the modifiers depend
      on the setting type

      '
    name: modifiers
    optional: true
    struct: SettingTypeModifiers
  name: SettingDescriptor
- fields:
  - description: name of the setting
    name: name
    type: str
  - description: type of the setting
    enum: SettingType
    name: type
  - description: default value of the setting
    name: default_value
    optional: true
    type: str
  - description: the setting is privileged - may be changed by server owner only
    name: privileged
    optional: true
    type: bool
  - description: human-friendly description of the setting
    name: title
    type: str
  - description: 'additional modifiers that may help to choose a proper UI component
      for the setting value and to validate the input; meaning of the modifiers depend
      on the setting type

      '
    name: modifiers
    optional: true
    struct: SettingTypeModifiers
  name: SettingMetaInfo
- fields:
  - description: "preferred format of displaying the value <ul>\n  <li>\n    <code>int</code>:\n\
      \    <ul>\n      <li>\n        <code>size</code> - data size in bytes/kilobytes/megabytes\
      \ etc.\n      </li>\n    </ul>\n  </li>\n</ul>\n"
    name: format
    optional: true
    type: str
  - description: (<code>int</code>, <code>Duration</code>) minimal value
    name: min
    optional: true
    type: str
  - description: (<code>int</code>, <code>Duration</code>) maximal value
    name: max
    optional: true
    type: str
  - description: (<code>string</code>) <code>True</code>, if the value is a multiline
      text
    name: multiline
    optional: true
    type: bool
  - description: (<code>Duration</code>) <code>True</code>, if value <code>never</code>
      is allowed
    name: never
    optional: true
    type: bool
  - description: (<code>Duration</code>) <code>True</code>, if value <code>always</code>
      is allowed
    name: always
    optional: true
    type: bool
  - array: true
    description: (<code>Principal</code>) list of allowed principals
    enum: PrincipalFlag
    name: principals
    optional: true
  name: SettingTypeModifiers
- errors:
  - code: sheriffComplainDecisionText.decisionCode.blank
    description: decision code is not set
  - code: sheriffComplainDecisionText.decisionDetails.wrong-size
    description: decision details are too long
  fields:
  - description: <code>True</code>, if the complaints in the group are to be rejected,
      <code>False</code> otherwise
    name: reject
    type: bool
  - description: the decision
    enum: SheriffOrderReason
    name: decision_code
    optional: true
  - description: detailed explanation of the decision in user-readable form
    name: decision_details
    optional: true
    type: str
  - description: '<code>True</code>, if the complaints'' owners'' names are not to
      be published, <code>False</code> otherwise

      '
    name: anonymous
    optional: true
    type: bool
  name: SheriffComplainDecisionText
- fields:
  - name: id
    type: str
  - description: name of the node the complaints are related to
    name: remote_node_name
    type: str
  - description: full name of the node the complaints are related to
    name: remote_node_full_name
    optional: true
    type: str
  - description: name of the feed the complaints are related to
    name: remote_feed_name
    type: str
  - description: ID of the posting the complaints are related to
    name: remote_posting_id
    optional: true
    type: str
  - description: ID of the posting's revision the complaints are related to
    name: remote_posting_revision_id
    optional: true
    type: str
  - description: posting owner's node name
    name: remote_posting_owner_name
    optional: true
    type: str
  - description: posting owner's full name
    name: remote_posting_owner_full_name
    optional: true
    type: str
  - description: posting owner's gender
    name: remote_posting_owner_gender
    optional: true
    type: str
  - description: heading of the posting
    name: remote_posting_heading
    optional: true
    type: str
  - description: ID of the comment the complaints are related to
    name: remote_comment_id
    optional: true
    type: str
  - description: ID of the comment's revision the complaints are related to
    name: remote_comment_revision_id
    optional: true
    type: str
  - description: comment owner's node name
    name: remote_comment_owner_name
    optional: true
    type: str
  - description: comment owner's full name
    name: remote_comment_owner_full_name
    optional: true
    type: str
  - description: comment owner's gender
    name: remote_comment_owner_gender
    optional: true
    type: str
  - description: heading of the comment
    name: remote_comment_heading
    optional: true
    type: str
  - description: the group of complaints creation timestamp - the real time when the
      group was created
    name: created_at
    type: Timestamp
  - description: moment of the group of complaints
    name: moment
    type: int
  - description: status of the group of complaints
    enum: SheriffComplainStatus
    name: status
  - description: sheriff's decision
    enum: SheriffOrderReason
    name: decision_code
    optional: true
  - description: detailed explanation of sheriff's decision in user-readable form
    name: decision_details
    optional: true
    type: str
  - description: sheriff's decision timestamp - the real time when the decision was
      made
    name: decided_at
    optional: true
    type: Timestamp
  - description: '<code>True</code>, if the complaints'' owners'' names are not published,
      <code>False</code> otherwise

      '
    name: anonymous
    optional: true
    type: bool
  name: SheriffComplainGroupInfo
- fields:
  - description: the slice contains all groups before this moment, inclusive. May
      be the far future.
    name: before
    type: int
  - description: the slice contains all groups after this moment, exclusive. May be
      the far past.
    name: after
    type: int
  - array: true
    description: the groups
    name: groups
    struct: SheriffComplainGroupInfo
  - description: total number of groups
    name: total
    type: int
  - description: number of groups before this slice till the far past
    name: total_in_past
    type: int
  - description: number of groups after this slice till the far future
    name: total_in_future
    type: int
  name: SheriffComplainGroupsSliceInfo
- fields:
  - name: id
    type: str
  - description: complaint owner's node name
    name: owner_name
    type: str
  - description: complaint owner's full name
    name: owner_full_name
    optional: true
    type: str
  - description: complaint owner's gender
    name: owner_gender
    optional: true
    type: str
  - description: the group of complains this complaint belongs to
    name: group
    optional: true
    struct: SheriffComplainGroupInfo
  - description: reason of the complaint
    enum: SheriffOrderReason
    name: reason_code
  - description: detailed explanation of reason of the complaint in user-readable
      form
    name: reason_details
    optional: true
    type: str
  - description: '<code>True</code>, if the complaint''s owner wants his name not
      to be published, <code>False</code> otherwise

      '
    name: anonymous_requested
    optional: true
    type: bool
  - description: complaint creation timestamp - the real time when the order was created
    name: created_at
    type: Timestamp
  name: SheriffComplainInfo
- errors:
  - code: sheriffComplainText.ownerFullName.wrong-size
    description: owner's full name is too long
  - code: sheriffComplainText.ownerGender.wrong-size
    description: owner's gender is too long
  - code: sheriffComplainText.nodeName.blank
    description: node name is empty
  - code: sheriffComplainText.nodeName.wrong-size
    description: node name is too long
  - code: sheriffComplainText.fullName.wrong-size
    description: node's full name is too long
  - code: sheriffComplainText.feedName.blank
    description: feed name is empty
  - code: sheriffComplainText.feedName.wrong-size
    description: feed name is too long
  - code: sheriffComplainText.postingOwnerName.wrong-size
    description: posting owner's name is too long
  - code: sheriffComplainText.postingOwnerFullName.wrong-size
    description: posting owner's full name is too long
  - code: sheriffComplainText.postingOwnerGender.wrong-size
    description: posting owner's gender is too long
  - code: sheriffComplainText.postingHeading.wrong-size
    description: posting heading is too long
  - code: sheriffComplainText.postingId.wrong-size
    description: posting ID is too long
  - code: sheriffComplainText.commentOwnerName.wrong-size
    description: comment owner's name is too long
  - code: sheriffComplainText.commentOwnerFullName.wrong-size
    description: comment owner's full name is too long
  - code: sheriffComplainText.commentOwnerGender.wrong-size
    description: comment owner's gender is too long
  - code: sheriffComplainText.commentHeading.wrong-size
    description: comment heading is too long
  - code: sheriffComplainText.commentId.wrong-size
    description: comment ID is too long
  - code: sheriffComplainText.reasonDetails.wrong-size
    description: reason details are too long
  fields:
  - description: complaint owner's full name
    name: owner_full_name
    optional: true
    type: str
  - description: complaint owner's gender
    name: owner_gender
    optional: true
    type: str
  - description: name of the node the complaint is related to
    name: node_name
    type: str
  - description: full name of the node the complaint is related to
    name: full_name
    optional: true
    type: str
  - description: name of the feed the complaint is related to
    name: feed_name
    type: str
  - description: ID of the posting the complaint is related to
    name: posting_id
    optional: true
    type: str
  - description: posting owner's node name
    name: posting_owner_name
    optional: true
    type: str
  - description: posting owner's full name
    name: posting_owner_full_name
    optional: true
    type: str
  - description: posting owner's gender
    name: posting_owner_gender
    optional: true
    type: str
  - description: heading of the posting
    name: posting_heading
    optional: true
    type: str
  - description: ID of the comment the complaint is related to
    name: comment_id
    optional: true
    type: str
  - description: comment owner's node name
    name: comment_owner_name
    optional: true
    type: str
  - description: comment owner's full name
    name: comment_owner_full_name
    optional: true
    type: str
  - description: comment owner's gender
    name: comment_owner_gender
    optional: true
    type: str
  - description: heading of the comment
    name: comment_heading
    optional: true
    type: str
  - description: reason of the complaint
    enum: SheriffOrderReason
    name: reason_code
    optional: true
  - description: detailed explanation of reason of the complaint in user-readable
      form
    name: reason_details
    optional: true
    type: str
  - description: '<code>True</code>, if the complaint''s owner wants his name not
      to be published, <code>False</code> otherwise

      '
    name: anonymous
    optional: true
    type: bool
  name: SheriffComplainText
- errors:
  - code: sheriffOrderAttributes.feedName.blank
    description: feed name is empty
  - code: sheriffOrderAttributes.feedName.wrong-size
    description: feed name is too long
  - code: sheriffOrderAttributes.reasonDetails.wrong-size
    description: reason details are too long
  fields:
  - description: '<code>True</code>, if the order is to cancel the previous order
      of this type, <code>False</code> otherwise

      '
    name: delete
    optional: true
    type: bool
  - description: name of the feed the order is related to
    name: feed_name
    type: str
  - description: ID of the posting the order is related to
    name: posting_id
    optional: true
    type: str
  - description: ID of the comment the order is related to
    name: comment_id
    optional: true
    type: str
  - description: category of the order
    enum: SheriffOrderCategory
    name: category
  - description: reason of the order
    enum: SheriffOrderReason
    name: reason_code
    optional: true
  - description: detailed explanation of reason of the order in user-readable form
    name: reason_details
    optional: true
    type: str
  name: SheriffOrderAttributes
- errors:
  - code: sheriffOrderDetails.id.blank
    description: ID is empty
  - code: sheriffOrderDetails.id.wrong-size
    description: ID is too long
  - code: sheriffOrderDetails.sheriffName.blank
    description: sheriff name is empty
  - code: sheriffOrderDetails.sheriffName.wrong-size
    description: sheriff name is too long
  - code: sheriffOrderDetails.sheriffAvatar.mediaId.not-found
    description: sheriff's avatar is not found
  - code: sheriffOrderDetails.feedName.blank
    description: feed name is empty
  - code: sheriffOrderDetails.feedName.wrong-size
    description: feed name is too long
  - code: sheriffOrderDetails.reasonDetails.wrong-size
    description: reason details are too long
  - code: sheriffOrderDetails.createdAt.out-of-range
    description: order creation timestamp is too far from the current timestamp
  fields:
  - name: id
    type: str
  - description: '<code>True</code>, if the order is to cancel the previous order
      of this type, <code>False</code> otherwise

      '
    name: delete
    optional: true
    type: bool
  - description: node name of the sheriff
    name: sheriff_name
    type: str
  - description: sheriff's avatar
    name: sheriff_avatar
    optional: true
    struct: AvatarDescription
  - description: name of the feed the order is related to
    name: feed_name
    type: str
  - description: ID of the posting the order is related to
    name: posting_id
    optional: true
    type: str
  - description: ID of the comment the order is related to
    name: comment_id
    optional: true
    type: str
  - description: category of the order
    enum: SheriffOrderCategory
    name: category
  - description: reason of the order
    enum: SheriffOrderReason
    name: reason_code
    optional: true
  - description: detailed explanation of reason of the order in user-readable form
    name: reason_details
    optional: true
    type: str
  - description: order creation timestamp - the real time when the order was created
    name: created_at
    type: Timestamp
  - description: 'the sheriff''s signature (use <code><a href="fingerprints.html#SheriffOrder">SheriffOrder</a></code>
      fingerprint)

      '
    name: signature
    type: bytes
  - description: signature version (i.e. fingerprint version)
    name: signature_version
    type: int
  name: SheriffOrderDetails
- fields:
  - name: id
    type: str
  - description: '<code>True</code>, if the order is to cancel the previous order
      of this type, <code>False</code> otherwise

      '
    name: delete
    optional: true
    type: bool
  - description: node name of the sheriff
    name: sheriff_name
    type: str
  - description: name of the node the order was sent to
    name: node_name
    type: str
  - description: full name of the node the order was sent to
    name: node_full_name
    optional: true
    type: str
  - description: name of the feed the order is related to
    name: feed_name
    type: str
  - description: ID of the posting the order is related to
    name: posting_id
    optional: true
    type: str
  - description: ID of the posting's revision the order is related to
    name: posting_revision_id
    optional: true
    type: str
  - description: posting owner's node name
    name: posting_owner_name
    optional: true
    type: str
  - description: posting owner's full name
    name: posting_owner_full_name
    optional: true
    type: str
  - description: posting owner's gender
    name: posting_owner_gender
    optional: true
    type: str
  - description: heading of the posting
    name: posting_heading
    optional: true
    type: str
  - description: ID of the comment the order is related to
    name: comment_id
    optional: true
    type: str
  - description: ID of the comment's revision the order is related to
    name: comment_revision_id
    optional: true
    type: str
  - description: comment owner's node name
    name: comment_owner_name
    optional: true
    type: str
  - description: comment owner's full name
    name: comment_owner_full_name
    optional: true
    type: str
  - description: comment owner's gender
    name: comment_owner_gender
    optional: true
    type: str
  - description: heading of the comment
    name: comment_heading
    optional: true
    type: str
  - description: category of the order
    enum: SheriffOrderCategory
    name: category
  - description: reason of the order
    enum: SheriffOrderReason
    name: reason_code
    optional: true
  - description: detailed explanation of reason of the order in user-readable form
    name: reason_details
    optional: true
    type: str
  - description: order creation timestamp - the real time when the order was created
    name: created_at
    type: Timestamp
  - description: 'the sheriff''s signature (use <code><a href="fingerprints.html#SheriffOrder">SheriffOrder</a></code>
      fingerprint)

      '
    name: signature
    type: bytes
  - description: signature version (i.e. fingerprint version)
    name: signature_version
    type: int
  - description: ID of the groups of complaints that were the cause of the order
    name: complain_group_id
    optional: true
    type: str
  name: SheriffOrderInfo
- fields:
  - description: name of the feed
    name: feed_name
    optional: true
    type: str
  - description: story publication timestamp - the time the story must be published
      under in the feed
    name: publish_at
    optional: true
    type: Timestamp
  - description: '<code>True</code>, if the story is pinned (should appear before
      any non-pinned story in the feed), <code>False</code> otherwise

      '
    name: pinned
    optional: true
    type: bool
  - description: value of the <code>viewed</code> flag (<code>None</code>, if the
      flag is not changed)
    name: viewed
    optional: true
    type: bool
  - description: value of the <code>read</code> flag (<code>None</code>, if the flag
      is not changed)
    name: read
    optional: true
    type: bool
  - description: value of the <code>satisfied</code> flag (<code>None</code>, if the
      flag is not changed)
    name: satisfied
    optional: true
    type: bool
  name: StoryAttributes
- fields:
  - name: id
    type: str
  - description: name of the feed
    name: feed_name
    type: str
  - description: type of the story
    enum: StoryType
    name: story_type
  - description: story creation timestamp - the real time when the story was created
    name: created_at
    type: Timestamp
  - description: story publication timestamp - the time the story is published under
      in the feed
    name: published_at
    type: Timestamp
  - description: '<code>True</code>, if the story is pinned (should appear before
      any non-pinned story in the feed), <code>False</code> otherwise

      '
    name: pinned
    optional: true
    type: bool
  - name: moment
    type: int
  - description: <code>True</code>, if the story has been viewed by node owner, <code>False</code>
      otherwise
    name: viewed
    optional: true
    type: bool
  - description: <code>True</code>, if the story has been read by node owner, <code>False</code>
      otherwise
    name: read
    optional: true
    type: bool
  - description: 'if the story is associated with a user action (for example, it contains
      a form that should be submitted), this flag is set to <code>True</code>, if
      the action is done already, and <code>False</code> otherwise

      '
    name: satisfied
    optional: true
    type: bool
  - description: name of the node related to the summary of the story
    name: summary_node_name
    optional: true
    type: str
  - description: full name of the node related to the summary of the story
    name: summary_full_name
    optional: true
    type: str
  - description: avatar of the summary of the story
    name: summary_avatar
    optional: true
    struct: AvatarImage
  - description: 'user-readable summary of the story - this field is <b>deprecated</b>
      in favor of <code>summaryData</code>

      '
    name: summary
    optional: true
    type: str
  - description: details of the story; they are used by the client to build a user-readable
      summary of the story
    name: summary_data
    optional: true
    struct: StorySummaryData
  - description: the posting this story is about
    name: posting
    optional: true
    struct: PostingInfo
  - description: ID of the posting this story is about, used if the whole posting
      is not returned
    name: posting_id
    optional: true
    type: str
  - description: the comment this story is about
    name: comment
    optional: true
    struct: CommentInfo
  - description: ID of the comment this story is about, used if the whole posting
      is not returned
    name: comment_id
    optional: true
    type: str
  - description: name of the node this story is about
    name: remote_node_name
    optional: true
    type: str
  - description: full name of the node this story is about
    name: remote_full_name
    optional: true
    type: str
  - description: ID of the posting at remote node this story is about
    name: remote_posting_id
    optional: true
    type: str
  - description: ID of the comment at remote node this story is about
    name: remote_comment_id
    optional: true
    type: str
  - description: ID of the media at remote node this story is about
    name: remote_media_id
    optional: true
    type: str
  - description: the supported operations and the corresponding principals
    name: operations
    optional: true
    struct: StoryOperations
  name: StoryInfo
- fields:
  - description: a node
    name: node
    optional: true
    struct: StorySummaryNode
  - description: a posting
    name: posting
    optional: true
    struct: StorySummaryEntry
  - description: a comment
    name: comment
    optional: true
    struct: StorySummaryEntry
  - array: true
    description: list of comments
    name: comments
    optional: true
    struct: StorySummaryEntry
  - description: total number of comments
    name: total_comments
    optional: true
    type: int
  - description: the comment replied to
    name: replied_to
    optional: true
    struct: StorySummaryEntry
  - description: the parent posting of the media
    name: parent_posting
    optional: true
    struct: StorySummaryEntry
  - description: a reaction
    name: reaction
    optional: true
    struct: StorySummaryReaction
  - array: true
    description: list of reactions
    name: reactions
    optional: true
    struct: StorySummaryReaction
  - description: total number of reactions
    name: total_reactions
    optional: true
    type: int
  - description: name of a feed
    name: feed_name
    optional: true
    type: str
  - description: subscription reason
    enum: SubscriptionReason
    name: subscription_reason
    optional: true
  - description: a group of friends
    name: friend_group
    optional: true
    struct: StorySummaryFriendGroup
  - description: summary of blocking a user
    name: blocked
    optional: true
    struct: StorySummaryBlocked
  - description: summary of an action of a sheriff
    name: sheriff
    optional: true
    struct: StorySummarySheriff
  - description: additional descriptive text
    name: description
    optional: true
    type: str
  name: StorySummaryData
- fields:
  - array: true
    description: list of the operations blocked
    enum: BlockedOperation
    name: operations
  - description: the period of blocking in seconds
    name: period
    optional: true
    type: int
  name: StorySummaryBlocked
- fields:
  - description: ID of the group of friends
    name: id
    optional: true
    type: str
  - description: title of the group of friends
    name: title
    optional: true
    type: str
  name: StorySummaryFriendGroup
- fields:
  - description: entry owner's name
    name: owner_name
    optional: true
    type: str
  - description: entry owner's full name
    name: owner_full_name
    optional: true
    type: str
  - description: entry owner's gender
    name: owner_gender
    optional: true
    type: str
  - description: entry heading
    name: heading
    optional: true
    type: str
  - description: list of sheriffs supervising the entry
    name: sheriffs
    optional: true
    type: List[str]
  - array: true
    description: list of sheriff marks on the entry
    name: sheriff_marks
    optional: true
    struct: SheriffMark
  name: StorySummaryEntry
- fields:
  - description: node owner's name
    name: owner_name
    optional: true
    type: str
  - description: node owner's full name
    name: owner_full_name
    optional: true
    type: str
  - description: node owner's gender
    name: owner_gender
    optional: true
    type: str
  name: StorySummaryNode
- fields:
  - description: reaction owner's name
    name: owner_name
    optional: true
    type: str
  - description: reaction owner's full name
    name: owner_full_name
    optional: true
    type: str
  - description: reaction owner's gender
    name: owner_gender
    optional: true
    type: str
  - description: reaction code
    name: emoji
    optional: true
    type: int
  name: StorySummaryReaction
- fields:
  - description: name of the sheriff
    name: sheriff_name
    type: str
  - description: ID of the sheriff's order
    name: order_id
    optional: true
    type: str
  - description: ID of the complaint, if any
    name: complain_id
    optional: true
    type: str
  name: StorySummarySheriff
- errors:
  - code: subscriberDescription.type.blank
    description: type is empty
  - code: subscriberDescription.feedName.blank
    description: feed name is empty
  - code: subscriberDescription.feedName.not-found
    description: feed is not found
  - code: subscriberDescription.postingId.blank
    description: posting ID is empty
  - code: subscriberDescription.postingId.not-found
    description: posting is not found
  - code: subscriberDescription.ownerAvatar.mediaId.not-found
    description: subscriber's avatar is not found
  - code: subscriberDescription.operations.wrong-principal
    description: principal for one of operations is invalid
  fields:
  - description: subscription type
    enum: SubscriptionType
    name: type
  - description: feed name, if the subscription type requires one
    name: feed_name
    optional: true
    type: str
  - description: posting ID, if the subscription type requires one
    name: posting_id
    optional: true
    type: str
  - description: timestamp of the latest known state of the object
    name: last_updated_at
    optional: true
    type: Timestamp
  - description: the operations and the corresponding principals
    name: operations
    optional: true
    struct: SubscriberOperations
  name: SubscriberDescription
- fields:
  - description: subscriber ID
    name: id
    type: str
  - description: subscription type
    enum: SubscriptionType
    name: type
  - description: feed name, if the subscription type requires one
    name: feed_name
    optional: true
    type: str
  - description: posting ID, if the subscription type requires one
    name: posting_id
    optional: true
    type: str
  - description: name of the subscribed node
    name: node_name
    type: str
  - description: information known about the subscribed node
    name: contact
    optional: true
    struct: ContactInfo
  - description: subscription creation timestamp
    name: created_at
    type: Timestamp
  - description: the supported operations and the corresponding principals
    name: operations
    optional: true
    struct: SubscriberOperations
  - description: the supported operations and the corresponding principals as defined
      by the subscriber
    name: owner_operations
    optional: true
    struct: SubscriberOperations
  - description: the operations and the corresponding principals that are overridden
      by the node administrator
    name: admin_operations
    optional: true
    struct: SubscriberOperations
  name: SubscriberInfo
- errors:
  - code: subscriberOverride.operations.wrong-principal
    description: principal for one of operations is invalid
  - code: subscriberOverride.adminOperations.wrong-principal
    description: principal for one of admin operations is invalid
  fields:
  - description: the supported operations and the corresponding principals
    name: operations
    optional: true
    struct: SubscriberOperations
  - description: the operations and the corresponding principals that are overridden
      by the node administrator
    name: admin_operations
    optional: true
    struct: SubscriberOperations
  name: SubscriberOverride
- errors:
  - code: subscriptionDescription.type.blank
    description: type is empty
  - code: subscriptionDescription.feedName.blank
    description: feed name is empty
  - code: subscriptionDescription.feedName.not-found
    description: feed is not found
  - code: subscriptionDescription.remoteSubscriberId.blank
    description: subscriber ID is empty
  - code: subscriptionDescription.remoteSubscriberId.wrong-size
    description: subscriber ID is too long
  - code: subscriptionDescription.remoteNodeName.blank
    description: node name is empty
  - code: subscriptionDescription.remoteNodeName.wrong-size
    description: node name is too long
  - code: subscriptionDescription.remoteAvatar.mediaId.not-found
    description: node avatar is not found
  - code: subscriptionDescription.remoteFeedName.wrong-size
    description: remote feed name is too long
  - code: subscriptionDescription.remotePostingId.wrong-size
    description: posting ID is too long
  - code: subscriptionDescription.reason.blank
    description: subscription reason is empty
  - code: subscriptionDescription.operations.wrong-principal
    description: principal for one of operations is invalid
  fields:
  - description: subscription type
    enum: SubscriptionType
    name: type
  - description: feed name on this node that receives notifications
    name: feed_name
    optional: true
    type: str
  - description: name of the node this node is subscribed to
    name: remote_node_name
    type: str
  - description: feed name on the remote node, if the subscription type requires one
    name: remote_feed_name
    optional: true
    type: str
  - description: posting ID on the remote node, if the subscription type requires
      one
    name: remote_posting_id
    optional: true
    type: str
  - description: subscription reason
    enum: SubscriptionReason
    name: reason
    optional: true
  - description: the operations and the corresponding principals
    name: operations
    optional: true
    struct: SubscriptionOperations
  name: SubscriptionDescription
- fields:
  - description: subscription type
    enum: SubscriptionType
    name: type
    optional: true
  - array: true
    description: list of feeds
    name: feeds
    optional: true
    struct: RemoteFeed
  - array: true
    description: list of postings
    name: postings
    optional: true
    struct: RemotePosting
  name: SubscriptionFilter
- fields:
  - description: subscription ID
    name: id
    type: str
  - description: subscription type
    enum: SubscriptionType
    name: type
  - description: feed name on this node that receives notifications
    name: feed_name
    optional: true
    type: str
  - description: name of the node this node is subscribed to
    name: remote_node_name
    type: str
  - description: information known about the remote node
    name: contact
    optional: true
    struct: ContactInfo
  - description: feed name on the remote node, if the subscription type requires one
    name: remote_feed_name
    optional: true
    type: str
  - description: posting ID on the remote node, if the subscription type requires
      one
    name: remote_posting_id
    optional: true
    type: str
  - description: subscription creation timestamp
    name: created_at
    type: Timestamp
  - description: subscription reason
    enum: SubscriptionReason
    name: reason
  - description: the supported operations and the corresponding principals
    name: operations
    optional: true
    struct: SubscriptionOperations
  name: SubscriptionInfo
- errors:
  - code: subscriptionOverride.operations.wrong-principal
    description: principal for one of operations is invalid
  fields:
  - description: the supported operations and the corresponding principals
    name: operations
    optional: true
    struct: SubscriptionOperations
  name: SubscriptionOverride
- errors:
  - code: tokenAttributes.login.blank
    description: the login is empty
  - code: tokenAttributes.password.blank
    description: the password is empty
  fields:
  - name: login
    type: str
  - name: password
    type: str
  - description: "A bit mask describing which permissions should be granted to the\
      \ token. If not set, all permissions of the administrator are granted. The bits\
      \ have the following meaning: <ul>\n  <li><code>other (0x0001)</code> - any\
      \ other permission not listed below;</li>\n  <li><code>view-media (0x0002)</code>\
      \ - view media files.</li>\n</ul>\n"
    name: auth_category
    optional: true
    type: int
  - description: a user-readable name of the token
    name: name
    optional: true
    type: str
  name: TokenAttributes
- fields:
  - description: token ID (this is not the token, just an ID)
    name: id
    type: str
  - description: the token
    name: token
    type: str
  - description: a user-readable name of the token
    name: name
    optional: true
    type: str
  - description: "The list of permissions granted to the token. The values are:  <ul>\n\
      \  <li><code>other</code> - any other permission not listed below;</li>\n  <li><code>view-media</code>\
      \ - view media files.</li>\n</ul>\n"
    js-default: '[]'
    name: permissions
    optional: true
    type: List[str]
  - description: a plugin the token belongs to; if set, only this plugin may use the
      token
    name: plugin_name
    optional: true
    type: str
  - description: token creation timestamp
    name: created_at
    type: Timestamp
  - description: timestamp of the end of the token's life
    name: deadline
    optional: true
    type: Timestamp
  - description: timestamp of the last time the token was used
    name: last_used_at
    optional: true
    type: Timestamp
  - description: name of the browser used by the latest user of the token
    name: last_used_browser
    optional: true
    type: str
  - description: IP address of the latest user of the token
    name: last_used_ip
    optional: true
    type: str
  name: TokenInfo
- fields:
  - description: a user-readable name of the token
    name: name
    optional: true
    type: str
  name: TokenName
- fields:
  - description: <code>True</code>, if the update is important, <code>False</code>
      (the default) otherwise
    name: important
    optional: true
    type: bool
  - description: description of the update
    name: description
    optional: true
    type: str
  name: UpdateInfo
- fields:
  - description: name of the user list
    name: name
    type: str
  - description: number of items in the user list
    name: total
    type: int
  name: UserListInfo
- errors:
  - code: userListItemAttributes.nodeName.blank
    description: node name is empty
  - code: userListItemAttributes.nodeName.wrong-size
    description: node name is too long
  fields:
  - description: the name of the node
    name: node_name
    type: str
  name: UserListItemAttributes
- fields:
  - description: the name of the node
    name: node_name
    type: str
  - description: the node addition timestamp - the real time when the node was added
      to the list
    name: created_at
    type: Timestamp
  - description: moment of the node
    name: moment
    type: int
  name: UserListItemInfo
- fields:
  - description: the name of the list
    name: list_name
    type: str
  - description: the slice contains all items before this moment, inclusive. May be
      the far future.
    name: before
    type: int
  - description: the slice contains all items after this moment, exclusive. May be
      the far past.
    name: after
    type: int
  - array: true
    description: the items
    name: items
    struct: UserListItemInfo
  - description: total number of items
    name: total
    type: int
  - description: number of items before this slice till the far past
    name: total_in_past
    type: int
  - description: number of items after this slice till the far future
    name: total_in_future
    type: int
  name: UserListSliceInfo
- fields:
  - name: node_name
    optional: true
    type: str
  - description: <code>True</code> if node name is about to be changed
    name: node_name_changing
    optional: true
    type: bool
  - description: node owner's full name
    name: full_name
    optional: true
    type: str
  - description: node owner's gender
    name: gender
    optional: true
    type: str
  - description: node title
    name: title
    optional: true
    type: str
  - description: node owner's avatar
    name: avatar
    optional: true
    struct: AvatarImage
  name: WhoAmI
