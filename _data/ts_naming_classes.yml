classes:
  - name: MoeraNamingError
    category: exception
    description: Generic naming server error.
    functions:
      - name: MoeraNamingError(name, message)
        params:
          - name: name
            type: string
            description: API method name
          - name: message
            type: string
            description: error message

  - name: MoeraNamingApiError
    category: exception
    description: Naming server connection error.
    fields:
      - name: errorCode
        type: string
        description: Error code.
    functions:
      - name: MoeraNamingApiError(name, result)
        params:
          - name: message
            type: string
            description: error message
          - name: result
            struct: ErrorResult
            description: server response

  - name: MoeraNamingConnectionError
    category: exception
    description: Naming server connection error.
    functions:
      - name: MoeraNamingConnectionError(name)
        params:
          - name: message
            type: string
            description: error message

  - name: MoeraNaming
    category: class
    description: Naming API interface.
    functions:
      - name: MoeraNaming(server=MAIN_NAMING_SERVER)
        params:
          - name: server
            type: string
            optional: true
            description: the naming server URL

constants:
  - name: MAIN_NAMING_SERVER
    value: '"https://naming.moera.org/moera-naming"'
    description: Main Moera naming server.
  - name: DEV_NAMING_SERVER
    value: '"https://naming-dev.moera.org/moera-naming"'
    description: Moera developers' naming server.

functions:
  - name: parseNodeName(nodeName)
    params:
      - name: nodeName
        type: string
        description: the node name to be parsed
    out:
      type: "[string, number]"
      description: array [name, generation]
    description: >
      Parse a node name and return its name and generation parts.

      If the node name does not include a generation, generation 0 is returned. If name syntax is invalid,
      <code>Error</code> is thrown.

  - name: shorten(nodeName)
    params:
      - name: nodeName
        type: string | null
        description: the node name in compact or full form
    out:
      type: string | null
      description: the node name in the compact form
    description: Converts the node name to the compact form, omitting generation 0.

  - name: expand(nodeName)
    params:
      - name: nodeName
        type: string | null
        description: the node name in compact or full form
    out:
      type: string | null
      description: the node name in the full form
    description: Converts the node name to the full form, containing generation.

  - name: resolve(name, namingServer=MAIN_NAMING_SERVER)
    params:
      - name: name
        type: string
        description: the node name
      - name: namingServer
        type: string
        optional: true
        description: a naming server to be used
    out:
      type: Promise&lt;string | null>
      description: the node URI, or <code>null</code> if the name does not exist
    description: Shortcut function to resolve a node name and get the node URI.

  - name: validateNamingSchema(schemaName, data)
    params:
      - name: schemaName
        type: string
        description: the schema name (same as the validated structure name)
      - name: data
        type: any
        description: the data structure being validated
    out:
      type: "{ valid: boolean; errors?: { message?: string }[] | null }"
      description: result of the validation and error messages
    description: >
      Validates a data structure against the given JSON schema. In the process of validation, additional fields in
      the input that are absent in the schema are deleted.
